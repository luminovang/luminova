<?php declare(strict_types = 1);

return [
	'lastFullAnalysisTime' => 1710601125,
	'meta' => array (
  'cacheVersion' => 'v10-collectedData',
  'phpstanVersion' => '1.10.62',
  'phpVersion' => 80301,
  'projectConfig' => '{parameters: {phpVersion: 80100, tmpDir: /Applications/XAMPP/xamppfiles/htdocs/luminova.fm/builds/phpstan, level: 6, bootstrapFiles: [/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/plugins/autoload.php], paths: [/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app, /Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system, /Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries], excludePaths: {analyseAndScan: [/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/writeable/*, /Applications/XAMPP/xamppfiles/htdocs/luminova.fm/samples/*, /Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/plugins/*, /Applications/XAMPP/xamppfiles/htdocs/luminova.fm/builds/*, /Applications/XAMPP/xamppfiles/htdocs/luminova.fm/dump/*], analyse: []}, scanDirectories: [/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/samples, /Applications/XAMPP/xamppfiles/htdocs/luminova.fm/resources/views], checkMissingIterableValueType: false, checkGenericClassInNonGenericObjectType: false, checkMissingCallableSignature: true, treatPhpDocTypesAsCertain: false}, services: [Luminova\\Debugger\\PHPStanRules]}',
  'analysedPaths' => 
  array (
    0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app',
    1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system',
    2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries',
  ),
  'scannedFiles' => 
  array (
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/resources/views/404.php' => 'da1b6e7668ca30014e8725bdc72d62011fec7bc2',
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/resources/views/index.php' => '79afe7b2a7bd62069e41f116987d92f9ef1fcc53',
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/resources/views/system_errors/errors.php' => '5c8c51098eb8a4a1389183a37d5f772eefa945fd',
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/resources/views/system_errors/exceptions.php' => 'd0bac48701fa269abceeb75edd12988a3bff813a',
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/resources/views/system_errors/maintenance.php' => '6d171356205bfc4719b0e1d690b2afeeb035f5f9',
  ),
  'composerLocks' => 
  array (
  ),
  'composerInstalled' => 
  array (
  ),
  'executedFilesHashes' => 
  array (
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/plugins/autoload.php' => 'c8ec13146f16edd2a40bf6cbb5b200fcaf9d560f',
    'phar:///Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/plugins/phpstan/phpstan/phpstan.phar/stubs/runtime/Attribute.php' => 'eaf9127f074e9c7ebc65043ec4050f9fed60c2bb',
    'phar:///Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/plugins/phpstan/phpstan/phpstan.phar/stubs/runtime/ReflectionAttribute.php' => '0b4b78277eb6545955d2ce5e09bff28f1f8052c8',
    'phar:///Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/plugins/phpstan/phpstan/phpstan.phar/stubs/runtime/ReflectionIntersectionType.php' => 'a3e6299b87ee5d407dae7651758edfa11a74cb11',
    'phar:///Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/plugins/phpstan/phpstan/phpstan.phar/stubs/runtime/ReflectionUnionType.php' => '1b349aa997a834faeafe05fa21bc31cae22bf2e2',
  ),
  'phpExtensions' => 
  array (
    0 => 'Core',
    1 => 'FFI',
    2 => 'PDO',
    3 => 'PDO_ODBC',
    4 => 'Phar',
    5 => 'Reflection',
    6 => 'SPL',
    7 => 'SimpleXML',
    8 => 'Zend OPcache',
    9 => 'bcmath',
    10 => 'bz2',
    11 => 'calendar',
    12 => 'ctype',
    13 => 'curl',
    14 => 'date',
    15 => 'dba',
    16 => 'dom',
    17 => 'exif',
    18 => 'fileinfo',
    19 => 'filter',
    20 => 'ftp',
    21 => 'gd',
    22 => 'gettext',
    23 => 'gmp',
    24 => 'hash',
    25 => 'iconv',
    26 => 'intl',
    27 => 'json',
    28 => 'ldap',
    29 => 'libxml',
    30 => 'mbstring',
    31 => 'mysqli',
    32 => 'mysqlnd',
    33 => 'odbc',
    34 => 'openssl',
    35 => 'pcntl',
    36 => 'pcre',
    37 => 'pdo_dblib',
    38 => 'pdo_mysql',
    39 => 'pdo_pgsql',
    40 => 'pdo_sqlite',
    41 => 'pgsql',
    42 => 'posix',
    43 => 'pspell',
    44 => 'random',
    45 => 'readline',
    46 => 'session',
    47 => 'shmop',
    48 => 'soap',
    49 => 'sockets',
    50 => 'sodium',
    51 => 'sqlite3',
    52 => 'standard',
    53 => 'sysvmsg',
    54 => 'sysvsem',
    55 => 'sysvshm',
    56 => 'tidy',
    57 => 'tokenizer',
    58 => 'xml',
    59 => 'xmlreader',
    60 => 'xmlwriter',
    61 => 'xsl',
    62 => 'zip',
    63 => 'zlib',
  ),
  'stubFiles' => 
  array (
  ),
  'level' => '6',
),
	'projectExtensionFiles' => array (
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Debugger/PHPStanRules.php' => '13e88e034c6a32b136d0b50c6e14cd4e707029f2',
),
	'errorsCallback' => static function (): array { return array (
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Application.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var above a method has no effect.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Application.php',
       'line' => 20,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Application.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 20,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var for variable $session contains unknown class App\\Controllers\\Session.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Application.php',
       'line' => 20,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Application.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 20,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var for variable $session contains unknown class App\\Controllers\\Session.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Application.php',
       'line' => 20,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Application.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 20,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #2 $version2 of function version_compare expects string, float given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'line' => 13,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 13,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unreachable statement - code above always terminates.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'line' => 23,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 23,
       'nodeType' => 'PHPStan\\Node\\UnreachableStatementNode',
       'identifier' => 'deadCode.unreachableStatement',
       'metadata' => 
      array (
        'depth' => 1,
        'order' => 3,
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var does not specify variable name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'line' => 29,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 29,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var does not specify variable name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'line' => 172,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 172,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var does not specify variable name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'line' => 177,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 177,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var does not specify variable name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'line' => 182,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 182,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var does not specify variable name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'line' => 187,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 187,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var does not specify variable name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'line' => 192,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 192,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var does not specify variable name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'line' => 197,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 197,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var does not specify variable name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'line' => 202,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 202,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var does not specify variable name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'line' => 207,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 207,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var does not specify variable name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'line' => 213,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 213,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var does not specify variable name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'line' => 218,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 218,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $string',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
       'line' => 56,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 56,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Function_',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'string',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return contains unresolvable type.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
       'line' => 189,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 189,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Function_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type NotFoundException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
       'line' => 439,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 439,
       'nodeType' => 'PHPStan\\Node\\InFunctionNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Static method Luminova\\Application\\Factory::language() invoked with 0 parameters, 1-2 required.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
       'line' => 447,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 447,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return contains unresolvable type.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
       'line' => 474,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 474,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Function_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $flags',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
       'line' => 684,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 684,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Function_',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'flags',
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #3 $use_include_path of function fopen expects bool, int<0, 1> given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
       'line' => 691,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 691,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return contains unresolvable type.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
       'line' => 726,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 726,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Function_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $content',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
       'line' => 757,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 757,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Function_',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'content',
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $dir',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'line' => 44,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 44,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'dir',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $dir',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'line' => 86,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 86,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'dir',
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Application::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'line' => 88,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 88,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe usage of new static().',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'line' => 88,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/blog/solving-phpstan-error-unsafe-usage-of-new-static',
       'nodeLine' => 88,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Application::$minifyContent through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 207,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 207,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Negated boolean expression is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 208,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 208,
       'nodeType' => 'PhpParser\\Node\\Expr\\BooleanNot',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Application::$publicOptions through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 224,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 224,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Application::$publicOptions through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 225,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 225,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Application::$publicClasses through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 228,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 228,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Application::$publicClasses through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 229,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 229,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Application::$publicClasses through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 244,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 244,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Application::$publicClasses through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 245,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 245,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Application::$publicClasses through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 260,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 260,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    13 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Exceptions\\InvalidArgumentException|Luminova\\Exceptions\\RuntimeException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 490,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 490,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    14 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class Luminova\\Exceptions\\InvalidArgumentException not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 493,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 493,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    15 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Throwing object of an unknown class Luminova\\Exceptions\\InvalidArgumentException.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 493,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 493,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Throw_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    16 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Application::$publicClasses through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 506,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 506,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    17 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Application::$publicClasses through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 511,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 511,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    18 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Result of && is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 533,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 533,
       'nodeType' => 'PHPStan\\Node\\BooleanAndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    19 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Strict comparison using === between int and \'_\' will always evaluate to false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 533,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 533,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Identical',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    20 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Application::$publicClasses through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 537,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 537,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    21 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Application::$publicOptions through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 541,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 541,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    22 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $expire',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 598,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 598,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'expire',
      ),
    )),
    23 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Application::renderIsolation() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 622,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 622,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    24 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Application::isReadWritePermission() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 646,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 646,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    25 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $callback of function ob_start expects callable(): mixed, bool given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 652,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 652,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    26 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $callback of function ob_start expects callable(): mixed, bool given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 702,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 702,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    27 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Application::$minifyContent through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 718,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 718,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    28 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Application::newCompressed() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 719,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 719,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    29 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Application::getViewUri() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 752,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 752,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    30 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Application::setOptions() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 759,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 759,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    31 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Application::$minifyContent through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 768,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 768,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    32 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Application::newCompressed() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 770,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 770,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    33 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Application::requestHeaders() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 775,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 775,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    34 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Application::$publicClasses through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 811,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 811,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    35 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $optimizer on left side of ??= always exists and is always null.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 814,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 814,
       'nodeType' => 'PhpParser\\Node\\Expr\\AssignOp\\Coalesce',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    36 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Application::getViewUri() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 815,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 815,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    37 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Application::$minifyContent through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 831,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 831,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    38 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Application::newCompressed() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 832,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 832,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    39 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $ContentType might not be defined.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 832,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 832,
       'nodeType' => 'PhpParser\\Node\\Expr\\Variable',
       'identifier' => 'variable.maybeUndefined',
       'metadata' => 
      array (
        'variableName' => 'ContentType',
        'statementDepth' => 5,
        'statementOrder' => 0,
        'depth' => 4,
        'order' => 0,
        'variables' => 
        array (
          0 => 'templateFile',
          1 => 'shouldCache',
          2 => 'cacheFile',
          3 => 'options',
          4 => 'ignore',
          5 => 'copy',
          6 => 'optimizer',
          7 => 'finish',
          8 => 'viewHeaderInfo',
          9 => 'self',
          10 => 'viewContents',
        ),
        'parentVariables' => 
        array (
        ),
      ),
    )),
    40 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Application::requestHeaders() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 838,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 838,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    41 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Right side of && is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 936,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 936,
       'nodeType' => 'PHPStan\\Node\\BooleanAndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    42 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Exceptions\\InvalidArgumentException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 957,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 957,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    43 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Application::calculateLevel() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 960,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 960,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    44 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Ternary operator condition is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 961,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 961,
       'nodeType' => 'PhpParser\\Node\\Expr\\Ternary',
       'identifier' => 'deadCode.ternaryConstantCondition',
       'metadata' => 
      array (
        'statementDepth' => 4,
        'statementOrder' => 0,
        'depth' => 1,
        'order' => 1,
        'value' => false,
      ),
    )),
    45 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class Luminova\\Exceptions\\InvalidArgumentException not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 973,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 973,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    46 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Throwing object of an unknown class Luminova\\Exceptions\\InvalidArgumentException.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 973,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 973,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Throw_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    47 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Application::toTitle() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 986,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 986,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    48 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Application::toTitle() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 990,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 990,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    49 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Application::getViewUri() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 1030,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 1030,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    50 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Negated boolean expression is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 1033,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 1033,
       'nodeType' => 'PhpParser\\Node\\Expr\\BooleanNot',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    51 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Right side of && is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 1039,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 1039,
       'nodeType' => 'PHPStan\\Node\\BooleanAndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Factory::$factories through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 81,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 81,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $shared',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 99,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 99,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'shared',
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Factory::get() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 103,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 103,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Factory::get() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 126,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 126,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Factory::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 133,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 133,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Factory::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 134,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 134,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Factory::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 143,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 143,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Dead catch - ReflectionException is already caught above.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 147,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 147,
       'nodeType' => 'PHPStan\\Node\\CatchWithUnthrownExceptionNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Factory::get() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 163,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 163,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Factory::$factories through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 179,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 179,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Factory::$factories through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 180,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 180,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Factory::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 184,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 184,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Factory::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 185,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 185,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    13 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Factory::has() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 211,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 211,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    14 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Factory::$factories through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 215,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 215,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    15 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Factory::$factories through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 217,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 217,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    16 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Factory::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 227,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 227,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    17 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Factory::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 229,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 229,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    18 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Factory::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 259,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 259,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    19 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Factory::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 260,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 260,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    20 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Factory::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 266,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 266,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    21 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Dead catch - Luminova\\Exceptions\\RuntimeException is never thrown in the try block.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 290,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 290,
       'nodeType' => 'PHPStan\\Node\\CatchWithUnthrownExceptionNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    22 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unreachable statement - code above always terminates.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'line' => 334,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 334,
       'nodeType' => 'PHPStan\\Node\\UnreachableStatementNode',
       'identifier' => 'deadCode.unreachableStatement',
       'metadata' => 
      array (
        'depth' => 3,
        'order' => 1,
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $serialize',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 51,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 51,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'serialize',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $shared',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 51,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 51,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'shared',
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Services::isShared() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 54,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 54,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Services::isSerialize() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 55,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 55,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $instance might not be defined.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 65,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 65,
       'nodeType' => 'PhpParser\\Node\\Expr\\Variable',
       'identifier' => 'variable.maybeUndefined',
       'metadata' => 
      array (
        'variableName' => 'instance',
        'statementDepth' => 5,
        'statementOrder' => 0,
        'depth' => 1,
        'order' => 0,
        'variables' => 
        array (
          0 => 'service',
          1 => 'cloneArgument',
          2 => 'arguments',
          3 => 'serialize',
          4 => 'name',
          5 => 'shared',
        ),
        'parentVariables' => 
        array (
        ),
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Services::$suffix through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 87,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 87,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Services::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 89,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 89,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Services::$suffix through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 144,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 144,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Services::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 146,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 146,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Services::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 147,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 147,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $service',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 160,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 160,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'service',
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Services::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 164,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 164,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Services::$suffix through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 178,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 178,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    13 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Services::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 200,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 200,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    14 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Services::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 201,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 201,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    15 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Services::getCachedInstance() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 203,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 203,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    16 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Services::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 218,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 218,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    17 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Services::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 219,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 219,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    18 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $serialize',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 239,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 239,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'serialize',
      ),
    )),
    19 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $shared',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 239,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 239,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'shared',
      ),
    )),
    20 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter $arguments of method Luminova\\Application\\Services::add() has invalid type Luminova\\Application\\arguments.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 239,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 239,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    21 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $serialize',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 259,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 259,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'serialize',
      ),
    )),
    22 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $shared',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 259,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 259,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'shared',
      ),
    )),
    23 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter $arguments of method Luminova\\Application\\Services::newInstance() has invalid type Luminova\\Application\\arguments.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 259,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 259,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    24 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Services::isShared() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 268,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 268,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    25 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Services::isSerialize() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 269,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 269,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    26 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Services::prepareInstance() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 283,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 283,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    27 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $serialize',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 303,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 303,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'serialize',
      ),
    )),
    28 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $shared',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 303,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 303,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'shared',
      ),
    )),
    29 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter $arguments of method Luminova\\Application\\Services::addInstance() has invalid type Luminova\\Application\\arguments.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 303,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 303,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    30 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unreachable statement - code above always terminates.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 314,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 314,
       'nodeType' => 'PHPStan\\Node\\UnreachableStatementNode',
       'identifier' => 'deadCode.unreachableStatement',
       'metadata' => 
      array (
        'depth' => 4,
        'order' => 2,
      ),
    )),
    31 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Services::isShared() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 318,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 318,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    32 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Services::isSerialize() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 319,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 319,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    33 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Services::prepareInstance() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 330,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 330,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    34 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Dead catch - ReflectionException is already caught above.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 336,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 336,
       'nodeType' => 'PHPStan\\Node\\CatchWithUnthrownExceptionNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    35 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unreachable statement - code above always terminates.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 340,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 340,
       'nodeType' => 'PHPStan\\Node\\UnreachableStatementNode',
       'identifier' => 'deadCode.unreachableStatement',
       'metadata' => 
      array (
        'depth' => 3,
        'order' => 3,
      ),
    )),
    36 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Services::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 362,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 362,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    37 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Application\\Services::cacheInstance() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 366,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 366,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    38 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Services::$suffix through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 386,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 386,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    39 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unreachable statement - code above always terminates.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'line' => 397,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 397,
       'nodeType' => 'PHPStan\\Node\\UnreachableStatementNode',
       'identifier' => 'deadCode.unreachableStatement',
       'metadata' => 
      array (
        'depth' => 3,
        'order' => 3,
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Arrays/ArrayObject.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Class ArrayObject has @implements tag, but does not implement any interface.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Arrays/ArrayObject.php',
       'line' => 2,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Arrays/ArrayObject.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 2,
       'nodeType' => 'PHPStan\\Node\\InClassNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Class ArrayObject has @implements tag, but does not implement any interface.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Arrays/ArrayObject.php',
       'line' => 2,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Arrays/ArrayObject.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 2,
       'nodeType' => 'PHPStan\\Node\\InClassNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Functions\\RuntimeException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 32,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php',
       'tip' => NULL,
       'nodeLine' => 32,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Base\\BaseFunction::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 34,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php',
       'tip' => NULL,
       'nodeLine' => 34,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Functions\\RuntimeException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 43,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php',
       'tip' => NULL,
       'nodeLine' => 43,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Base\\BaseFunction::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 45,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php',
       'tip' => NULL,
       'nodeLine' => 45,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Functions\\RuntimeException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 54,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php',
       'tip' => NULL,
       'nodeLine' => 54,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Base\\BaseFunction::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 56,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php',
       'tip' => NULL,
       'nodeLine' => 56,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Functions\\RuntimeException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 65,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php',
       'tip' => NULL,
       'nodeLine' => 65,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Base\\BaseFunction::$instances through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 67,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php',
       'tip' => NULL,
       'nodeLine' => 67,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Exceptions\\InvalidArgumentException|Luminova\\Functions\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 81,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php',
       'tip' => NULL,
       'nodeLine' => 81,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Undefined variable: $data',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 84,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php',
       'tip' => NULL,
       'nodeLine' => 84,
       'nodeType' => 'PhpParser\\Node\\Expr\\Variable',
       'identifier' => 'variable.undefined',
       'metadata' => 
      array (
        'variableName' => 'data',
        'statementDepth' => 5,
        'statementOrder' => 0,
        'depth' => 2,
        'order' => 0,
        'variables' => 
        array (
          0 => 'input',
          1 => 'context',
          2 => 'encoding',
        ),
        'parentVariables' => 
        array (
        ),
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class Luminova\\Exceptions\\InvalidArgumentException not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 94,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php',
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 94,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Throwing object of an unknown class Luminova\\Exceptions\\InvalidArgumentException.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 94,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php',
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 94,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Throw_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $ratings',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 117,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php',
       'tip' => NULL,
       'nodeLine' => 117,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'ratings',
      ),
    )),
    13 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $decimalPlaces',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 177,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php',
       'tip' => NULL,
       'nodeLine' => 177,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'decimalPlaces',
      ),
    )),
    14 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Base\\BaseFunction::$defaultRules has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 16,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php',
       'tip' => NULL,
       'nodeLine' => 16,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    15 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Right side of || is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 100,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php',
       'tip' => NULL,
       'nodeLine' => 100,
       'nodeType' => 'PHPStan\\Node\\BooleanOrNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    16 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #2 $replacement of function preg_replace expects array|string, true given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 104,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php',
       'tip' => NULL,
       'nodeLine' => 104,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    17 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $num1 of function bcsub expects string, int given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 187,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php',
       'tip' => NULL,
       'nodeLine' => 187,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    18 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #2 $num2 of function bcadd expects string, int given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 187,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php',
       'tip' => NULL,
       'nodeLine' => 187,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    19 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #2 $num2 of function bcsub expects string, int given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 187,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php',
       'tip' => NULL,
       'nodeLine' => 187,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    20 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $num1 of function bcdiv expects string, int<0, max> given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 188,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php',
       'tip' => NULL,
       'nodeLine' => 188,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    21 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #2 $num2 of function bcdiv expects string, int given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 188,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php',
       'tip' => NULL,
       'nodeLine' => 188,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    22 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $num1 of function bcadd expects string, int given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 190,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php',
       'tip' => NULL,
       'nodeLine' => 190,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    23 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param for parameter $phone with type mixed is not subtype of native type int|string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 342,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php',
       'tip' => NULL,
       'nodeLine' => 342,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    24 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param for parameter $phone with type mixed is not subtype of native type string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 362,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php',
       'tip' => NULL,
       'nodeLine' => 362,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    25 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Strict comparison using === between \'/[^-0-9.]+/\'|\'/[^0-9-+]+/\'|\'/[^0-9.-]+/\'|\'/[^0-9.]+/\'|\'/[^0-9]+/\'|\'/[^a-zA-Z., ]+/\'|\'/[^a-zA-Z0-9-: ]+/\'|\'/[^a-zA-Z0-9-:\\\\/,_ …\'|\'/[^a-zA-Z0-9-@!*_]/\'|\'/[^a-zA-Z0-9-@.,]+/\'|\'/[^a-zA-Z0-9-@.]+/\'|\'/[^a-zA-Z0-9-\\\\/,_:+…\'|\'/[^a-zA-Z0-9-_.,!}{…\'|\'/[^a-zA-Z0-9-_.]+/\'|\'/[^a-zA-Z0-9?&+=.:\\\\…\'|\'/[^a-zA-Z0-9_-]/\'|\'/[^a-zA-Z]+/\' and null will always evaluate to false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 530,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php',
       'tip' => NULL,
       'nodeLine' => 530,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Identical',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    26 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param for parameter $encoding with type int is incompatible with native type string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 621,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php',
       'tip' => NULL,
       'nodeLine' => 621,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    27 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Base\\BaseFunction::$defaultRules through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 664,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php',
       'tip' => NULL,
       'nodeLine' => 664,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    28 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #2 $times of function str_repeat expects int, float given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 697,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php',
       'tip' => NULL,
       'nodeLine' => 697,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    29 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #3 $length of function substr expects int|null, float given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php (in context of class Luminova\\Base\\BaseFunction)',
       'line' => 697,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php',
       'tip' => NULL,
       'nodeLine' => 697,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $serialize',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php',
       'line' => 41,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 41,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'serialize',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $shared',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php',
       'line' => 41,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 41,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'shared',
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return with type object|false is not subtype of native type bool.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php',
       'line' => 41,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 41,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Base\\RuntimeException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php',
       'line' => 41,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 41,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter $arguments of method Luminova\\Base\\BaseServices::addService() has invalid type Luminova\\Base\\arguments.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php',
       'line' => 41,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 41,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Base\\BaseServices::$serviceQueue through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php',
       'line' => 45,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 45,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Base\\BaseServices::$serviceQueue through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php',
       'line' => 49,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 49,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Base\\BaseServices::$serviceQueue through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php',
       'line' => 64,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 64,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $filename',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'line' => 128,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 128,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'filename',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $instance',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'line' => 149,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 149,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'instance',
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Cache\\FileCache::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'line' => 151,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 151,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Cache\\FileCache::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'line' => 152,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 152,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe usage of new static().',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'line' => 152,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/blog/solving-phpstan-error-unsafe-usage-of-new-static',
       'nodeLine' => 152,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Cache\\FileCache::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'line' => 155,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 155,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $name',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'line' => 180,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 180,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'name',
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Cache\\FileCache::onExpired() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'line' => 325,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 325,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $callback',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'line' => 359,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 359,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'callback',
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unreachable statement - code above always terminates.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'line' => 628,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 628,
       'nodeType' => 'PHPStan\\Node\\UnreachableStatementNode',
       'identifier' => 'deadCode.unreachableStatement',
       'metadata' => 
      array (
        'depth' => 3,
        'order' => 5,
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Cache\\FileCache::unlock() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'line' => 650,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 650,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/MemoryCache.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Cache\\MemoryCache::onExpired() has parameter $cacheCallback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/MemoryCache.php',
       'line' => 105,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/MemoryCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 105,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Cache\\MemoryCache::withExpired() has parameter $cacheCallback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/MemoryCache.php',
       'line' => 119,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/MemoryCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 119,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Colors.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Command\\Colors::isValidColor() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Colors.php',
       'line' => 78,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Colors.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 78,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Command\\Colors::isValidColor() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Colors.php',
       'line' => 82,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Colors.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 82,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $options',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php',
       'line' => 44,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 44,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'options',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Match arm comparison between true and \'db:create\' is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php',
       'line' => 49,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 48,
       'nodeType' => 'PHPStan\\Node\\MatchExpressionNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Match arm comparison between true and \'db:update\' is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php',
       'line' => 52,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 48,
       'nodeType' => 'PHPStan\\Node\\MatchExpressionNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Match arm comparison between true and \'db:insert\' is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php',
       'line' => 55,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 48,
       'nodeType' => 'PHPStan\\Node\\MatchExpressionNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Match arm comparison between true and \'db:delete\' is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php',
       'line' => 58,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 48,
       'nodeType' => 'PHPStan\\Node\\MatchExpressionNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Match arm comparison between true and \'db:drop\' is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php',
       'line' => 61,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 48,
       'nodeType' => 'PHPStan\\Node\\MatchExpressionNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Match arm comparison between true and \'db:truncate\' is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php',
       'line' => 64,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 48,
       'nodeType' => 'PHPStan\\Node\\MatchExpressionNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Match arm comparison between true and \'db:select\' is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php',
       'line' => 67,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 48,
       'nodeType' => 'PHPStan\\Node\\MatchExpressionNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Server.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant PUBLIC_PATH not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Server.php',
       'line' => 62,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Server.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 62,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $resource of static method Luminova\\Command\\Terminal::isColorSupported() expects resource, string given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
       'line' => 78,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 78,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Command\\Terminal::progressWatch() has parameter $onFinish with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
       'line' => 186,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 186,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Command\\Terminal::progressWatch() has parameter $onProgress with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
       'line' => 186,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 186,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $textOptions on left side of ?? always exists and is not nullable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
       'line' => 261,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 261,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Coalesce',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $options of static method Luminova\\Command\\Terminal::writeOptions() expects array<string, array<string, mixed>>, array<int, array<string, mixed>> given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
       'line' => 328,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 328,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Command\\Terminal::writeOptions() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
       'line' => 328,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 328,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Command\\Terminal::getInputValues() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
       'line' => 343,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 343,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Strict comparison using === between \'development\' and \'testing\' will always evaluate to false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
       'line' => 677,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 677,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Identical',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Command\\Terminal::isColorDisabled() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
       'line' => 921,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 921,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe usage of new static().',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
       'line' => 984,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/blog/solving-phpstan-error-unsafe-usage-of-new-static',
       'nodeLine' => 984,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/TextUtils.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $max',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/TextUtils.php',
       'line' => 29,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/TextUtils.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 29,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'max',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $index',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/TextUtils.php',
       'line' => 58,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/TextUtils.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 58,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'index',
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/BaseComposer.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Composer\\BaseComposer::progress() has parameter $onCompleteCallback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/BaseComposer.php',
       'line' => 21,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/BaseComposer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 21,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Composer\\BaseComposer::progress() has parameter $taskCallback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/BaseComposer.php',
       'line' => 21,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/BaseComposer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 21,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Builder.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Composer\\Builder::$projectFiles has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Builder.php',
       'line' => 15,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Builder.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 15,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Composer\\Builder::$systemIgnoreFiles has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Builder.php',
       'line' => 27,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Builder.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 27,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Composer\\Builder::$projectIgnoreFiles has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Builder.php',
       'line' => 48,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Builder.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 48,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unreachable statement - code above always terminates.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Builder.php',
       'line' => 147,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Builder.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 147,
       'nodeType' => 'PHPStan\\Node\\UnreachableStatementNode',
       'identifier' => 'deadCode.unreachableStatement',
       'metadata' => 
      array (
        'depth' => 5,
        'order' => 1,
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Static property Luminova\\Composer\\Updater::$framework is never read, only written.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 23,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/developing-extensions/always-read-written-properties',
       'nodeLine' => 18,
       'nodeType' => 'PHPStan\\Node\\ClassPropertiesNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Composer\\Updater::$frameworkPath through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 42,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 42,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::onInstallAndUpdate() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 42,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 42,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Composer\\Updater::$frameworkPath through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 43,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 43,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::onInstallAndUpdate() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 43,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 43,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Composer\\Updater::$frameworkPath through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 56,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 56,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::onInstallAndUpdate() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 56,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 56,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::checkAndCopyFile() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 57,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 57,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::checkAndCopyFile() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 58,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 58,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::checkAndCopyFile() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 59,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 59,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::checkAndCopyFile() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 60,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 60,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::checkAndCopyFile() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 61,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 61,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::checkAndCopyFile() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 62,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 62,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    13 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::checkAndCopyFile() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 63,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 63,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    14 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::checkAndCopyFile() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 64,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 64,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    15 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::checkAndCopyFile() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 65,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 65,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    16 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::checkAndCopyFile() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 66,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 66,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    17 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::checkAndCopyFile() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 67,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 67,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    18 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::checkAndCopyFile() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 68,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 68,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    19 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::checkAndCopyFile() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 69,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 69,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    20 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::checkAndCopyFile() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 70,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 70,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    21 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::checkAndCopyFile() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 71,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 71,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    22 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::checkAndCopyFile() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 72,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 72,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    23 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Static method Luminova\\Composer\\Updater::backwardProjectDirectory() is unused.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 84,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 18,
       'nodeType' => 'PHPStan\\Node\\ClassMethodsNode',
       'identifier' => 'deadCode.unusedMethod',
       'metadata' => 
      array (
        'classOrder' => 4,
        'classDepth' => 1,
        'classStartLine' => 18,
        'methodName' => 'backwardProjectDirectory',
      ),
    )),
    24 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::checkAndMoveFolderRecursive() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 111,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 111,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    25 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param has invalid value (string source): Unexpected token "source", expected variable at offset 118',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 142,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 142,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    26 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Composer\\Updater::$terminal through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 156,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 156,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    27 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param has invalid value (string source): Unexpected token "source", expected variable at offset 124',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 167,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 167,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    28 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::makeDirectoryIfNotExist() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 169,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 169,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    29 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::displayPath() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 175,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 175,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    30 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::isUpdater() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 176,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 176,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    31 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::fileChanged() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 181,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 181,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    32 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::checkAndMoveFolderRecursive() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 185,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 185,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    33 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::removeRecursive() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 205,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 205,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    34 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::makeDirectoryIfNotExist() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 269,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 269,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    35 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::displayPath() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 275,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 275,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    36 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::isUpdater() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 278,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 278,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    37 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::fileChanged() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 283,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 283,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    38 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'If condition is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 292,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 292,
       'nodeType' => 'PhpParser\\Node\\Stmt\\If_',
       'identifier' => 'deadCode.ifConstantCondition',
       'metadata' => 
      array (
        'depth' => 8,
        'order' => 0,
        'value' => true,
      ),
    )),
    39 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::checkAndMoveFolderRecursive() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 293,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 293,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    40 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::fileChanged() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 305,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 305,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    41 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::removeRecursive() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 312,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 312,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    42 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::cli() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 315,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 315,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    43 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Using nullsafe method call on non-nullable type Luminova\\Command\\Terminal. Use -> instead.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 315,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 315,
       'nodeType' => 'PhpParser\\Node\\Expr\\NullsafeMethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    44 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Static property Luminova\\Config\\Configuration::$version (string) on left side of ?? is not nullable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 319,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 319,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Coalesce',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    45 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::cli() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 319,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 319,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    46 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Using nullsafe method call on non-nullable type Luminova\\Command\\Terminal. Use -> instead.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 319,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 319,
       'nodeType' => 'PhpParser\\Node\\Expr\\NullsafeMethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    47 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::cli() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 321,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 321,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    48 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Using nullsafe method call on non-nullable type Luminova\\Command\\Terminal. Use -> instead.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 321,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 321,
       'nodeType' => 'PhpParser\\Node\\Expr\\NullsafeMethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    49 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Composer\\Updater::cli() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 322,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 322,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    50 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Using nullsafe method call on non-nullable type Luminova\\Command\\Terminal. Use -> instead.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'line' => 322,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 322,
       'nodeType' => 'PhpParser\\Node\\Expr\\NullsafeMethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/Configuration.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Negated boolean expression is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/Configuration.php',
       'line' => 213,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/Configuration.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 213,
       'nodeType' => 'PhpParser\\Node\\Expr\\BooleanNot',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Config\\Configuration::$allowPreviews through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/Configuration.php',
       'line' => 252,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/Configuration.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 252,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return with type bool is incompatible with native type int.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/Configuration.php',
       'line' => 335,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/Configuration.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 335,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Strict comparison using === between mixed and \'1\' will always evaluate to false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/Configuration.php',
       'line' => 361,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/Configuration.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 361,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Identical',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Config\\Configuration::getMixedNull() should return bool but returns null.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/Configuration.php',
       'line' => 376,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/Configuration.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 376,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Return_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Cookie.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $key',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Cookie.php',
       'line' => 175,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Cookie.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 175,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'key',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $key',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Cookie.php',
       'line' => 188,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Cookie.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 188,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'key',
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $index',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Cookie.php',
       'line' => 208,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Cookie.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 208,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'index',
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Result of && is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Cookie.php',
       'line' => 216,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Cookie.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 216,
       'nodeType' => 'PHPStan\\Node\\BooleanAndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $index',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Cookie.php',
       'line' => 230,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Cookie.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 230,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'index',
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $value of method Luminova\\Cookies\\Cookie::saveGlobal() expects string, array given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Cookie.php',
       'line' => 265,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Cookie.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 265,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/CookieInterface.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $key',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/CookieInterface.php',
       'line' => 52,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/CookieInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 52,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'key',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $key',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/CookieInterface.php',
       'line' => 62,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/CookieInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 62,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'key',
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $index',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/CookieInterface.php',
       'line' => 71,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/CookieInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 71,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'index',
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $index',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/CookieInterface.php',
       'line' => 89,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/CookieInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 89,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'index',
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Exception/CookieException.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe usage of new static().',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Exception/CookieException.php',
       'line' => 47,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Exception/CookieException.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/blog/solving-phpstan-error-unsafe-usage-of-new-static',
       'nodeLine' => 47,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Columns.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Database\\Columns::$columns has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Columns.php',
       'line' => 25,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Columns.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 25,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Database\\Columns::$tableName has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Columns.php',
       'line' => 26,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Columns.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 26,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Exception|Luminova\\Database\\InvalidArgumentException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
       'line' => 57,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 57,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Exception|Luminova\\Database\\InvalidArgumentException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
       'line' => 79,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 79,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Exception|Luminova\\Database\\InvalidArgumentException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
       'line' => 104,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 104,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Database\\Connection::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
       'line' => 106,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 106,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Exception|Luminova\\Database\\InvalidArgumentException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
       'line' => 120,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 120,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Database\\Connection::getDatabaseConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
       'line' => 126,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 126,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Negated boolean expression is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
       'line' => 133,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 133,
       'nodeType' => 'PhpParser\\Node\\Expr\\BooleanNot',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Ternary operator condition is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
       'line' => 177,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 177,
       'nodeType' => 'PhpParser\\Node\\Expr\\Ternary',
       'identifier' => 'deadCode.ternaryConstantCondition',
       'metadata' => 
      array (
        'statementDepth' => 4,
        'statementOrder' => 0,
        'depth' => 1,
        'order' => 1,
        'value' => false,
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $service',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
       'line' => 218,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 218,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'service',
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/DriversInterface.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Database\\Drivers\\DatabaseException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/DriversInterface.php',
       'line' => 149,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/DriversInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 149,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Exception|Luminova\\Exceptions\\InvalidArgumentException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'line' => 81,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 81,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class Luminova\\Exceptions\\InvalidArgumentException not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'line' => 84,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 84,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Throwing object of an unknown class Luminova\\Exceptions\\InvalidArgumentException.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'line' => 84,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 84,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Throw_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot call method bind_param() on bool|object.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'line' => 358,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 358,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot call method bind_param() on object|true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'line' => 413,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 413,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot call method execute() on object|true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'line' => 415,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 415,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot access property $errno on object|true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'line' => 417,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 417,
       'nodeType' => 'PhpParser\\Node\\Expr\\PropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot access property $affected_rows on object|true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'line' => 421,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 421,
       'nodeType' => 'PhpParser\\Node\\Expr\\PropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot access property $num_rows on object|true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'line' => 421,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 421,
       'nodeType' => 'PhpParser\\Node\\Expr\\PropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot call method get_result() on object|true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'line' => 460,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 460,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot call method get_result() on bool|object.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'line' => 483,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 483,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $queryResult',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'line' => 495,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 495,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'queryResult',
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot call method free_result() on object|true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'line' => 643,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 643,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/PdoDriver.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Exceptions\\DatabaseException|Luminova\\Exceptions\\InvalidArgumentException|PDOException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/PdoDriver.php',
       'line' => 78,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/PdoDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 78,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class Luminova\\Exceptions\\InvalidArgumentException not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/PdoDriver.php',
       'line' => 81,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/PdoDriver.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 81,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Throwing object of an unknown class Luminova\\Exceptions\\InvalidArgumentException.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/PdoDriver.php',
       'line' => 81,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/PdoDriver.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 81,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Throw_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Result of method PDOStatement::debugDumpParams() (void) is used.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/PdoDriver.php',
       'line' => 240,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/PdoDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 240,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return with type array is incompatible with native type int.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/PdoDriver.php',
       'line' => 420,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/PdoDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 420,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Database\\Drivers\\PdoDriver::getInt() should return int but returns array.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/PdoDriver.php',
       'line' => 426,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/PdoDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 426,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Return_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Database\\Query::getConn() has invalid return type Luminova\\Database\\MySqlDriver.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 152,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 152,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Database\\Query::getConn() has invalid return type Luminova\\Database\\PdoDriver.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 152,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 152,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Database\\Query::getConn() should return Luminova\\Database\\MySqlDriver|Luminova\\Database\\PdoDriver|null but returns Luminova\\Database\\Drivers\\MySqlDriver|Luminova\\Database\\Drivers\\PdoDriver|null.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 154,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 154,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Return_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Database\\InvalidException|Luminova\\Exceptions\\DatabaseException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 173,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 173,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Database\\Query::getInstance() should return static(Luminova\\Database\\Query) but returns Luminova\\Database\\Query.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 175,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 175,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Return_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Database\\Query::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 175,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 175,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Database\\Query::fixLegacyOperators() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 347,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 347,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Database\\Query::fixLegacyOperators() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 366,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 366,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Database\\Query::fixLegacyOperators() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 404,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 404,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Database\\Query::fixLegacyOperators() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 428,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 428,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Database\\Query::fixLegacyOperators() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 429,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 429,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Database\\Query::quotedValues() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 457,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 457,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Database\\Query::trimPlaceholder() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 753,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 753,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    13 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $columns',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 862,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 862,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'columns',
      ),
    )),
    14 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $response on left side of ?? always exists and is not nullable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 870,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 870,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Coalesce',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    15 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Database\\Query::error() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 942,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 942,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    16 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Database\\Query::error() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 947,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 947,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    17 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Database\\Query::buildPlaceholder() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 951,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 951,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    18 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Database\\Query::trimPlaceholder() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 962,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 962,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    19 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Database\\Query::error() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 989,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 989,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    20 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Part $columns (array) of encapsed string cannot be cast to string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 1129,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 1129,
       'nodeType' => 'PhpParser\\Node\\Scalar\\Encapsed',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    21 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Database\\Query::quotedValues() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 1185,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 1185,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    22 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Database\\Query::trimPlaceholder() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 1218,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 1218,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    23 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Database\\Query::trimPlaceholder() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 1241,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 1241,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    24 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Database\\Query::trimPlaceholder() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 1246,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 1246,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    25 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Database\\Query::trimPlaceholder() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 1266,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 1266,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    26 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Database\\Query::trimPlaceholder() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 1271,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 1271,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    27 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Database\\Query::$queryOperators through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'line' => 1335,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 1335,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Results/Statements.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Database\\Results\\Statements::getClass() never returns object so it can be removed from the return type.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Results/Statements.php',
       'line' => 155,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Results/Statements.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 155,
       'nodeType' => 'PHPStan\\Node\\MethodReturnStatementsNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $class',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Results/Statements.php',
       'line' => 155,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Results/Statements.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 155,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'class',
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Result of && is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Results/Statements.php',
       'line' => 158,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Results/Statements.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 158,
       'nodeType' => 'PHPStan\\Node\\BooleanAndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Strict comparison using !== between null and null will always evaluate to false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Results/Statements.php',
       'line' => 158,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Results/Statements.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 158,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\NotIdentical',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/NovaMailer.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Email\\Clients\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/NovaMailer.php',
       'line' => 258,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/NovaMailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 258,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #2 $port of function fsockopen expects int, string given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/NovaMailer.php',
       'line' => 328,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/NovaMailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 328,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Email\\Clients\\NovaMailer::smtpGet() has parameter $connection with no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/NovaMailer.php',
       'line' => 378,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/NovaMailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 378,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $stream',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/NovaMailer.php',
       'line' => 378,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/NovaMailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 378,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'stream',
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Strict comparison using === between non-falsy-string and false will always evaluate to false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/NovaMailer.php',
       'line' => 386,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/NovaMailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 386,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Identical',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $prefix of function uniqid expects string, int<1, max> given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/NovaMailer.php',
       'line' => 414,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/NovaMailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 414,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/PHPMailer.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Class Luminova\\Email\\Clients\\PHPMailer extends unknown class PHPMailer\\PHPMailer\\PHPMailer.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/PHPMailer.php',
       'line' => 15,
       'canBeIgnored' => false,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/PHPMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 15,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Class_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Luminova\\Email\\Clients\\PHPMailer::__construct() calls parent::__construct() but Luminova\\Email\\Clients\\PHPMailer does not extend any class.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/PHPMailer.php',
       'line' => 24,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/PHPMailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 24,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Email\\Clients\\SwiftMailer::$sendWith is never read, only written.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 48,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/developing-extensions/always-read-written-properties',
       'nodeLine' => 20,
       'nodeType' => 'PHPStan\\Node\\ClassPropertiesNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Email\\Clients\\SwiftMailer::$transport has unknown class Swift_SmtpTransport as its type.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 108,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 108,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Email\\Clients\\SwiftMailer::$transport has unknown class Swift_SmtpTransport as its type.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 108,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 108,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Email\\Clients\\SwiftMailer::$mailer has unknown class Swift_Mailer as its type.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 113,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 113,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Email\\Clients\\SwiftMailer::$mailer has unknown class Swift_Mailer as its type.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 113,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 113,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constructor of class Luminova\\Email\\Clients\\SwiftMailer has an unused parameter $exceptions.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 121,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 121,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => 'constructor.unusedParameter',
       'metadata' => 
      array (
        'variableName' => 'exceptions',
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class Swift_SmtpTransport not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 130,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 130,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method setUsername() on an unknown class Swift_SmtpTransport.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 132,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 132,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method setPassword() on an unknown class Swift_SmtpTransport.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 133,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 133,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class Swift_Mailer not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 135,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 135,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Email\\Clients\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 231,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 231,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class Swift_Message not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 272,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 272,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method setFrom() on an unknown class Swift_Message.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 273,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 273,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    13 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method setTo() on an unknown class Swift_Message.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 274,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 274,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    14 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method setCc() on an unknown class Swift_Message.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 276,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 276,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    15 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method setBcc() on an unknown class Swift_Message.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 279,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 279,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    16 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method setReplyTo() on an unknown class Swift_Message.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 282,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 282,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    17 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method addPart() on an unknown class Swift_Message.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 285,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 285,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    18 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method setBody() on an unknown class Swift_Message.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 287,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 287,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    19 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method attach() on an unknown class Swift_Message.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 290,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 290,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    20 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to static method fromPath() on an unknown class Swift_Attachment.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 290,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 290,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    21 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method send() on an unknown class Swift_Mailer.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'line' => 294,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 294,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Exceptions/MailerException.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe usage of new static().',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Exceptions/MailerException.php',
       'line' => 41,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Exceptions/MailerException.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/blog/solving-phpstan-error-unsafe-usage-of-new-static',
       'nodeLine' => 41,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Negated boolean expression is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 75,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 75,
       'nodeType' => 'PhpParser\\Node\\Expr\\BooleanNot',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 78,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 78,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 80,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 80,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$clients through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 81,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 81,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 82,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 82,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Email\\Mailer::initialize() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 86,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 86,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'If condition is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 88,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 88,
       'nodeType' => 'PhpParser\\Node\\Stmt\\If_',
       'identifier' => 'deadCode.ifConstantCondition',
       'metadata' => 
      array (
        'depth' => 5,
        'order' => 0,
        'value' => true,
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return has invalid value (static::$client The Mailer client instance.): Unexpected token "$client", expected * at offset 74',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 99,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 99,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 101,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 101,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 113,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 113,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 114,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 114,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe usage of new static().',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 114,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/blog/solving-phpstan-error-unsafe-usage-of-new-static',
       'nodeLine' => 114,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 117,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 117,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    13 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 130,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 130,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    14 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 143,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 143,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    15 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 156,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 156,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    16 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 169,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 169,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    17 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 183,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 183,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    18 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 193,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 193,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    19 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 203,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 203,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    20 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 213,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 213,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    21 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 240,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 240,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    22 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 251,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 251,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    23 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 262,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 262,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    24 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Email\\Mailer::shouldDebug() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 262,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 262,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    25 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 263,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 263,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    26 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Email\\Mailer::getCharset() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 263,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 263,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    27 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 264,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 264,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    28 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 266,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 266,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    29 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 267,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 267,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    30 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 268,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 268,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    31 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 271,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 271,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    32 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 272,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 272,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    33 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 273,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 273,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    34 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 276,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 276,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    35 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Email\\Mailer::getEncryptionType() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 276,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 276,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    36 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 278,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 278,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    37 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 281,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 281,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    38 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 282,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 282,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    39 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$client through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 283,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 283,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    40 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Negated boolean expression is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 293,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 293,
       'nodeType' => 'PhpParser\\Node\\Expr\\BooleanNot',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    41 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return with type int is incompatible with native type string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 303,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 303,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    42 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return with type int is incompatible with native type string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'line' => 320,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 320,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Errors/Error.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'If condition is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Errors/Error.php',
       'line' => 27,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Errors/Error.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 27,
       'nodeType' => 'PhpParser\\Node\\Stmt\\If_',
       'identifier' => 'deadCode.ifConstantCondition',
       'metadata' => 
      array (
        'depth' => 3,
        'order' => 1,
        'value' => false,
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $callback of function set_error_handler expects (callable(int, string, string, int): bool)|null, array{class-string<static(Luminova\\Errors\\Error)>, \'handle\'} given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Errors/Error.php',
       'line' => 39,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Errors/Error.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 39,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Negated boolean expression is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Errors/Error.php',
       'line' => 114,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Errors/Error.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 114,
       'nodeType' => 'PhpParser\\Node\\Expr\\BooleanNot',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Errors\\Error::isFatal() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Errors/Error.php',
       'line' => 114,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Errors/Error.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 114,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Errors\\Error::isFatal() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Errors/Error.php',
       'line' => 130,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Errors/Error.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 130,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/AppException.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param has invalid value (string message   The exception message (default: \'Database error\').): Unexpected token "message", expected variable at offset 69',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/AppException.php',
       'line' => 26,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/AppException.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 26,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Files.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Expression on left side of ?? is not nullable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Files.php',
       'line' => 63,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Files.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 63,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Coalesce',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var for property Luminova\\Functions\\IPAddress::$cf with type array is incompatible with native type string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'line' => 29,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 29,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Functions\\IPAddress::$cf through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'line' => 52,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 52,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Functions\\IPAddress::$cf through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'line' => 53,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 53,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Functions\\IPAddress::$cf through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'line' => 54,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 54,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Functions\\IPAddress::$cf through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'line' => 55,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 55,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Functions\\IPAddress::$ipHeaders through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'line' => 58,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 58,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $option',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'line' => 81,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 81,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'option',
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Strict comparison using === between string and array{} will always evaluate to false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'line' => 109,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 109,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Identical',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Functions\\IPAddress::ipInfoError() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'line' => 111,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 111,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Functions\\IPAddress::ipInfoError() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'line' => 120,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 120,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Functions\\IPAddress::ipInfoError() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'line' => 126,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 126,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Functions\\IPAddress::ipInfoError() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'line' => 141,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 141,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unreachable statement - code above always terminates.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'line' => 144,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 144,
       'nodeType' => 'PHPStan\\Node\\UnreachableStatementNode',
       'identifier' => 'deadCode.unreachableStatement',
       'metadata' => 
      array (
        'depth' => 3,
        'order' => 10,
      ),
    )),
    13 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param for parameter $status with type string is incompatible with native type int.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'line' => 154,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 154,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/TorDetector.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Functions\\TorDetector::$cacheExpiry through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/TorDetector.php',
       'line' => 34,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/TorDetector.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 34,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Functions\\TorDetector::getPth() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/TorDetector.php',
       'line' => 34,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/TorDetector.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 34,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Functions\\TorDetector::getPth() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/TorDetector.php',
       'line' => 34,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/TorDetector.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 34,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Functions\\TorDetector::getPth() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/TorDetector.php',
       'line' => 35,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/TorDetector.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 35,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Functions\\TorDetector::$torExitNodeListUrl through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/TorDetector.php',
       'line' => 38,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/TorDetector.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 38,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Functions\\TorDetector::getPth() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/TorDetector.php',
       'line' => 41,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/TorDetector.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 41,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Functions\\TorDetector::fetchTorExitNodeList() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/TorDetector.php',
       'line' => 56,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/TorDetector.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 56,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/AsyncClientInterface.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Http\\AsyncClientInterface::sendAsync() has invalid return type GuzzleHttp\\Promise\\PromiseInterface.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/AsyncClientInterface.php',
       'line' => 17,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/AsyncClientInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 17,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter $request of method Luminova\\Http\\AsyncClientInterface::sendAsync() has invalid type GuzzleHttp\\Psr7\\Request.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/AsyncClientInterface.php',
       'line' => 17,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/AsyncClientInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 17,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Curl.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constructor of class Luminova\\Http\\Client\\Curl has an unused parameter $config.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Curl.php',
       'line' => 27,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Curl.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 27,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => 'constructor.unusedParameter',
       'metadata' => 
      array (
        'variableName' => 'config',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Expression on left side of ?? is not nullable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Curl.php',
       'line' => 104,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Curl.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 104,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Coalesce',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Http\\Client\\Guzzle::$client has unknown class GuzzleHttp\\Client as its type.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'line' => 27,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 27,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class GuzzleHttp\\Client not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'line' => 36,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 36,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method request() on an unknown class GuzzleHttp\\Client.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'line' => 62,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 62,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Caught class GuzzleHttp\\Exception\\RequestException not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'line' => 71,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 71,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Catch_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method getResponse() on an unknown class GuzzleHttp\\Exception\\RequestException.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'line' => 72,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 72,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method getPrevious() on an unknown class GuzzleHttp\\Exception\\RequestException.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'line' => 82,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 82,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Class GuzzleHttp\\Exception\\GuzzleException not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'line' => 83,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 83,
       'nodeType' => 'PhpParser\\Node\\Expr\\Instanceof_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method getCode() on an unknown class GuzzleHttp\\Exception\\GuzzleException.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'line' => 84,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 84,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method getMessage() on an unknown class GuzzleHttp\\Exception\\GuzzleException.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'line' => 84,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 84,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method getCode() on an unknown class GuzzleHttp\\Exception\\RequestException.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'line' => 86,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 86,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method getMessage() on an unknown class GuzzleHttp\\Exception\\RequestException.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'line' => 86,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 86,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Caught class GuzzleHttp\\Exception\\GuzzleException not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'line' => 88,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 88,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Catch_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method getCode() on an unknown class GuzzleHttp\\Exception\\GuzzleException.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'line' => 89,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 89,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    13 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method getMessage() on an unknown class GuzzleHttp\\Exception\\GuzzleException.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'line' => 89,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 89,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/CurlAsyncClient.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Http\\CurlAsyncClient::sendAsync() has invalid return type GuzzleHttp\\Promise\\PromiseInterface.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/CurlAsyncClient.php',
       'line' => 20,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/CurlAsyncClient.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 20,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter $request of method Luminova\\Http\\CurlAsyncClient::sendAsync() has invalid type GuzzleHttp\\Psr7\\Request.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/CurlAsyncClient.php',
       'line' => 20,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/CurlAsyncClient.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 20,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method getUri() on an unknown class GuzzleHttp\\Psr7\\Request.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/CurlAsyncClient.php',
       'line' => 23,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/CurlAsyncClient.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 23,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to static method promiseFor() on an unknown class GuzzleHttp\\Promise\\Utils.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/CurlAsyncClient.php',
       'line' => 32,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/CurlAsyncClient.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 32,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class GuzzleHttp\\Psr7\\Response not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/CurlAsyncClient.php',
       'line' => 34,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/CurlAsyncClient.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 34,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/GuzzleAsyncClient.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Http\\GuzzleAsyncClient::$client has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/GuzzleAsyncClient.php',
       'line' => 19,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/GuzzleAsyncClient.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 19,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class GuzzleHttp\\Client not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/GuzzleAsyncClient.php',
       'line' => 23,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/GuzzleAsyncClient.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 23,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Http\\GuzzleAsyncClient::sendAsync() has invalid return type GuzzleHttp\\Promise\\PromiseInterface.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/GuzzleAsyncClient.php',
       'line' => 26,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/GuzzleAsyncClient.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 26,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter $request of method Luminova\\Http\\GuzzleAsyncClient::sendAsync() has invalid type GuzzleHttp\\Psr7\\Request.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/GuzzleAsyncClient.php',
       'line' => 26,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/GuzzleAsyncClient.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 26,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Network.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Http\\ClientException|Luminova\\Http\\ConnectException|Luminova\\Http\\RequestException|Luminova\\Http\\ServerException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Network.php',
       'line' => 47,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Network.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 47,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Http\\ClientException|Luminova\\Http\\ConnectException|Luminova\\Http\\RequestException|Luminova\\Http\\ServerException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Network.php',
       'line' => 65,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Network.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 65,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Http\\ClientException|Luminova\\Http\\ConnectException|Luminova\\Http\\RequestException|Luminova\\Http\\ServerException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Network.php',
       'line' => 82,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Network.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 82,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Http\\ClientException|Luminova\\Http\\ConnectException|Luminova\\Http\\RequestException|Luminova\\Http\\ServerException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Network.php',
       'line' => 100,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Network.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 100,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Http\\ClientException|Luminova\\Http\\ConnectException|Luminova\\Http\\RequestException|Luminova\\Http\\ServerException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Network.php',
       'line' => 119,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Network.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 119,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/NetworkAsync.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Http\\NetworkAsync::$client has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/NetworkAsync.php',
       'line' => 20,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/NetworkAsync.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 20,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Http\\NetworkAsync::sendAsync() has invalid return type GuzzleHttp\\Promise\\PromiseInterface.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/NetworkAsync.php',
       'line' => 27,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/NetworkAsync.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 27,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class GuzzleHttp\\Psr7\\Request not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/NetworkAsync.php',
       'line' => 29,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/NetworkAsync.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 29,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Request.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Exceptions\\InvalidArgumentException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Request.php',
       'line' => 193,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Request.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 193,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class Luminova\\Exceptions\\InvalidArgumentException not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Request.php',
       'line' => 213,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Request.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 213,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Throwing object of an unknown class Luminova\\Exceptions\\InvalidArgumentException.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Request.php',
       'line' => 213,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Request.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 213,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Throw_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $mime on left side of ?? always exists and is not nullable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Request.php',
       'line' => 448,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Request.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 448,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Coalesce',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $extension on left side of ?? always exists and is not nullable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Request.php',
       'line' => 449,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Request.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 449,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Coalesce',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $headerName',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Request.php',
       'line' => 687,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Request.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 687,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'headerName',
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Class Luminova\\Http\\Header does not have a constructor and must be instantiated without any parameters.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Request.php',
       'line' => 702,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Request.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 702,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Languages/Translator.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $placeholders',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Languages/Translator.php',
       'line' => 136,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Languages/Translator.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 136,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'placeholders',
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Models/Model.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return with type int is incompatible with native type bool.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Models/Model.php',
       'line' => 118,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Models/Model.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 118,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Models\\Model::deleteRecord() should return bool but returns int.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Models/Model.php',
       'line' => 120,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Models/Model.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 120,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Return_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Models/PushMessage.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Models\\PushMessage::$title is unused.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Models/PushMessage.php',
       'line' => 19,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Models/PushMessage.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/developing-extensions/always-read-written-properties',
       'nodeLine' => 14,
       'nodeType' => 'PHPStan\\Node\\ClassPropertiesNode',
       'identifier' => 'deadCode.unusedProperty',
       'metadata' => 
      array (
        'classOrder' => 1,
        'classDepth' => 1,
        'classStartLine' => 14,
        'propertyName' => 'title',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Models\\PushMessage::$body is unused.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Models/PushMessage.php',
       'line' => 24,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Models/PushMessage.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/developing-extensions/always-read-written-properties',
       'nodeLine' => 14,
       'nodeType' => 'PHPStan\\Node\\ClassPropertiesNode',
       'identifier' => 'deadCode.unusedProperty',
       'metadata' => 
      array (
        'classOrder' => 1,
        'classDepth' => 1,
        'classStartLine' => 14,
        'propertyName' => 'body',
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constructor of class Luminova\\Models\\PushMessage has an unused parameter $type.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Models/PushMessage.php',
       'line' => 46,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Models/PushMessage.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 46,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => 'constructor.unusedParameter',
       'metadata' => 
      array (
        'variableName' => 'type',
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Notifications\\FirebasePusher::$factory has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'line' => 28,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 28,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method withServiceAccount() on an unknown class Kreait\\Firebase\\Factory.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'line' => 45,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 45,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class Kreait\\Firebase\\Factory not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'line' => 45,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 45,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to static method create() on an unknown class Kreait\\Firebase\\Messaging\\Notification.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'line' => 71,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 71,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to static method withTarget() on an unknown class Kreait\\Firebase\\Messaging\\CloudMessage.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'line' => 85,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 85,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to static method create() on an unknown class Kreait\\Firebase\\Messaging\\Notification.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'line' => 86,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 86,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to static method withTarget() on an unknown class Kreait\\Firebase\\Messaging\\CloudMessage.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'line' => 107,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 107,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to static method create() on an unknown class Kreait\\Firebase\\Messaging\\Notification.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'line' => 109,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 109,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to static method new() on an unknown class Kreait\\Firebase\\Messaging\\CloudMessage.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'line' => 130,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 130,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to static method create() on an unknown class Kreait\\Firebase\\Messaging\\Notification.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'line' => 132,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 132,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Notifications\\FirebasePusher::push() should return mixed but return statement is missing.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'line' => 152,
       'canBeIgnored' => false,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 152,
       'nodeType' => 'PHPStan\\Node\\ExecutionEndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Notifications\\FirebasePusher::device() should return mixed but return statement is missing.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'line' => 160,
       'canBeIgnored' => false,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 160,
       'nodeType' => 'PHPStan\\Node\\ExecutionEndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to static method new() on an unknown class Kreait\\Firebase\\Messaging\\CloudMessage.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'line' => 162,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 162,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Notifications\\FirebaseRealtime::$database has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php',
       'line' => 14,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 14,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Notifications\\FirebaseRealtime::$tableName has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php',
       'line' => 15,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 15,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Notifications\\FirebaseRealtime::__construct() has parameter $databaseUri with no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php',
       'line' => 17,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 17,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Notifications\\FirebaseRealtime::__construct() has parameter $projectId with no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php',
       'line' => 17,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 17,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method withProjectId() on an unknown class Kreait\\Firebase\\Factory.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php',
       'line' => 18,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 18,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class Kreait\\Firebase\\Factory not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php',
       'line' => 18,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 18,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Notifications\\FirebaseRealtime::insert() has parameter $rowId with no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php',
       'line' => 49,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 49,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Notifications\\FirebaseRealtime::update() has parameter $rowId with no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php',
       'line' => 55,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 55,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Notifications\\FirebaseRealtime::delete() has no return type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php',
       'line' => 62,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 62,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Notifications\\FirebaseRealtime::delete() has parameter $rowId with no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php',
       'line' => 62,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 62,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Bootstrap.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Routing\\Bootstrap::$onError type has no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Bootstrap.php',
       'line' => 57,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Bootstrap.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 57,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Bootstrap::__construct() has parameter $onError with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Bootstrap.php',
       'line' => 70,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Bootstrap.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 70,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Bootstrap::getErrorHandler() return type has no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Bootstrap.php',
       'line' => 94,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Bootstrap.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 94,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::before() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 96,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 96,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::after() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 114,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 114,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::always() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 132,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 132,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::capture() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 150,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 150,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::authenticate() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 178,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 178,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::authenticate() has parameter $pattern with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 178,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 178,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::command() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 208,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 208,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::any() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 231,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 231,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::get() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 244,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 244,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param has invalid value (string pattern A route pattern or template view name): Unexpected token "pattern", expected variable at offset 81',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 244,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 244,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::post() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 257,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 257,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::patch() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 270,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 270,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::delete() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 283,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 283,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    13 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::put() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 296,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 296,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    14 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::options() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 309,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 309,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    15 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::bind() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 322,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 322,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    16 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var does not specify variable name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 369,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 369,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    17 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::run() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 456,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 456,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    18 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::setErrorHandler() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 481,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 481,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    19 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::setErrorHandler() has parameter $match with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 481,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 481,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    20 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #3 $status of static method Luminova\\Routing\\Router::printError() expects int, false given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 517,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 517,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    21 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param has invalid value (string|null Optional message body to display): Unexpected token "Optional", expected variable at offset 159',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 532,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 532,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    22 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Right side of || is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 712,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 712,
       'nodeType' => 'PHPStan\\Node\\BooleanOrNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    23 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::addMiddleWare() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 734,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 734,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    24 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Right side of && is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 837,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 837,
       'nodeType' => 'PHPStan\\Node\\BooleanAndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    25 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return with type void is incompatible with native type bool.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 854,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 854,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    26 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Right side of && is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 870,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 870,
       'nodeType' => 'PHPStan\\Node\\BooleanAndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    27 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Right side of && is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 877,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 877,
       'nodeType' => 'PHPStan\\Node\\BooleanAndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    28 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::execute() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 957,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 957,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    29 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Offset 0 does not exist on array<bool>.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 1011,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 1011,
       'nodeType' => 'PhpParser\\Node\\Expr\\Assign',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    30 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Offset 1 does not exist on array<bool>.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 1011,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 1011,
       'nodeType' => 'PhpParser\\Node\\Expr\\Assign',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    31 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'If condition is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 1024,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 1024,
       'nodeType' => 'PhpParser\\Node\\Stmt\\If_',
       'identifier' => 'deadCode.ifConstantCondition',
       'metadata' => 
      array (
        'depth' => 5,
        'order' => 0,
        'value' => true,
      ),
    )),
    32 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unreachable statement - code above always terminates.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 1030,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 1030,
       'nodeType' => 'PHPStan\\Node\\UnreachableStatementNode',
       'identifier' => 'deadCode.unreachableStatement',
       'metadata' => 
      array (
        'depth' => 3,
        'order' => 7,
      ),
    )),
    33 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return contains unresolvable type.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 1043,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 1043,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    34 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Access to an undefined property object::$name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 1057,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more: <fg=cyan>https://phpstan.org/blog/solving-phpstan-access-to-undefined-property</>',
       'nodeLine' => 1057,
       'nodeType' => 'PhpParser\\Node\\Expr\\PropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    35 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Access to an undefined property object::$name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 1061,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more: <fg=cyan>https://phpstan.org/blog/solving-phpstan-access-to-undefined-property</>',
       'nodeLine' => 1061,
       'nodeType' => 'PhpParser\\Node\\Expr\\PropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    36 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Access to an undefined property object::$options.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 1062,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more: <fg=cyan>https://phpstan.org/blog/solving-phpstan-access-to-undefined-property</>',
       'nodeLine' => 1062,
       'nodeType' => 'PhpParser\\Node\\Expr\\PropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    37 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Access to an undefined property object::$usages.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 1063,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more: <fg=cyan>https://phpstan.org/blog/solving-phpstan-access-to-undefined-property</>',
       'nodeLine' => 1063,
       'nodeType' => 'PhpParser\\Node\\Expr\\PropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    38 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Access to an undefined property object::$description.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 1064,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more: <fg=cyan>https://phpstan.org/blog/solving-phpstan-access-to-undefined-property</>',
       'nodeLine' => 1064,
       'nodeType' => 'PhpParser\\Node\\Expr\\PropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    39 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return with type bool|string is not subtype of native type string|false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'line' => 1133,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 1133,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/AES.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var for property Luminova\\Security\\Encryption\\AES::$key with type int is incompatible with native type string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/AES.php',
       'line' => 24,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/AES.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 24,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var for property Luminova\\Security\\Encryption\\AES::$data with type int is incompatible with native type string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/AES.php',
       'line' => 29,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/AES.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 29,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var for property Luminova\\Security\\Encryption\\AES::$method with type int is incompatible with native type string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/AES.php',
       'line' => 34,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/AES.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 34,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var for property Luminova\\Security\\Encryption\\AES::$iv with type int is incompatible with native type string|null.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/AES.php',
       'line' => 39,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/AES.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 39,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/EncryptionInterface.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Security\\Encryption\\ErrorException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/EncryptionInterface.php',
       'line' => 45,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/EncryptionInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 45,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Security\\Encryption\\InvalidException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/EncryptionInterface.php',
       'line' => 74,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/EncryptionInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 74,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Security\\Encryption\\InvalidException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/EncryptionInterface.php',
       'line' => 82,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/EncryptionInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 82,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Result of && is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php',
       'line' => 59,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 59,
       'nodeType' => 'PHPStan\\Node\\BooleanAndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Strict comparison using === between non-empty-array and array{} will always evaluate to false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php',
       'line' => 59,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 59,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Identical',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Security\\InputValidator::addError() invoked with 4 parameters, 2-3 required.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php',
       'line' => 135,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 135,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot call method is_uuid() on bool|object|string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php',
       'line' => 167,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 167,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot call method ip() on bool|object|string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php',
       'line' => 168,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 168,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot call method is_phone() on bool|object|string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php',
       'line' => 169,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 169,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Security\\InputValidator::replaceMessage() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php',
       'line' => 312,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 312,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $message',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php',
       'line' => 327,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 327,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'message',
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $message in empty() is never defined.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php',
       'line' => 346,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 346,
       'nodeType' => 'PhpParser\\Node\\Expr\\Empty_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/ValidatorInterface.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $message',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/ValidatorInterface.php',
       'line' => 72,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/ValidatorInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 72,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'message',
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 53,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 53,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 54,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 54,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe usage of new static().',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 54,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/blog/solving-phpstan-error-unsafe-usage-of-new-static',
       'nodeLine' => 54,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 57,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 57,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 70,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 70,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::loadMeta() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 70,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 70,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$appName through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 71,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 71,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$link through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 72,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 72,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::loadDefaultConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 73,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 73,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$defaultConfig through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 85,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 85,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$extendedConfig through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 99,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 99,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$defaultConfig through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 122,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 122,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$defaultConfig through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 123,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 123,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    13 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$defaultConfig through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 136,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 136,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    14 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$defaultConfig through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 137,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 137,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    15 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$appName through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 148,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 148,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    16 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$appName through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 149,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 149,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    17 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$defaultConfig through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 149,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 149,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    18 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$defaultConfig through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 151,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 151,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    19 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$defaultConfig through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 177,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 177,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    20 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$extendedConfig through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 177,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 177,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    21 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::shouldAddParam() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 183,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 183,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    22 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getQuery() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 184,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 184,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    23 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getQuery() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 205,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 205,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    24 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::has_query_parameter() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 205,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 205,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    25 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$defaultConfig through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 237,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 237,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    26 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 238,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 238,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    27 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$link through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 239,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 239,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    28 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 241,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 241,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    29 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 243,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 243,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    30 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 244,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 244,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    31 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 245,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 245,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    32 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 246,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 246,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    33 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 247,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 247,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    34 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 248,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 248,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    35 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 249,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 249,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    36 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 250,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 250,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    37 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 251,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 251,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    38 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 252,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 252,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    39 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 253,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 253,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    40 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 254,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 254,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    41 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 260,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 260,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    42 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 277,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 277,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    43 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 284,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 284,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    44 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 285,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 285,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    45 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$link through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 286,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 286,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    46 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 287,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 287,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    47 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 290,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 290,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    48 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 291,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 291,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    49 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 292,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 292,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    50 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 292,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 292,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    51 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 293,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 293,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    52 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 293,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 293,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    53 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 294,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 294,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    54 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 295,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 295,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    55 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 296,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 296,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    56 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 299,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 299,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    57 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 304,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 304,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    58 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$link through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 305,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 305,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    59 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 306,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 306,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    60 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 307,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 307,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    61 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 309,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 309,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    62 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$link through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 316,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 316,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    63 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 321,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 321,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    64 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 325,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 325,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    65 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 326,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 326,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    66 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 327,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 327,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    67 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 329,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 329,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    68 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 332,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 332,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    69 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 335,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 335,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    70 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 338,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 338,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    71 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 340,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 340,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    72 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 340,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 340,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    73 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 341,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 341,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    74 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::toDate() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 341,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 341,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    75 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 342,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 342,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    76 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::toDate() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 342,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 342,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    77 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 343,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 343,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    78 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 345,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 345,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    79 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 347,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 347,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    80 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 351,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 351,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    81 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 357,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 357,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    82 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 358,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 358,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    83 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 359,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 359,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    84 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 359,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 359,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    85 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 360,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 360,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    86 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 360,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 360,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    87 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 361,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 361,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    88 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 362,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 362,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    89 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 366,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 366,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    90 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 374,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 374,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    91 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 376,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 376,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    92 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$link through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 377,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 377,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    93 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 385,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 385,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    94 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 386,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 386,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    95 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 390,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 390,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    96 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 391,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 391,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    97 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 394,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 394,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    98 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 396,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 396,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    99 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$link through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 397,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 397,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    100 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 401,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 401,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    101 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 405,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 405,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    102 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 407,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 407,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    103 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 411,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 411,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    104 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 412,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 412,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    105 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 415,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 415,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    106 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 416,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 416,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    107 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 417,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 417,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    108 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 418,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 418,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    109 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 419,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 419,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    110 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$link through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 421,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 421,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    111 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 423,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 423,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    112 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 424,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 424,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    113 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::toDate() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 424,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 424,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    114 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 425,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 425,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    115 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::toDate() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 425,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 425,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    116 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 427,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 427,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    117 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 432,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 432,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    118 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 435,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 435,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    119 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 437,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 437,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    120 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 437,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 437,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    121 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 438,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 438,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    122 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 439,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 439,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    123 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 440,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 440,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    124 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 445,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 445,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    125 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 448,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 448,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    126 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 450,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 450,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    127 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$link through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 458,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 458,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    128 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 461,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 461,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    129 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 462,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 462,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    130 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 463,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 463,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    131 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 464,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 464,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    132 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 468,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 468,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    133 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 471,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 471,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    134 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 472,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 472,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    135 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 473,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 473,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    136 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 474,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 474,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    137 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 475,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 475,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    138 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 478,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 478,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    139 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 482,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 482,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    140 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 483,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 483,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    141 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 484,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 484,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    142 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 499,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 499,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    143 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 500,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 500,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    144 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 502,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 502,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    145 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 503,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 503,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    146 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 506,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 506,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    147 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 507,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 507,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    148 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 508,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 508,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    149 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::toDate() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 508,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 508,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    150 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 509,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 509,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    151 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::toDate() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 509,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 509,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    152 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 512,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 512,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    153 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 514,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 514,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    154 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 515,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 515,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    155 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 516,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 516,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    156 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 517,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 517,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    157 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 518,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 518,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    158 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 518,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 518,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    159 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 519,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 519,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    160 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 520,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 520,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    161 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Seo\\Meta::getConfig() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 521,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 521,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    162 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$manifest through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'line' => 523,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 523,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/CookieManager.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $_COOKIE in isset() always exists and is not nullable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/CookieManager.php',
       'line' => 234,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/CookieManager.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 234,
       'nodeType' => 'PhpParser\\Node\\Expr\\Isset_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unreachable statement - code above always terminates.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/CookieManager.php',
       'line' => 238,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/CookieManager.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 238,
       'nodeType' => 'PHPStan\\Node\\UnreachableStatementNode',
       'identifier' => 'deadCode.unreachableStatement',
       'metadata' => 
      array (
        'depth' => 3,
        'order' => 1,
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $_COOKIE in isset() always exists and is not nullable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/CookieManager.php',
       'line' => 281,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/CookieManager.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 281,
       'nodeType' => 'PhpParser\\Node\\Expr\\Isset_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param for parameter $value with type array is incompatible with native type string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/CookieManager.php',
       'line' => 357,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/CookieManager.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 357,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return with type Luminova\\Sessions\\CookieManager is incompatible with native type void.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/CookieManager.php',
       'line' => 357,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/CookieManager.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 357,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/Session.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe usage of new static().',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/Session.php',
       'line' => 66,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/Session.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/blog/solving-phpstan-error-unsafe-usage-of-new-static',
       'nodeLine' => 66,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return with type object is incompatible with native type array.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/Session.php',
       'line' => 108,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/Session.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 108,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot call method ip() on bool|object|string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/Session.php',
       'line' => 312,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/Session.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 312,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot call method get() on bool|object|string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/Session.php',
       'line' => 340,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/Session.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 340,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot call method get() on bool|object|string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/Session.php',
       'line' => 370,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/Session.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 370,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/SessionInterface.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $online',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/SessionInterface.php',
       'line' => 76,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/SessionInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 76,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'online',
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/SessionManager.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Sessions\\SessionManager::$config is never read, only written.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/SessionManager.php',
       'line' => 24,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/SessionManager.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/developing-extensions/always-read-written-properties',
       'nodeLine' => 14,
       'nodeType' => 'PHPStan\\Node\\ClassPropertiesNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $config',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/SessionManager.php',
       'line' => 32,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/SessionManager.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 32,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'config',
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Expression on left side of ?? is not nullable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/SessionManager.php',
       'line' => 220,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/SessionManager.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 220,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Coalesce',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Helper.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Storage\\Helper::$unites through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Helper.php',
       'line' => 20,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Helper.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 20,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Storage\\Helper::$unites through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Helper.php',
       'line' => 26,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Helper.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 26,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Storage\\Helper::toBytes() has no return type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Helper.php',
       'line' => 31,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Helper.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 31,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Storage\\Helper::toBytes() has parameter $from with no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Helper.php',
       'line' => 31,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Helper.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 31,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Storage\\Helper::$unites through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Helper.php',
       'line' => 40,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Helper.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 40,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Binary operation "*" between string and (float|int) results in an error.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Helper.php',
       'line' => 45,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Helper.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 45,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Mul',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Storage\\S3::$client has unknown class Aws\\S3\\S3Client as its type.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 19,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 19,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class Aws\\S3\\S3Client not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 36,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 36,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method putObject() on an unknown class Aws\\S3\\S3Client.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 43,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 43,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Caught class Aws\\Exception\\AwsException not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 50,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 50,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Catch_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method getMessage() on an unknown class Aws\\Exception\\AwsException.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 51,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 51,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method getIterator() on an unknown class Aws\\S3\\S3Client.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 60,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 60,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Caught class Aws\\S3\\Exception\\S3Exception not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 67,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 67,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Catch_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method headObject() on an unknown class Aws\\S3\\S3Client.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 77,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 77,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Caught class Aws\\S3\\Exception\\S3Exception not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 82,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 82,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Catch_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method doesObjectExist() on an unknown class Aws\\S3\\S3Client.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 93,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 93,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Caught class Aws\\S3\\Exception\\S3Exception not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 94,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 94,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Catch_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method putObject() on an unknown class Aws\\S3\\S3Client.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 117,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 117,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Caught class Aws\\S3\\Exception\\S3Exception not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 123,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 123,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Catch_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    13 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method getCommand() on an unknown class Aws\\S3\\S3Client.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 161,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 161,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    14 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method createPresignedRequest() on an unknown class Aws\\S3\\S3Client.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 166,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 166,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    15 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Caught class Aws\\S3\\Exception\\S3Exception not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 169,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 169,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Catch_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    16 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unreachable statement - code above always terminates.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 172,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 172,
       'nodeType' => 'PHPStan\\Node\\UnreachableStatementNode',
       'identifier' => 'deadCode.unreachableStatement',
       'metadata' => 
      array (
        'depth' => 3,
        'order' => 1,
      ),
    )),
    17 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Storage\\S3::post() has no return type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 175,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 175,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    18 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class Aws\\S3\\PostObjectV4 not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 178,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 178,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    19 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method getFormAttributes() on an unknown class Aws\\S3\\PostObjectV4.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 191,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 191,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    20 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method getFormInputs() on an unknown class Aws\\S3\\PostObjectV4.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 192,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 192,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    21 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Caught class Aws\\S3\\Exception\\S3Exception not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'line' => 198,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 198,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Catch_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Uploader.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return contains unresolvable type.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Uploader.php',
       'line' => 24,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Uploader.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 24,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return contains unresolvable type.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Uploader.php',
       'line' => 66,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Uploader.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 66,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Template\\Template::initialize() invoked with 2 parameters, 0-1 required.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'line' => 21,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 21,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $dir of method Luminova\\Template\\Template::initialize() expects string, null given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'line' => 21,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 21,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Template\\Template::$minifyContent through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 207,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 207,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Negated boolean expression is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 208,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 208,
       'nodeType' => 'PhpParser\\Node\\Expr\\BooleanNot',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Template\\Template::$publicOptions through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 224,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 224,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Template\\Template::$publicOptions through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 225,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 225,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Template\\Template::$publicClasses through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 228,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 228,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Template\\Template::$publicClasses through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 229,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 229,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Template\\Template::$publicClasses through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 244,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 244,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Template\\Template::$publicClasses through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 245,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 245,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Template\\Template::$publicClasses through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 260,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 260,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Exceptions\\InvalidArgumentException|Luminova\\Exceptions\\RuntimeException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 490,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 490,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class Luminova\\Exceptions\\InvalidArgumentException not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 493,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 493,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    13 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Throwing object of an unknown class Luminova\\Exceptions\\InvalidArgumentException.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 493,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 493,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Throw_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    14 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Template\\Template::$publicClasses through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 506,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 506,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    15 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Template\\Template::$publicClasses through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 511,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 511,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    16 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Result of && is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 533,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 533,
       'nodeType' => 'PHPStan\\Node\\BooleanAndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    17 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Strict comparison using === between int and \'_\' will always evaluate to false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 533,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 533,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Identical',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    18 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Template\\Template::$publicClasses through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 537,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 537,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    19 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Template\\Template::$publicOptions through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 541,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 541,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    20 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $expire',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 598,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 598,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'expire',
      ),
    )),
    21 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Template\\Template::renderIsolation() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 622,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 622,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    22 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Template\\Template::isReadWritePermission() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 646,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 646,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    23 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $callback of function ob_start expects callable(): mixed, bool given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 652,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 652,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    24 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $callback of function ob_start expects callable(): mixed, bool given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 702,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 702,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    25 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Template\\Template::$minifyContent through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 718,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 718,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    26 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Template\\Template::newCompressed() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 719,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 719,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    27 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Template\\Template::getViewUri() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 752,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 752,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    28 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Template\\Template::setOptions() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 759,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 759,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    29 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Template\\Template::$minifyContent through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 768,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 768,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    30 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Template\\Template::newCompressed() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 770,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 770,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    31 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Template\\Template::requestHeaders() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 775,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 775,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    32 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Template\\Template::$publicClasses through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 811,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 811,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    33 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $optimizer on left side of ??= always exists and is always null.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 814,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 814,
       'nodeType' => 'PhpParser\\Node\\Expr\\AssignOp\\Coalesce',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    34 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Template\\Template::getViewUri() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 815,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 815,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    35 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Template\\Template::$minifyContent through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 831,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 831,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    36 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Template\\Template::newCompressed() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 832,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 832,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    37 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $ContentType might not be defined.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 832,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 832,
       'nodeType' => 'PhpParser\\Node\\Expr\\Variable',
       'identifier' => 'variable.maybeUndefined',
       'metadata' => 
      array (
        'variableName' => 'ContentType',
        'statementDepth' => 5,
        'statementOrder' => 0,
        'depth' => 4,
        'order' => 0,
        'variables' => 
        array (
          0 => 'templateFile',
          1 => 'shouldCache',
          2 => 'cacheFile',
          3 => 'options',
          4 => 'ignore',
          5 => 'copy',
          6 => 'optimizer',
          7 => 'finish',
          8 => 'viewHeaderInfo',
          9 => 'self',
          10 => 'viewContents',
        ),
        'parentVariables' => 
        array (
        ),
      ),
    )),
    38 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Template\\Template::requestHeaders() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 838,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 838,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    39 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Right side of && is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 936,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 936,
       'nodeType' => 'PHPStan\\Node\\BooleanAndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    40 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Exceptions\\InvalidArgumentException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 957,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 957,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    41 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Template\\Template::calculateLevel() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 960,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 960,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    42 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Ternary operator condition is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 961,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 961,
       'nodeType' => 'PhpParser\\Node\\Expr\\Ternary',
       'identifier' => 'deadCode.ternaryConstantCondition',
       'metadata' => 
      array (
        'statementDepth' => 4,
        'statementOrder' => 0,
        'depth' => 1,
        'order' => 1,
        'value' => false,
      ),
    )),
    43 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class Luminova\\Exceptions\\InvalidArgumentException not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 973,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 973,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    44 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Throwing object of an unknown class Luminova\\Exceptions\\InvalidArgumentException.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 973,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 973,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Throw_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    45 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Template\\Template::toTitle() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 986,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 986,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    46 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Template\\Template::toTitle() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 990,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 990,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    47 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Template\\Template::getViewUri() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 1030,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 1030,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    48 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Negated boolean expression is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 1033,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 1033,
       'nodeType' => 'PhpParser\\Node\\Expr\\BooleanNot',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    49 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Right side of && is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 1039,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 1039,
       'nodeType' => 'PHPStan\\Node\\BooleanAndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Task.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Time\\Task::create() has no return type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Task.php',
       'line' => 18,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Task.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 18,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Negated boolean expression is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Task.php',
       'line' => 129,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Task.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 129,
       'nodeType' => 'PhpParser\\Node\\Expr\\BooleanNot',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $local',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 61,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 61,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'local',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 61,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 61,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 93,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 93,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $local',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 111,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 111,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'local',
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 111,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 111,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $local',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 130,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 130,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'local',
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 130,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 130,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $local',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 145,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 145,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'local',
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 145,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 145,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $local',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 160,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 160,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'local',
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 160,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 160,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 170,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 170,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 180,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 180,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    13 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 190,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 190,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    14 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 200,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 200,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    15 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 210,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 210,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    16 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 220,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 220,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    17 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 231,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 231,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    18 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 241,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 241,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    19 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 251,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 251,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    20 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 261,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 261,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    21 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 271,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 271,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    22 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 320,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 320,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    23 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 345,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 345,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    24 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 359,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 359,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    25 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 374,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 374,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    26 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 391,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 391,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    27 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 410,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 410,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    28 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 424,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 424,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    29 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 438,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 438,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    30 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $local',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 459,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 459,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'local',
      ),
    )),
    31 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 459,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 459,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    32 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $datetime',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 477,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 477,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'datetime',
      ),
    )),
    33 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 477,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 477,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    34 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method DateTimeImmutable::setTime() on a separate line has no effect.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 501,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 501,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    35 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method DateTimeImmutable::setTime() on a separate line has no effect.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'line' => 502,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 502,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Utils/Queue.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Utils\\Queue::push() has parameter $item with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Utils/Queue.php',
       'line' => 68,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Utils/Queue.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 68,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Utils\\Queue::run() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Utils/Queue.php',
       'line' => 81,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Utils/Queue.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 81,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instanceof between mixed and Closure will always evaluate to false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Utils/Queue.php',
       'line' => 167,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Utils/Queue.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 167,
       'nodeType' => 'PhpParser\\Node\\Expr\\Instanceof_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
); },
	'collectedDataCallback' => static function (): array { return array (
); },
	'dependencies' => array (
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Application.php' => 
  array (
    'fileHash' => '4d95ef73aa862c02c103f9d97639d51017e92b26',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseController.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Controllers/ViewController.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Config.php' => 
  array (
    'fileHash' => '930a61ac1d771bb01bfdcf2d0e7d7646b2edafc2',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Welcome.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Cookie.php' => 
  array (
    'fileHash' => '9f95092944fabaa4f768ada7eebf8e96615afa50',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Cookie.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Files.php' => 
  array (
    'fileHash' => '24cfc07bc2c148a2758432301d29dc015cb447df',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Paths.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/IPConfig.php' => 
  array (
    'fileHash' => '3d0b5f0e17ac0853726c9e25ab0cce693ab882ff',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Meta.php' => 
  array (
    'fileHash' => '061609612c75dfa3b98cf12f284360e88eafa0b5',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Modules.php' => 
  array (
    'fileHash' => '1ad2f36dfaab84a4abb03abc455f17bd27479a9e',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Paths.php' => 
  array (
    'fileHash' => '487b8f6190fe28e1e26d5c46c4389ae6917f0dfa',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Servers.php' => 
  array (
    'fileHash' => '5731a95f00202d499f1e11844fb6c368c94eb23c',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Services.php' => 
  array (
    'fileHash' => 'fe34f1b343640402ca2e2e9d1e5d6ceff0715f8b',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Session.php' => 
  array (
    'fileHash' => '9c97e4a26b6f932affc3111f0cc5a877454fbb68',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Csrf.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/CookieManager.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/Session.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Template.php' => 
  array (
    'fileHash' => '39bbd8f7d9e3bcbb31c43797f9cfb2148c20e0c6',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Languages/App.en.php' => 
  array (
    'fileHash' => '7e83ceb1880e0e788134c987fde17266b17d88a4',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Languages/App.fr.php' => 
  array (
    'fileHash' => '0115e9c25a6aba67564c86919428899c7262a359',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Utils/Func.php' => 
  array (
    'fileHash' => '8eec9ce9638a80811eb67879b5e375a6dfcea7b9',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Utils/Global.php' => 
  array (
    'fileHash' => 'bf87c61ca4979d3d099503d9330024008036f260',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Welcome.php' => 
  array (
    'fileHash' => '32d4b9666cfd8c9a24f0c9bbac735c43b4839f7a',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php' => 
  array (
    'fileHash' => '49f064191b228de3b206c14b188e489c5a352aa9',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Paths.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Generators.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/Configuration.php',
      5 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/DotEnv.php',
      6 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
      7 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
      8 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
      9 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php' => 
  array (
    'fileHash' => '96fc55cd9ccb4137b6f3d91eda369ff3a8f076b9',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/helpers.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
      5 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php',
      6 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
      7 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/Optimizer.php',
      8 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Generators.php',
      9 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
      10 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
      11 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
      12 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/NovaMailer.php',
      13 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Errors/Error.php',
      14 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
      15 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/TorDetector.php',
      16 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Languages/Translator.php',
      17 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Library/Importer.php',
      18 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Logger/NovaLogger.php',
      19 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php',
      20 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
      21 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/Session.php',
      22 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php',
      23 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/helpers.php' => 
  array (
    'fileHash' => '5ccb452a32f046823829bbf173bee550459528bb',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php' => 
  array (
    'fileHash' => 'c9e2eba9c62da87fd827f837c208eab37511db34',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseApplication.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseController.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Controllers/ViewController.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php' => 
  array (
    'fileHash' => '60dffa6317df4057c5111e8dbc4efcedec0c43b9',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Paths.php' => 
  array (
    'fileHash' => 'f05f1fc06910c4e27a6eca990951042bb4edd52f',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Paths.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BasePaths.php',
      5 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
      6 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/Optimizer.php',
      7 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Files.php',
      8 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
      9 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/TorDetector.php',
      10 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Logger/NovaLogger.php',
      11 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Uploader.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php' => 
  array (
    'fileHash' => '4f53117b7b285da164dd3b971467e485391e2a4b',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Services.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Arrays/ArrayCountable.php' => 
  array (
    'fileHash' => '1f360e7e13b860083e2313f9f23a2467b2eb9317',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Arrays/ArrayInput.php' => 
  array (
    'fileHash' => '0bebdcf751a45c5636fa4af0920aa0f2c47f9780',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Arrays/ArrayObject.php' => 
  array (
    'fileHash' => 'ea87b1c1c8ab895888187ecf89855d4ead79fee3',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Arrays/Arrays.php' => 
  array (
    'fileHash' => 'c82784eacbd0fba0aad43e4b75f1e0773fde6512',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseApplication.php' => 
  array (
    'fileHash' => 'e9c3cb86da16755aa67b8db963de4c541eac39f4',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseController.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Controllers/ViewController.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseCommand.php' => 
  array (
    'fileHash' => 'd07b3cdf7a4c10b6352df0ca4e34aa814fc1be05',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Commands.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Generators.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Help.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Lists.php',
      5 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Server.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseConfig.php' => 
  array (
    'fileHash' => 'c1272ba08574af94be3f98bcab645809c34629da',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Config.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Welcome.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Console.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/BaseComposer.php',
      5 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Builder.php',
      6 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
      7 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
      8 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Errors/Error.php',
      9 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/AppException.php',
      10 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Header.php',
      11 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseController.php' => 
  array (
    'fileHash' => '2a0a1ac128570d0b8cce07e38d06f8941d809e04',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php' => 
  array (
    'fileHash' => 'ecb95320efe9eabff5a2e9351faa1424652e6e0c',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Utils/Func.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Functions.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseModel.php' => 
  array (
    'fileHash' => '38a0703e49d774dd9ca8567087b439d74d6b391d',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BasePaths.php' => 
  array (
    'fileHash' => '0972bf1a77b294c91d36913d9979b848ae985efc',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Paths.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServers.php' => 
  array (
    'fileHash' => 'd6ca8f8a11988f74ca718d935e6d42f1553ed259',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Servers.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php' => 
  array (
    'fileHash' => '85c540faf539e1faba97fef44da0421eb6c4d604',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Services.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseViewController.php' => 
  array (
    'fileHash' => 'a30cdeb9086edd8ba0b4f1011f61242e32f9632a',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Welcome.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/Cache.php' => 
  array (
    'fileHash' => '12854d196ceff73caa365502f6b9bfaf2003178a',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/Compress.php' => 
  array (
    'fileHash' => '9e455ffedeca6b55ae9166ff6d875f20151421d6',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php' => 
  array (
    'fileHash' => '1b4376635df422303697932dbfec02eaf4f968be',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/Cache.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCacheItem.php' => 
  array (
    'fileHash' => '97f2fb30dca98d6bedbbfe54052d6ff7b7237fc8',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/MemoryCache.php' => 
  array (
    'fileHash' => 'f8e6f8919689bdf551abca4b235e9e3018b1cb50',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/Cache.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/Optimizer.php' => 
  array (
    'fileHash' => '3ad34b8ce2be9c7bf5853c5564353716adf3bd73',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Colors.php' => 
  array (
    'fileHash' => 'cae9aa1e1823684578936d33c207c58302a7445d',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Commands.php' => 
  array (
    'fileHash' => '96640ec620cb7c6938bb072a688a26ad299c41a2',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Console.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Console.php' => 
  array (
    'fileHash' => '8ba3073b1d1818e0e11dec385a5473e9f846f44f',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/AvailableCommands.php' => 
  array (
    'fileHash' => 'ac36d9fac6384f676934c0150e37e4b7709dba79',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Commands.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Help.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Lists.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php' => 
  array (
    'fileHash' => 'b23c508ba4bf16a3f4d2c83d1ce6e2cf62deed2d',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Commands.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Generators.php' => 
  array (
    'fileHash' => 'bd8fa8c4190ed23fc430078f37da44261dc2aee9',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Commands.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Help.php' => 
  array (
    'fileHash' => 'b7dc0f9cec14f5d5796b7fa8338705a75d93243a',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Commands.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Lists.php' => 
  array (
    'fileHash' => '4288c611f210bf1608a303aec4ecb49de42cb2b2',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Commands.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Server.php' => 
  array (
    'fileHash' => '26b2c53020c7896e001c95be810069ceddd467c3',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Commands.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/mod_rewrite.php' => 
  array (
    'fileHash' => 'a8fcd572bb342bff31c9eb3f4fce403046c70b19',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php' => 
  array (
    'fileHash' => '68e8ed2dced94ed30c13dd7116d0bcd78ca46bb2',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseCommand.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Commands.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Console.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Generators.php',
      5 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Help.php',
      6 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Lists.php',
      7 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Server.php',
      8 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/TerminalGenerator.php',
      9 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
      10 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/TerminalGenerator.php' => 
  array (
    'fileHash' => '22647ad5de6cb0619034fdbe316f3f38854eba01',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/TextUtils.php' => 
  array (
    'fileHash' => '451f55119665a29594fe85347104d12f7dd474a6',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Colors.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Lists.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/BaseComposer.php' => 
  array (
    'fileHash' => '5b0dedfc9742461d63840b0da5cb2422feed2d6a',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Builder.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Builder.php' => 
  array (
    'fileHash' => 'b7bf9c15ae03846c41dcbbfc45c3db9d56ca4321',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php' => 
  array (
    'fileHash' => '17722965f3995498a6966957b31946a09a366810',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/Configuration.php' => 
  array (
    'fileHash' => '18bb3760b5edbc0076040043e6d06f14fb3813ec',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Config.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Welcome.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
      5 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseConfig.php',
      6 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Console.php',
      7 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/BaseComposer.php',
      8 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Builder.php',
      9 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php',
      10 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
      11 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Errors/Error.php',
      12 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/AppException.php',
      13 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Header.php',
      14 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
      15 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/Database.php' => 
  array (
    'fileHash' => 'aa0d7d78ee3dc0fe38015b695140937fcbae1192',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/PdoDriver.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/DotEnv.php' => 
  array (
    'fileHash' => '9641e142467bc23ca834ad9d902136e97708afa8',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Builder.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/PHPStanRules.php' => 
  array (
    'fileHash' => '926a7c1bfc5a89adc7d3e78c7fe4f0378894af80',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/SystemPaths.php' => 
  array (
    'fileHash' => 'c250db258d27c8e604b25ce09fb0d564f6d2d172',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Controllers/Controller.php' => 
  array (
    'fileHash' => 'aaa951fbc944508ce95b71e30650f12f5ad07e98',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Controllers/ViewController.php' => 
  array (
    'fileHash' => '17d0e6cc0f9df87aa5654ff490696490175ff1bc',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Welcome.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseController.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseViewController.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Cookie.php' => 
  array (
    'fileHash' => '8a265b102152a5fab93cf79c634d0af3f5893565',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/CookieInterface.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/CookieInterface.php' => 
  array (
    'fileHash' => '66aae7aabc455cf918d4c663f641aeab446f3aa6',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Cookie.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Exception/CookieException.php' => 
  array (
    'fileHash' => '4615d8b06d8516a16a7261c2de4eea829f584d48',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Cookie.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Columns.php' => 
  array (
    'fileHash' => '164b1a16072930d0d602a3381c445e391a6ba823',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php' => 
  array (
    'fileHash' => 'bdbb9287ec28e6db5cc4e7674858c7d26e2c3c47',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Models/Model.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/DriversInterface.php' => 
  array (
    'fileHash' => '26a33fb595b5fb87295fe3b9299d0d6456eb1e92',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/PdoDriver.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php' => 
  array (
    'fileHash' => '22b83dceeacb10269354d19fd7fd343918583103',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/PdoDriver.php' => 
  array (
    'fileHash' => 'e44fad2f8201ef4d0c07b34fd07ef8bc947beca9',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php' => 
  array (
    'fileHash' => 'a8a38cc0882a12d3d152518ae3151ec7b325308e',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Models/Model.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Results/Statements.php' => 
  array (
    'fileHash' => '300be9b2987b78103c0e360963d49ed2b5b96f5e',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Debugger/PHPStanRules.php' => 
  array (
    'fileHash' => '13e88e034c6a32b136d0b50c6e14cd4e707029f2',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/MailClientInterface.php' => 
  array (
    'fileHash' => '0de3a04027f498bb0795756627054a762d092b42',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/NovaMailer.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/PHPMailer.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/NovaMailer.php' => 
  array (
    'fileHash' => '0acaa7185139d7e16ae8d2500311fbac2fdfd1b8',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/PHPMailer.php' => 
  array (
    'fileHash' => '9e899d8898342bd05298d582d8e1b90c4bf698bc',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php' => 
  array (
    'fileHash' => '8488dd79ef9f0311e6b1336958f2bb74ca1e3cd7',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Exceptions/MailerException.php' => 
  array (
    'fileHash' => 'e618530d06705793416bd30404aca69faa855ade',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/NovaMailer.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Helpers/Helper.php' => 
  array (
    'fileHash' => '8c01cab8b5419e3b1faeeb3bd87c2d38b8af336e',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/NovaMailer.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php' => 
  array (
    'fileHash' => '4af76c287ec3222b95cb7e63d3353657619ee12f',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Errors/Codes.php' => 
  array (
    'fileHash' => '183d4ddd06b1e262a4a2ce35e1ebf5a34cd685a3',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Errors/Error.php' => 
  array (
    'fileHash' => 'ce4e973778d2fb82972bd238894ec8a4e61e4d8e',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/AppException.php' => 
  array (
    'fileHash' => '45baacb9b3f523733f0f78b504ef43d4d62c9fe2',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Paths.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/Cache.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
      5 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/DotEnv.php',
      6 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Cookie.php',
      7 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Exception/CookieException.php',
      8 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
      9 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
      10 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/PdoDriver.php',
      11 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
      12 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/NovaMailer.php',
      13 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php',
      14 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Exceptions/MailerException.php',
      15 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php',
      16 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/BadMethodCallException.php',
      17 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/ClassException.php',
      18 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/DatabaseException.php',
      19 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/DatabaseLimitException.php',
      20 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/ErrorException.php',
      21 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/FileException.php',
      22 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/InvalidException.php',
      23 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/InvalidObjectException.php',
      24 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/LuminovaException.php',
      25 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/NotFoundException.php',
      26 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/RuntimeException.php',
      27 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/ValidationException.php',
      28 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/ViewNotFoundException.php',
      29 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Escaper.php',
      30 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
      31 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Curl.php',
      32 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
      33 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Exceptions/ClientException.php',
      34 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Exceptions/ConnectException.php',
      35 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Exceptions/RequestException.php',
      36 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Exceptions/ServerException.php',
      37 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Languages/Translator.php',
      38 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Library/Importer.php',
      39 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
      40 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
      41 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Csrf.php',
      42 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/AES.php',
      43 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Smarty.php',
      44 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/BadMethodCallException.php' => 
  array (
    'fileHash' => '214877b42da1b840291b015c142e5e22c537a29d',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Escaper.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Csrf.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/ClassException.php' => 
  array (
    'fileHash' => '8218fb68442a0feb56cc6e3d104cd5dfac6c317a',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/Cache.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/DatabaseException.php' => 
  array (
    'fileHash' => 'df0a11d492fd9184d928b662af090ce2bd32ca39',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/PdoDriver.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/DatabaseLimitException.php' => 
  array (
    'fileHash' => '540fba3e47f796211af0bbcfcde894b9fc121cd6',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/ErrorException.php' => 
  array (
    'fileHash' => 'f156c937d44e036fa99755a16a51581e5cbfb9df',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/AES.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/FileException.php' => 
  array (
    'fileHash' => 'a2fb98b5af38e99fd2f14d67a5be866b84f18cc7',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/DotEnv.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/InvalidException.php' => 
  array (
    'fileHash' => '0cee64f82de5f7f1cb555dc11939856639b47d17',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/AES.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/InvalidObjectException.php' => 
  array (
    'fileHash' => '02e1142c2340e0a2432ffb658a0fa3dd1197c9da',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/LuminovaException.php' => 
  array (
    'fileHash' => '73813b360e88a293581ec4fdb843d215e9968226',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/NotFoundException.php' => 
  array (
    'fileHash' => 'a073d17a2fad47e8634b6ed297117e597f33649f',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Languages/Translator.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/RuntimeException.php' => 
  array (
    'fileHash' => 'a0f85c2adeee0b732cd85c55ceb79ba19b5fe2de',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Paths.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Escaper.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Library/Importer.php',
      5 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/ValidationException.php' => 
  array (
    'fileHash' => '754cfba85296835fd75e22200e6397ef6705ae0a',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/ViewNotFoundException.php' => 
  array (
    'fileHash' => '21e35217512d77f198442d938b9a37815d9c6530',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Document.php' => 
  array (
    'fileHash' => '9a2e6666cc74875dfdc67b20cd7b3ae4c14788fa',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Functions.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Escaper.php' => 
  array (
    'fileHash' => 'ba1ded04d32f4c579098e1654ba3dffa40f13e83',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Files.php' => 
  array (
    'fileHash' => '5f52f95023194075ce7fdf8d3b311de8ccd46c11',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Functions.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php' => 
  array (
    'fileHash' => 'd265f22eeef8e1bef316a0a8ac3218b4df16baad',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Utils/Func.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Functions.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Functions.php' => 
  array (
    'fileHash' => '5251ac82cfafd1bdb017c0c7583af61aa2cbf676',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php' => 
  array (
    'fileHash' => 'a0ef63b60c6613e0ad5d9967998ac9bedf71030d',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Functions.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/MathTrait.php' => 
  array (
    'fileHash' => '3749da35837d993d5813739b3369d4bf4eda1ec1',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php' => 
  array (
    'fileHash' => '4cc587b5d7d82d11218283632a4dbca29f7d8c9b',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Utils/Func.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Functions.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/TorDetector.php' => 
  array (
    'fileHash' => 'de002c40521f2823b5a61c4d266c674df13308c0',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Functions.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/AsyncClientInterface.php' => 
  array (
    'fileHash' => '18687558d42b3e5e4c730acc628d2a311826780b',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/CurlAsyncClient.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/GuzzleAsyncClient.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/NetworkAsync.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Curl.php' => 
  array (
    'fileHash' => 'd8f9758a39b0789e80ffc52e4b57751eb6a9655c',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php' => 
  array (
    'fileHash' => '979869eb8b61611b8a49d8cfb732049ec574b15d',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/CurlAsyncClient.php' => 
  array (
    'fileHash' => '95cb03b9da6bb754ce13c6eb70b9fb180e74e5c4',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Exceptions/ClientException.php' => 
  array (
    'fileHash' => '49b5dde9b73da11c4a9fb548c895570892135a8a',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Curl.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Exceptions/ConnectException.php' => 
  array (
    'fileHash' => 'ed04a72a6f1817f6e3668162feacb8086c5355b8',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Curl.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Exceptions/RequestException.php' => 
  array (
    'fileHash' => 'cb3536aa4affd194fc7aca82a8724bbf0a498826',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Curl.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Exceptions/ServerException.php' => 
  array (
    'fileHash' => '9a171280ed37f9a1d773399b5644a09297b82c3f',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Curl.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/GuzzleAsyncClient.php' => 
  array (
    'fileHash' => '29e0b3309311be0520d7a277b0ba04435767faa0',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Header.php' => 
  array (
    'fileHash' => 'fe2e58d1c3997909dc931e23806231109745d9aa',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/Compress.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/Optimizer.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Request.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Network.php' => 
  array (
    'fileHash' => '2e729e9ac4e60dd79202d0c1f9465389166e18e3',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/NetworkAsync.php' => 
  array (
    'fileHash' => 'ac13f994a317fea0347e25c3d896d7298a0ec042',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/NetworkClientInterface.php' => 
  array (
    'fileHash' => '5af3aec6ee5362dc4ee5a5a31d1c009a239f8abc',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Curl.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Network.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/NetworkRequest.php' => 
  array (
    'fileHash' => 'd48406e28c9b3aa6c2ce1af5309c33a0b33bddb5',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/NetworkAsync.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/NetworkResponse.php' => 
  array (
    'fileHash' => 'c461ea7bd3c0db3ded4db2724bd453245792492e',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Curl.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Network.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/NetworkClientInterface.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Request.php' => 
  array (
    'fileHash' => '510e0454ae1479bd58bcd381d751b12fe5406f86',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseController.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Controllers/ViewController.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Interface/ServicesInterface.php' => 
  array (
    'fileHash' => 'c0938b272fb823310e069cf9880aa999f2a569b3',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Services.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Languages/Translator.php' => 
  array (
    'fileHash' => 'db94a35ba43f8719f640e284a46df0e0fbaeb97d',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Library/Importer.php' => 
  array (
    'fileHash' => '504efbcfd40001d584ce514a4fa911cc758b33aa',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Controllers/ViewController.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Logger/Logger.php' => 
  array (
    'fileHash' => '54f59252e1aa5b5017113e614f4a731808855ead',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/AppException.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Logger/LoggerAware.php' => 
  array (
    'fileHash' => '0436f323af8ff41f66df67a7ac329f038cd388fa',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Logger/NovaLogger.php' => 
  array (
    'fileHash' => '29d12b84dc32673c36c1172e628b9da5fdec0384',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Logger/Logger.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Logger/LoggerAware.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/Session.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Models/Model.php' => 
  array (
    'fileHash' => 'a93b86052d796959a077ddc96ae39f2f2d1cf2b1',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseModel.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Models/PushMessage.php' => 
  array (
    'fileHash' => '41934b7bc1f886609a02b0c2ce1fd7a51901fe76',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php' => 
  array (
    'fileHash' => '930a209e6a3aa3768f912f0f3207f00069258c1b',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php' => 
  array (
    'fileHash' => 'e5b052182488d4be09b4626f2dfb6eda7763c65e',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Bootstrap.php' => 
  array (
    'fileHash' => 'f966b8749a1063b4ba6b19605a29ffbc50cea32f',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php' => 
  array (
    'fileHash' => 'e534231a70b04f1e9f47b5100f10c6ba6fbdd2be',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Csrf.php' => 
  array (
    'fileHash' => 'fa4e9e746bfd8bafeb3b8ef2acc1d045b99eee86',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/AES.php' => 
  array (
    'fileHash' => '2c2cd98bfe88edc7b7bce0bc409c29a442fd21a1',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/EncryptionInterface.php' => 
  array (
    'fileHash' => '250cc0bc03f7d83999f6a812432e5fcea6d7fe17',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/AES.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php' => 
  array (
    'fileHash' => '5179b9f16c2c55ce5b6b3d3e157d6692989dc0cb',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseController.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Controllers/ViewController.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/ValidatorInterface.php' => 
  array (
    'fileHash' => 'bcb73f25d39b1ceed8dd4b405523b4e92dc0374a',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseController.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Controllers/ViewController.php',
      5 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php' => 
  array (
    'fileHash' => 'd3009cfc7d8b70f4efba38c4157c6b890b72fd5f',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/CookieManager.php' => 
  array (
    'fileHash' => '1cb202951c704c2601b7903b4394169327af43e5',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/Session.php' => 
  array (
    'fileHash' => '013529a7d3eb49372ac54e17f03b8d3a954dd3cf',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/SessionInterface.php' => 
  array (
    'fileHash' => '3e542dddd0f2d41dcbe8e5fc3a54b6bc46943262',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/CookieManager.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/Session.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/SessionManager.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/SessionManager.php' => 
  array (
    'fileHash' => '7f6f53e95fbde3a102b58f6b31800d4b092da275',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/Session.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/AwsC3.php' => 
  array (
    'fileHash' => 'da39a3ee5e6b4b0d3255bfef95601890afd80709',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Helper.php' => 
  array (
    'fileHash' => 'd49da18c76d010ba1faa2063236e493ace6427f0',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php' => 
  array (
    'fileHash' => 'fae1c6bce7ba7706a35aa3dca82312e34d346c37',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Uploader.php' => 
  array (
    'fileHash' => 'fa724958a441763aec5c9a5965f1ff85243285bc',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Smarty.php' => 
  array (
    'fileHash' => 'e99cb976e23967eb2483ba9c3120db2b4b31b119',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php' => 
  array (
    'fileHash' => 'f8217ba3042fed9c0175aeadc7b16c8d57275d00',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php' => 
  array (
    'fileHash' => '561bd8edd5300e4e4108955ac1d4a4d0b44ba74e',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseApplication.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseController.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Controllers/ViewController.php',
      5 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php',
      6 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/ViewModel.php' => 
  array (
    'fileHash' => '446cffe76b98743320971345c329a230a55b5e16',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Task.php' => 
  array (
    'fileHash' => '23b6dfa1f6b95f59a54179e2e61b087f501423df',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php' => 
  array (
    'fileHash' => 'a99af9a2a4b869782fecf927ec23fe5c65f11999',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Cookie.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Logger/NovaLogger.php',
      5 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php',
      6 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Task.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Utils/Queue.php' => 
  array (
    'fileHash' => '090aeaac2cfdc49e22b9102a9852e618f012f0a8',
    'dependentFiles' => 
    array (
    ),
  ),
),
	'exportedNodesCallback' => static function (): array { return array (
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Application.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'App\\Controllers\\Application',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseApplication',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var Session $session;
     * protected $session;
    */',
             'namespace' => 'App\\Controllers',
             'uses' => 
            array (
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Config.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'App\\Controllers\\Config\\Config',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseConfig',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Cookie.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'App\\Controllers\\Config\\Cookie',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => true,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'savePath',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The path where session files are stored on the server.
     * @var string $savePath;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'expiration',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The lifetime of the session in seconds.
     * @var int $expiration;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'int',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'cookiePath',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The path to use for the session cookie.
     * @var string $sessionPath;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'cookieDomain',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The domain to use for the session cookie.
     * @var string $sessionDomain;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'sameSite',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the session cookie security level.
     * None, Lax, Strict 
     * @var string $sameSite;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'secure',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     *
     * Cookie will only be set if a secure HTTPS connection exists.
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'httpOnly',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     *
     * Cookie will only be accessible via HTTP(S) (no JavaScript).
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'cookieRaw',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * This flag allows setting a "raw" cookie, i.e., its name and value are
     * not URL encoded using `rawurlencode()`.
     *
     * If this is set to `true`, cookie names should be compliant of RFC 2616\'s
     * list of allowed characters.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#attributes
     * @see https://tools.ietf.org/html/rfc2616#section-2.2
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Files.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'App\\Controllers\\Config\\Files',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => true,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'filePermissions',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Unix file permissions 0755
     * @var int $filePermissions 
    */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'int',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/IPConfig.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'App\\Controllers\\Config\\IPConfig',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
 * This IPConfig class is responsible 
 * for retrieving client ip address information
 * Using a third party api Service like https://ipapi.co or https://iphub.info
*/',
         'namespace' => 'App\\Controllers\\Config',
         'uses' => 
        array (
        ),
         'constUses' => 
        array (
        ),
      )),
       'abstract' => false,
       'final' => true,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'apiProvider',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Specify the IP address information API provide 
     * Available are ipapi and iphub
     * 
     * @var string $apiProvider [\'ipapi\', \'iphub\']
    */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'ipHubVersion',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Specify the IP hub api version 
     * This is valid for iphub only 
     * 
     * @var string $ipHubVersion
    */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'apiKey',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Specify the IP address api key
     * 
     * @var string $apiKey
    */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Paths.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'App\\Controllers\\Config\\Paths',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => true,
       'extends' => 'Luminova\\Base\\BasePaths',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Servers.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'App\\Controllers\\Config\\Servers',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseServers',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'databaseServers',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Optional servers to connect to when main server fails
     * An associative array with each database configuration keys and values.
     * 
     * Supported array keys 
     * @example $databaseServers = [
     *      [
     *          \'port\' => 0,
     *          \'host\' => \'\',
     *          \'version\' => \'mysql\',
     *          \'charset\' => \'utf8\',
     *          \'sqlite_path\' => \'\',
     *          \'username\' => \'root\',
     *          \'password\' => \'\',
     *          \'database\' => \'db_name\',
     *      ],
     *      ...
     * ]
     * 
     * @var array $databaseServers
    */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
              'baseservers' => 'Luminova\\Base\\BaseServers',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Services.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'App\\Controllers\\Config\\Services',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
 * Services methods
 * 
 * @method static ServiceTest  ServiceTest(bool $shared = true, bool $serialize = false)   @return Test
 */',
         'namespace' => 'App\\Controllers\\Config',
         'uses' => 
        array (
          'baseservices' => 'Luminova\\Base\\BaseServices',
          'servicetest' => 'App\\Controllers\\Config\\ServiceTest',
        ),
         'constUses' => 
        array (
        ),
      )),
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseServices',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'bootstrap',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Bootstrap service 
     * 
     * @return void 
    */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
              'baseservices' => 'Luminova\\Base\\BaseServices',
              'servicetest' => 'App\\Controllers\\Config\\ServiceTest',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Session.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'App\\Controllers\\Config\\Session',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => true,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'cookieName',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The name of the session cookie.
     * 
     * @var string $cookieName;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'savePath',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The path where session files are stored on the server.
     * 
     * @var string $savePath;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'expiration',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The lifetime of the session in seconds.
     * 
     * @var int $expiration;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'int',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'sessionPath',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The path to use for the session cookie.
     * 
     * @var string $sessionPath;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'sessionDomain',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The domain to use for the session cookie.
     * 
     * @var string $sessionDomain;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'sameSite',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the session cookie security level.
     * None, Lax, Strict 
     * 
     * @var string $sameSite;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'strictSessionIp',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Enable strict session IP authentication.
     * If set to true, the user will be logged out if their IP address changes.
     * 
     * @var bool $strictSessionIp
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'csrfStorage',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the csrf storage engine 
     * cookie, session, 
     * 
     * @var string $csrfStorage;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Config/Template.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'App\\Controllers\\Config\\Template',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => true,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ENGINE',
               'value' => '\'default\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
   * Application template engine
   * 
   * @var string ENGINE [default, smarty] 
  */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'viewIsolation',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
   * Access template view options as variable and render view in isolation mode
   * If set to true then view array options can be access as variable $name instead of $this->_name
   * And $this keyword won\'t be available to call protected classes registered on App\\Controller\\Application 
   * This will be use $self->name instead of $this->_name.
   * And to make your class discoverable using $self you need to register your class in App\\Controller\\Application 
   * @example $this->export(MyClass::class), $this->export(new MyClass()) or with aliases $this->export(new MyClass(), \'myclass\')
   * 
   * @var bool $viewIsolation 
  */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'variablePrefix',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
   * Disable or enable prefixing variable name with underscore while using $this keyword $this->_name 
   * 
   * @var bool $viewIsolation 
  */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'optimizerFolder',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
   * Application template optimized file directory path
   * 
   * @var string $optimizerFolder 
  */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'smartyCompileFolder',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
   * Holds smarty template compile folder
   * 
   * @var string $smartyCompileFolder 
  */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'smartyConfigFolder',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
   * Holds template config folder
   * 
   * @var string $smartyConfigFolder 
  */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'smartyCacheFolder',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
   * Holds template cache folder
   * 
   * @var string $smartyCacheFolder 
  */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Utils/Func.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'App\\Controllers\\Utils\\Func',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseFunction',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/app/Controllers/Welcome.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'App\\Controllers\\Welcome',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseViewController',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'page',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'info',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/constants.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'root',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Return to the root directory of your project.
     *
     * @param string $directory The directory to start searching for .env
     * @param string $suffix Prepend a path to root directory.
     * 
     * @return string $path + $suffix
     */',
         'namespace' => NULL,
         'uses' => 
        array (
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'string',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'directory',
           'type' => 'string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'suffix',
           'type' => 'string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'env',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Get environment variables.
     *
     * @param string $key The key to retrieve.
     * @param mixed $default The default value to return if the key is not found.
     * 
     * @return mixed
     */',
         'namespace' => NULL,
         'uses' => 
        array (
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'mixed',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'key',
           'type' => 'string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'default',
           'type' => '?mixed',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'setenv',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Set an environment variable if it doesn\'t already exist.
     *
     * @param string $key The key of the environment variable.
     * @param string $value The value of the environment variable.
     * @param bool $add_to_env Save or update to .env file 
     * 
     * @return bool true on success or false on failure.
     */',
         'namespace' => NULL,
         'uses' => 
        array (
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'bool',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'key',
           'type' => 'string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'value',
           'type' => 'string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'add_to_env',
           'type' => 'bool',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/libraries/sys/functions.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'func',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Return Functions instance or a specific context instance.
     *
     * If context is specified, return an instance of the specified context,
     * otherwise return a Functions instance or null.
     * Supported contexts: \'files\', \'ip\', \'document\', \'escape\', \'tor\'.
     *
     * @param string|null $context The context to return instance for.
     * @param mixed ...$params Additional parameters based on context.
     *
     * @return Functions|object|null|string|bool Returns an instance of Functions, 
     *      object, string, or boolean value depending on the context.
     *
     * @throws Exception
     * @throws RuntimeException
     */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'mixed',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'context',
           'type' => '?string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'params',
           'type' => NULL,
           'byRef' => false,
           'variadic' => true,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'kebab_case',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
	 * Convert a string to kebab case.
	 *
	 * @param string $string The input string to convert.
	 * 
	 * @return string The kebab-cased string.
	 */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'string',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'input',
           'type' => 'string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'locale',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
    * Set locale or return local 
    *
    * @param ?string $locale If locale is present it will set it else return default locale
    *
    * @return string|bool;
    */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'string|bool',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'locale',
           'type' => '?string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'is_feature',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
    * Check if feature is enabled in env file 
    *
    * @param string $key Feature key name
    * @param bool $default 
    *
    * @return bool
    */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'bool',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'key',
           'type' => 'string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'default',
           'type' => 'bool',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'escape',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
    * Escapes a string or array of strings based on the specified context.
    *
    * @param string|array $input The string or array of strings to be escaped.
    * @param string $context The context in which the escaping should be performed. Defaults to \'html\'.
    *                        Possible values: \'html\', \'js\', \'css\', \'url\', \'attr\', \'raw\'.
    * @param string|null $encoding The character encoding to use. Defaults to null.
    * 
    * @return mixed The escaped string or array of strings.
    * @throws InvalidArgumentException When an invalid or blank encoding is provided.
    * @throws BadMethodCallException When an invalid context is called
    * @throws RuntimeException When the string is not valid UTF-8 or cannot be converted.
    */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'mixed',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'input',
           'type' => 'string|array',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'context',
           'type' => 'string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'encoding',
           'type' => '?string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'is_tor',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
    * Checks if the given IP address is a Tor exit node
    *
    * @param string|null $ip Ip address to check else use current ip address
    * 
    * @return bool 
    */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'bool',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'ip',
           'type' => 'string|null|null',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'ip_address',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
    * Get user IP address or return ip address information
    *
    * @param bool $ip_info If true return ip address information instead
    * @param array $options Pass additional options to return with IP information
    * 
    * @return string|object|null 
    */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'string|object|null',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'ip_info',
           'type' => 'bool',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'options',
           'type' => 'array',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'is_empty',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Check if values are empty.
     * This will treat 0 as none empty if you want any other thing use php empty function instead
     * 
     * @param mixed ...$values Arguments.
     * 
     * @return bool True if any of the values are empty, false otherwise.
     */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'bool',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'values',
           'type' => 'mixed',
           'byRef' => false,
           'variadic' => true,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'session',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Return session data if key is present else return session instance
     *
     * @param string $key Key to retrieve the data
     *
     * @return mixed|Session|Factory::session
     */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'mixed',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'key',
           'type' => '?string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'cookie',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Create and return cookie instance.
     *
     * @param string $name Name of the cookie
     * @param string $value Value of the cookie
     * @param array  $options Options to be passed to the cookie
     * 
     * @return Cookie
     */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'Luminova\\Cookies\\Cookie',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'name',
           'type' => 'string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'value',
           'type' => 'string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'options',
           'type' => 'array',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'factory',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Returns a shared instance of a class in factory
     * Or factory instance if context is null
     *
     * Same as:
     * @example $config = factory(\'config\')
     * @example $config = \\Luminova\\Application\\Factory::config();
     * @example $config = new \\Luminova\\Config\\Configuration();
     * 
     * @param string|null $context The class name to load
     * @param mixed ...$arguments The last bool argument indicate wether to return a shared instance
     * 
     * @return Factory|mixed
     */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'mixed',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'context',
           'type' => 'string|null|null',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'arguments',
           'type' => NULL,
           'byRef' => false,
           'variadic' => true,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'service',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Returns a shared instance of a class in services
     * Or service instance if context is null
     *
     * Same as:
     * @example $config = service(\'config\')
     * @example $config = \\Luminova\\Application\\Services::config();
     * @example $config = new \\Luminova\\Config\\Configuration();
     * 
     * @param string|null $service The service context name
     * @param mixed ...$arguments The last bool argument indicate wether to return a shared instance
     * 
     * @return Services|mixed
     */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'mixed',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'service',
           'type' => 'string|null|null',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'arguments',
           'type' => NULL,
           'byRef' => false,
           'variadic' => true,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'remove_service',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Delete a service or clear all services
     * If no service name was passed clear all cached instances of services classes.
     * Else delete a specific services instance and clear it\'s cached instances
     * 
     * @param string $service The class name to delete and clear it cached
     * 
     * @return bool 
     */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'bool',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'service',
           'type' => '?string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    13 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'browser',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Tells what the user\'s browser is capable of
     * 
     * @param string|null $user_agent
     * @param bool $return_array If set to true, this function will return an array instead of an object.
     * 
     * @return array|object
     */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'array|object',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'user_agent',
           'type' => '?string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'return_array',
           'type' => 'bool',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    14 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'is_platform',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Tells which platform your application is running on
     * 
     * @param string $os Platform name 
     *      - [mac, windows, linux, freebsd, openbsd, solaris, aws, etc..]
     * 
     * @return bool
     */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'bool',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'os',
           'type' => 'string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    15 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'text2html',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Converts text characters in a string to HTML entities. 
     * 
     * @param string $text A string containing the text to be processed.
     * 
     * @return string $text The processed text with HTML entities.
     */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'string',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'text',
           'type' => '?string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    16 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'nl2html',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Converts newline characters in a string to HTML entities. 
     * This is useful when you want to display text in an HTML textarea while preserving the original line breaks.
     * 
     * @param string $text A string containing the text to be processed.
     * 
     * @return string $text
     */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'string',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'text',
           'type' => '?string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    17 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'import',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
      * Import a custom library into your project 
      * You must place your external libraries in libraries/libs/ directory
      * 
      * @param string $library the name of the library
      * @example Foo/Bar/Baz
      * @example Foo/Bar/Baz.php
      * 
      * @return bool true if the library was successfully imported
      * @throws RuntimeException if library could not be found
     */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'bool',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'library',
           'type' => 'string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    18 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'logger',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Log a message at the given level.
     *
     * @param string $level The log level.
     * - Log levels [\'emergency, alert, critical, error, warning, notice, info, debug, exception, php_errors\']
     * @param string $message The log message.
     * @param array $context Additional context data (optional).
     *
     * @return void
     * @throws InvalidArgumentException
     */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'void',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'level',
           'type' => 'string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'message',
           'type' => 'string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'context',
           'type' => 'array',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    19 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'lang',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Translate multiple languages it supports nested array
     *
     * @param string $lookup line to lookup
     * @param string|null $default Fallback translation if not found
     * @param string|null $locale
     * @param array $placeholders Matching placeholders for translation
     *    - @example array [\'Peter\', \'peter@foo.com] "Error name {0} and email {1}"
     *    - @example array [\'name\' => \'Peter\', \'email\' => \'peter@foo.com] "Error name {name} and email {email}"
     * 
     * 
     * @return string $translation
     * @throws NotFoundException if translation is not found and default is not provided
     */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'string',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'lookup',
           'type' => 'string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'default',
           'type' => '?string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'locale',
           'type' => '?string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'placeholders',
           'type' => 'array',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    20 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'path',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
    * Get directory if context name is null Paths instance will be returned
    * 
    * @param string|null $context Path context name to return [system, plugins, library, controllers, writeable, logs, caches,
    *          public, assets, views, routes, languages, services]
    * 
    * @return string|Paths|Factory::paths 
   */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'string|object',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'context',
           'type' => 'null|string|null',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    21 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'is_nested',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Check if array is a nested array
     * 
     * @param array $array
     * 
     * @return bool 
    */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'bool',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'array',
           'type' => 'array',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    22 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'is_associative',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Check if array is associative
     * 
     * @param array $array
     * 
     * @return bool 
    */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'bool',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'array',
           'type' => 'array',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    23 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'to_array',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Convert an object to an array.
     *
     * @param mixed $input The object to convert to an array.
     * 
     * @return array $array Finalized array representation of the object
     */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'array',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'input',
           'type' => 'mixed',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    24 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'to_object',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Convert an array or string list to json object
     *
     * @param array|string $input Array or String list to convert
     * 
     * @return object $object
     */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'object',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'input',
           'type' => 'array|string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    25 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'list_to_array',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Convert string list to array 
     * 
     * @example list_to_array(\'a,b,c\') => [\'a\', \'b\', \'c\']
     * @example list_to_array(\'"a","b","c"\') => [\'a\', \'b\', \'c\']
     * 
     * @param string $list string list
     * @return array|bool $matches
    */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'array|bool',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'list',
           'type' => 'string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    26 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'list_in_array',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Check if string list exist in array 
     * If any of the list doesn\'t exist in array it will return false
     * First it will have to convert the list to array using list_to_array()
     * 
     * @param string $list string list
     * @param array $array Array to map list to
     * 
     * @return bool exist or not
    */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'bool',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'list',
           'type' => 'string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'array',
           'type' => 'array',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    27 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'is_list',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Check if string is a valid list format
     * 
     * @param string $input string to check
     * @param bool $trim Trim whitespace around the values  
     * 
     * @return bool true or false on failure.
    */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'bool',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'input',
           'type' => 'string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'trim',
           'type' => 'bool',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    28 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'write_content',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Write, append contents to file.
     * @param string $filename — Path to the file where to write the data.
     * @param mixed $content
     * @param int $flags [optional] The value of flags can be any combination of the following flags (with some restrictions), joined with the binary OR (|) operator.
     * @param resource $context [optional] A valid context resource created with stream_context_create.
     * 
     * @return bool true or false on failure.
    */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'bool',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'filename',
           'type' => 'string',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'content',
           'type' => 'mixed',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'flag',
           'type' => 'int',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'context',
           'type' => NULL,
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    29 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'validate',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Validate input fields or get validation instance 
     * Return true or false if input and rules are specified 
     * else return validation instance if NULL is passed on $inputs and $rules
     *
     * @param array $inputs Input fields to validate on 
     *      @example [$_POST, $_GET or $this->request->getBody()]
     * @param array $rules Validation filter rules to apply on each input field 
     *      @example [\'email\' => \'required|email|max|min|length\']
     * @param array $messages Validation error messages to apply on each filter on input field
     *      @example [
     *          \'email\' => [
     *              \'required\' => \'email is required\',
     *              \'email\' => \'Invalid [value] while validating [rule] on [field]\'
     *          ]
     *        }
     * 
     * @return bool|Validator|Factory::validate Return true or false else return validation instance
     */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'bool|object',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'inputs',
           'type' => '?array',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'rules',
           'type' => '?array',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'messages',
           'type' => 'array',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => true,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
    30 => 
    \PHPStan\Dependency\ExportedNode\ExportedFunctionNode::__set_state(array(
       'name' => 'get_class_name',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
     * Get class name from namespace or object
     * 
     * @param string|object $content 
     * 
     * @return string
    */',
         'namespace' => NULL,
         'uses' => 
        array (
          'factory' => 'Luminova\\Application\\Factory',
          'request' => 'Luminova\\Http\\Request',
          'cookie' => 'Luminova\\Cookies\\Cookie',
          'functions' => 'Luminova\\Functions\\Functions',
        ),
         'constUses' => 
        array (
        ),
      )),
       'byRef' => false,
       'returnType' => 'string',
       'parameters' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
           'name' => 'from',
           'type' => 'string|object',
           'byRef' => false,
           'variadic' => false,
           'hasDefault' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Application.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Application\\Application',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
        0 => 'Luminova\\Template\\TemplateTrait',
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'router',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Router class instance
     *
     * @var Router $router
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'router' => 'Luminova\\Routing\\Router',
              'templatetrait' => 'Luminova\\Template\\TemplateTrait',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?Luminova\\Routing\\Router',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize the base application constructor
     *
     * @param string $dir The project root directory
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'router' => 'Luminova\\Routing\\Router',
              'templatetrait' => 'Luminova\\Template\\TemplateTrait',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getView',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current view paths, segments uri
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'router' => 'Luminova\\Routing\\Router',
              'templatetrait' => 'Luminova\\Template\\TemplateTrait',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getBase',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get application base path from router.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'router' => 'Luminova\\Routing\\Router',
              'templatetrait' => 'Luminova\\Template\\TemplateTrait',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the base application instance as a singleton.
     *
     * @param string $dir The project root directory
     * 
     * @return static
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'router' => 'Luminova\\Routing\\Router',
              'templatetrait' => 'Luminova\\Template\\TemplateTrait',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'static',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Factory.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Application\\Factory',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
 * Factory methods classes.
 *
 * @method static Functions           functions(bool $shared = true)                        @return Functions
 * @method static Configuration       config(...$params, bool $shared = true)               @return Configuration
 * @method static Session             session(...$params, bool $shared = true)              @return Session
 * @method static Task                task(...$params, bool $shared = true)                 @return Task
 * @method static Importer            import(...$params, bool $shared = true)               @return Importer
 * @method static Translator          language($locale, bool $shared = true)                @return Translator
 * @method static NovaLogger          logger(string $extension = \'.log\', $shared = true)    @return NovaLogger
 * @method static Paths               paths($shared = true)                                 @return Paths
 * @method static InputValidator      validate($shared = true)                              @return InputValidator
 * @method static Services            services($shared = true)                              @return Services
 */',
         'namespace' => 'Luminova\\Application',
         'uses' => 
        array (
          'configuration' => 'Luminova\\Config\\Configuration',
          'task' => 'Luminova\\Time\\Task',
          'functions' => 'Luminova\\Functions\\Functions',
          'session' => 'Luminova\\Sessions\\Session',
          'importer' => 'Luminova\\Library\\Importer',
          'translator' => 'Luminova\\Languages\\Translator',
          'paths' => 'Luminova\\Application\\Paths',
          'services' => 'App\\Controllers\\Config\\Services',
          'novalogger' => 'Luminova\\Logger\\NovaLogger',
          'inputvalidator' => 'Luminova\\Security\\InputValidator',
          'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
          'throwable' => 'Throwable',
          'reflectionclass' => 'ReflectionClass',
          'reflectionexception' => 'ReflectionException',
          'reflectionmethod' => 'ReflectionMethod',
        ),
         'constUses' => 
        array (
        ),
      )),
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__callStatic',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Dynamically create an instance of the specified factory method class.
     *
     * @param string $context The context or name of the factory.
     * @param array $arguments Parameters to pass to the factory constructor.
     * @param bool $shared The Last parameter to pass to the factory constructor 
     * indicate if it should return a shared instance
     * 
     * @example Factory::method(\'foo\', \'bar\', false)
     * @example Factory::method(false)
     * 
     * @return object|null An instance of the factory class, or null if not found.
     * @throws RuntimeException If failed to instantiate the factory.
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'configuration' => 'Luminova\\Config\\Configuration',
              'task' => 'Luminova\\Time\\Task',
              'functions' => 'Luminova\\Functions\\Functions',
              'session' => 'Luminova\\Sessions\\Session',
              'importer' => 'Luminova\\Library\\Importer',
              'translator' => 'Luminova\\Languages\\Translator',
              'paths' => 'Luminova\\Application\\Paths',
              'services' => 'App\\Controllers\\Config\\Services',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
              'throwable' => 'Throwable',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
              'reflectionmethod' => 'ReflectionMethod',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => '?object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'arguments',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'create',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Create an instance of the specified factory class.
     *
     * @param string $context The context or name of the factory.
     * @param bool $shared Whether the instance should be shared (cached) or not.
     * @param mixed ...$params Parameters to pass to the factory constructor.
     * 
     * @return object|null An instance of the factory class, or null if not found.
     * @throws RuntimeException If failed to instantiate the factory.
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'configuration' => 'Luminova\\Config\\Configuration',
              'task' => 'Luminova\\Time\\Task',
              'functions' => 'Luminova\\Functions\\Functions',
              'session' => 'Luminova\\Sessions\\Session',
              'importer' => 'Luminova\\Library\\Importer',
              'translator' => 'Luminova\\Languages\\Translator',
              'paths' => 'Luminova\\Application\\Paths',
              'services' => 'App\\Controllers\\Config\\Services',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
              'throwable' => 'Throwable',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
              'reflectionmethod' => 'ReflectionMethod',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => '?object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'shared',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'params',
               'type' => NULL,
               'byRef' => false,
               'variadic' => true,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'delete',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Delete a factory and it cached instances
     *
     * @param string $factory Your factory public name 
     * 
     * @return bool
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'configuration' => 'Luminova\\Config\\Configuration',
              'task' => 'Luminova\\Time\\Task',
              'functions' => 'Luminova\\Functions\\Functions',
              'session' => 'Luminova\\Sessions\\Session',
              'importer' => 'Luminova\\Library\\Importer',
              'translator' => 'Luminova\\Languages\\Translator',
              'paths' => 'Luminova\\Application\\Paths',
              'services' => 'App\\Controllers\\Config\\Services',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
              'throwable' => 'Throwable',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
              'reflectionmethod' => 'ReflectionMethod',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'factory',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'add',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Clear cached instances of factory classes.
     *
     * @param string $className Class name to add to factory
     * @param string $name Public identifier name to load the factory
     *          If name is null or empty we use the class name as identifier
     *          Name will be converted to lowercase 
     * 
     * @return bool
     * @throws RuntimeException
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'configuration' => 'Luminova\\Config\\Configuration',
              'task' => 'Luminova\\Time\\Task',
              'functions' => 'Luminova\\Functions\\Functions',
              'session' => 'Luminova\\Sessions\\Session',
              'importer' => 'Luminova\\Library\\Importer',
              'translator' => 'Luminova\\Languages\\Translator',
              'paths' => 'Luminova\\Application\\Paths',
              'services' => 'App\\Controllers\\Config\\Services',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
              'throwable' => 'Throwable',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
              'reflectionmethod' => 'ReflectionMethod',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'className',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'clear',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Clear all cached instances of factory classes.
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'configuration' => 'Luminova\\Config\\Configuration',
              'task' => 'Luminova\\Time\\Task',
              'functions' => 'Luminova\\Functions\\Functions',
              'session' => 'Luminova\\Sessions\\Session',
              'importer' => 'Luminova\\Library\\Importer',
              'translator' => 'Luminova\\Languages\\Translator',
              'paths' => 'Luminova\\Application\\Paths',
              'services' => 'App\\Controllers\\Config\\Services',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
              'throwable' => 'Throwable',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
              'reflectionmethod' => 'ReflectionMethod',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'extenders',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get all classes that extends a base class 
     * 
     * @param string $baseClass The base class to check 
     * 
     * @return array 
    */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'configuration' => 'Luminova\\Config\\Configuration',
              'task' => 'Luminova\\Time\\Task',
              'functions' => 'Luminova\\Functions\\Functions',
              'session' => 'Luminova\\Sessions\\Session',
              'importer' => 'Luminova\\Library\\Importer',
              'translator' => 'Luminova\\Languages\\Translator',
              'paths' => 'Luminova\\Application\\Paths',
              'services' => 'App\\Controllers\\Config\\Services',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
              'throwable' => 'Throwable',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
              'reflectionmethod' => 'ReflectionMethod',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'baseClass',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'services',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get services instance
     * 
     * @return Services 
    */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'configuration' => 'Luminova\\Config\\Configuration',
              'task' => 'Luminova\\Time\\Task',
              'functions' => 'Luminova\\Functions\\Functions',
              'session' => 'Luminova\\Sessions\\Session',
              'importer' => 'Luminova\\Library\\Importer',
              'translator' => 'Luminova\\Languages\\Translator',
              'paths' => 'Luminova\\Application\\Paths',
              'services' => 'App\\Controllers\\Config\\Services',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
              'throwable' => 'Throwable',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
              'reflectionmethod' => 'ReflectionMethod',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'App\\Controllers\\Config\\Services',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'shared',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'initializeServices',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * initialize and Register queued services 
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'configuration' => 'Luminova\\Config\\Configuration',
              'task' => 'Luminova\\Time\\Task',
              'functions' => 'Luminova\\Functions\\Functions',
              'session' => 'Luminova\\Sessions\\Session',
              'importer' => 'Luminova\\Library\\Importer',
              'translator' => 'Luminova\\Languages\\Translator',
              'paths' => 'Luminova\\Application\\Paths',
              'services' => 'App\\Controllers\\Config\\Services',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
              'throwable' => 'Throwable',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
              'reflectionmethod' => 'ReflectionMethod',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'callAll',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Call all public methods within a class 
     * 
     * @param string|object $classInstance
     * @param bool $return return method output
     * 
     * @return array|int 
    */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'configuration' => 'Luminova\\Config\\Configuration',
              'task' => 'Luminova\\Time\\Task',
              'functions' => 'Luminova\\Functions\\Functions',
              'session' => 'Luminova\\Sessions\\Session',
              'importer' => 'Luminova\\Library\\Importer',
              'translator' => 'Luminova\\Languages\\Translator',
              'paths' => 'Luminova\\Application\\Paths',
              'services' => 'App\\Controllers\\Config\\Services',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
              'throwable' => 'Throwable',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
              'reflectionmethod' => 'ReflectionMethod',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array|int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'classInstance',
               'type' => 'string|object',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'return',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Paths.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Application\\Paths',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'system',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $system
    */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'App\\Controllers\\Config\\Files',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'plugins',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $systemPlugins
    */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'App\\Controllers\\Config\\Files',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'library',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $systemPlugins
    */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'App\\Controllers\\Config\\Files',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'services',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $systemPlugins
    */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'App\\Controllers\\Config\\Files',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'controllers',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $controllers
    */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'App\\Controllers\\Config\\Files',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'writeable',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $writeable
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'App\\Controllers\\Config\\Files',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'logs',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $logs
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'App\\Controllers\\Config\\Files',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'caches',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $caches
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'App\\Controllers\\Config\\Files',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'public',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $public 
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'App\\Controllers\\Config\\Files',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'assets',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $assets
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'App\\Controllers\\Config\\Files',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'views',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $views
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'App\\Controllers\\Config\\Files',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'routes',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $routes
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'App\\Controllers\\Config\\Files',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'languages',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $languages
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'App\\Controllers\\Config\\Files',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get path 
     * 
     * @param string $key
     * 
     * @return string $path 
    */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'App\\Controllers\\Config\\Files',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'createDirectory',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Create directory if not exists
     * 
     * @param string $path
     * @param int $permissions 
     * 
     * @return bool true if files existed or was created else false
    */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'App\\Controllers\\Config\\Files',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'permissions',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Application/Services.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Application\\Services',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__callStatic',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Dynamically create an instance of the specified service class.
     * Get shared instance or re-imitate stored instance with a new parameters 
     *
     * @param string $service The context or name of the service.
     * @param array $arguments Param arguments to instigate class with 
     * @param bool $shared Whether the instance should be shared (cached) or not.
     * @param bool $serialize Whether the instance should be serialized and (cached) or not.
     *      - defaults false
     * 
     * @example Services::method(\'foo\')
     * 
     * @return object|null An instance of the service class, or null if not found.
     * @throws RuntimeException If failed to instantiate the service.
    */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'Luminova\\Functions\\Files',
              'paths' => 'Luminova\\Application\\Paths',
              'runtimeexception' => 'RuntimeException',
              'throwable' => 'Throwable',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => '?object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'service',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'arguments',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'has',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if service has a cached instance of class
     *
     * @param string $service The service context or name of the service.
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'Luminova\\Functions\\Files',
              'paths' => 'Luminova\\Application\\Paths',
              'runtimeexception' => 'RuntimeException',
              'throwable' => 'Throwable',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'service',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'delete',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Delete a service and it cached instances
     *
     * @param string $service Your service public name 
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'Luminova\\Functions\\Files',
              'paths' => 'Luminova\\Application\\Paths',
              'runtimeexception' => 'RuntimeException',
              'throwable' => 'Throwable',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'service',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'clear',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Clear all service and cached instance
     *
     * @param string $service Your service public name 
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'Luminova\\Functions\\Files',
              'paths' => 'Luminova\\Application\\Paths',
              'runtimeexception' => 'RuntimeException',
              'throwable' => 'Throwable',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get method instance 
     * 
     * @param string $name
     * 
     * @return ?object $instance Instance or null
    */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'Luminova\\Functions\\Files',
              'paths' => 'Luminova\\Application\\Paths',
              'runtimeexception' => 'RuntimeException',
              'throwable' => 'Throwable',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => '?object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getSharedInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get shared instance 
     * 
     * @param string $name
     * 
     * @return ?object $instance Instance or null
    */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'Luminova\\Functions\\Files',
              'paths' => 'Luminova\\Application\\Paths',
              'runtimeexception' => 'RuntimeException',
              'throwable' => 'Throwable',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => '?object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'add',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add service instance.
     *
     * @param string|object $service Class name or instance of a class 
     * @example \\Namespace\\Utils\\MyClass, MyClass::class or new MyClass()
     * @param arguments ...$arguments Arguments to initialize class with
     * The last param argument should be boolean value to indicate whether shared cached or not
     * @param bool $shared Whether the instance should be shared (cached) or not.
     * @param bool $serialize Whether the instance should be serialized and (cached) or not.
     *      - defaults false
     * 
     * @return object|false Return object instance if shared, false otherwise
     * @throws RuntimeException If service already exist or unable to initiate class 
    */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'Luminova\\Functions\\Files',
              'paths' => 'Luminova\\Application\\Paths',
              'runtimeexception' => 'RuntimeException',
              'throwable' => 'Throwable',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'object|false',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'service',
               'type' => 'string|object',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'arguments',
               'type' => NULL,
               'byRef' => false,
               'variadic' => true,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'newInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Reinstate instance with new contractor arguments
     *
     * @param string $service Service name or class namespace
     * @example \\Namespace\\Utils\\MyClass, MyClass or MyClass::class
     * @param arguments ...$arguments Arguments to initialize class with
     * The last param argument should be boolean value to indicate whether shared cached or not
     * @param bool $shared Whether the instance should be shared (cached) or not.
     * @param bool $serialize Whether the instance should be serialized and (cached) or not.
     *      - defaults false
     * 
     * @return object Return updated class instance
     * @throws RuntimeException If service does not exist or unable to initiate class
     * @throws Throwable 
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'Luminova\\Functions\\Files',
              'paths' => 'Luminova\\Application\\Paths',
              'runtimeexception' => 'RuntimeException',
              'throwable' => 'Throwable',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'service',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'arguments',
               'type' => NULL,
               'byRef' => false,
               'variadic' => true,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Update service instance
     *
     * @param string|object $service Class name or instance of a class 
     * @example \\Namespace\\Utils\\MyClass, MyClass::class or new MyClass()
     * @param bool $initializing Don\'t throw exception if service already exist
     * @param arguments ...$arguments Arguments to initialize class with
     * The last param argument should be boolean value to indicate whether shared cached or not
     * @param bool $shared Whether the instance should be shared (cached) or not.
     * @param bool $serialize Whether the instance should be serialized and (cached) or not.
     *      - defaults false
     * 
     * @return object|bool Return object instance if shared, false otherwise
     * @throws RuntimeException If service already exist or unable to initiate class 
    */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'files' => 'Luminova\\Functions\\Files',
              'paths' => 'Luminova\\Application\\Paths',
              'runtimeexception' => 'RuntimeException',
              'throwable' => 'Throwable',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'object|bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'service',
               'type' => 'string|object',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'initializing',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'arguments',
               'type' => NULL,
               'byRef' => false,
               'variadic' => true,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Arrays/ArrayCountable.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Arrays\\ArrayCountable',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Countable',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * @param array $array
    */',
             'namespace' => 'Luminova\\Arrays',
             'uses' => 
            array (
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'array',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'count',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * @return int array count
    */',
             'namespace' => 'Luminova\\Arrays',
             'uses' => 
            array (
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isNested',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if array is a nested array
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Arrays',
             'uses' => 
            array (
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Arrays/ArrayInput.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Arrays\\ArrayInput',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'parameters',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getParameterOption',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasParameterOption',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getParameters',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getArguments',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getOptions',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Arrays/ArrayObject.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'ArrayObject',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getColumns',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'property',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => 'array|object',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Arrays/Arrays.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Arrays\\Arrays',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'array',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isNested',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if array is a nested array
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Arrays',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseApplication.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Base\\BaseApplication',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => 'Luminova\\Application\\Application',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method getter
     * Get properties from template class 
     *
     * @param string $key property or attribute key
     * 
     * @return ?mixed return property else null
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'application' => 'Luminova\\Application\\Application',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseCommand.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Base\\BaseCommand',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => 'Luminova\\Command\\Terminal',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'group',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $group command group
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'name',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $name command name
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'usage',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string|array $usage command usages
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string|array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'options',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var array<string, mixed> $options command options
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'description',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $description command description
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize terminal instance
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Run a command.
     *
     * @param array<string, mixed> $params
     * 
     * @return int status code 1 or 0
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => true,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'params',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method getter
     *
     * @param string $key property key
     * 
     * @return mixed return property else null
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__isset',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method isset
     * Check if property is set
     *
     * @param string $key property key
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseConfig.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Base\\BaseConfig',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => 'Luminova\\Config\\Configuration',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseController.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Base\\BaseController',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => 'Luminova\\Controllers\\ViewController',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'request',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * HTTP request object 
     * @var Request $request 
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'application' => 'App\\Controllers\\Application',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?Luminova\\Http\\Request',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'validate',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Input validation object 
     * @var InputValidator $validate
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'application' => 'App\\Controllers\\Application',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?Luminova\\Security\\InputValidator',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'app',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
      * Application instance
      * @var Application $app 
     */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'application' => 'App\\Controllers\\Application',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?App\\Controllers\\Application',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize controller instance
     * Make request and validate available global
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'application' => 'App\\Controllers\\Application',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__destruct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Uninitialized controller instance
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'application' => 'App\\Controllers\\Application',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method getter
     *
     * @param string $key property key
     * 
     * @return ?mixed return property else null
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'application' => 'App\\Controllers\\Application',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__isset',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method isset
     * Check if property is set
     *
     * @param string $key property key
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'application' => 'App\\Controllers\\Application',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseFunction.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Base\\BaseFunction',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
        0 => 'Luminova\\Functions\\FunctionTrait',
        1 => 'Luminova\\Functions\\StringTrait',
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'INT',
               'value' => '"int"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'CHAR',
               'value' => '"char"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'STR',
               'value' => '"str"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'SALT',
               'value' => '"salt"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'SID',
               'value' => '"sid"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'UUI',
               'value' => '"uui"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'PASS',
               'value' => '"pass"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseModel.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Base\\BaseModel',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => 'Luminova\\Models\\Model',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method getter
     *
     * @param string $key property key
     * 
     * @return ?mixed return property else null
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'model' => 'Luminova\\Models\\Model',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__isset',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method isset
     * Check if property is set
     *
     * @param string $key property key
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'model' => 'Luminova\\Models\\Model',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BasePaths.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Base\\BasePaths',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => 'Luminova\\Application\\Paths',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServers.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Base\\BaseServers',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'databaseServers',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Optional servers to connect to when main server fails
     * An associative array with each database configuration keys and values.
     * 
     * Supported array keys 
     * @example $databaseServers = [
     *      [
     *          \'port\' => 0,
     *          \'host\' => \'\',
     *          \'version\' => \'mysql\',
     *          \'charset\' => \'utf8\',
     *          \'sqlite_path\' => \'\',
     *          \'username\' => \'root\',
     *          \'password\' => \'\',
     *          \'database\' => \'db_name\',
     *      ],
     *      ...
     * ]
     * 
     * @var array $databaseServers
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'gerDatabaseServers',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the value of the protected property $databaseServers
     *
     * @return array
     */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseServices.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Base\\BaseServices',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => 'Luminova\\Application\\Services',
       'implements' => 
      array (
        0 => 'Luminova\\Interface\\ServicesInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addService',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add instance or class name to service shared instance
     * The last 2 argument should be boolean value to indicate whether shared instance or serialized cached 
     *
     * Usages:
     * @example static::addService(Configuration::class) as $config = service(\'Configuration\')
     * @example static::addService(\'\\Luminova\\Config\\Configuration\') as $config = service(\'Configuration\')
     * @example static::addService(Configuration::class) as $config = service(\'Configuration\')
     * @example static::addService(new Configuration()) as $config = service(\'Configuration\')
     * @example Services::Configuration()
     * 
     * @param string|object $classOrInstance Class name or instance of a class
     * @param arguments ...$arguments Arguments to initialize class with.
     * @param bool $shared — Whether the instance should be shared (cached) or not, default true
     * @param bool $serialize Whether the instance should be serialized and (cached) or not, default false.
     * 
     * @return object|false  Return object instance if shared, false otherwise
     * @throws RuntimeException If service already exist or unable to initiate class
     */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'services' => 'Luminova\\Application\\Services',
              'servicesinterface' => 'Luminova\\Interface\\ServicesInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'classOrInstance',
               'type' => 'string|object',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'arguments',
               'type' => NULL,
               'byRef' => false,
               'variadic' => true,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getServices',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get queued services 
     * 
     * @return array 
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'services' => 'Luminova\\Application\\Services',
              'servicesinterface' => 'Luminova\\Interface\\ServicesInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Base/BaseViewController.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Base\\BaseViewController',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => 'Luminova\\Controllers\\ViewController',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize controller instance
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__destruct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Uninitialized controller instance
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method getter
     *
     * @param string $key property key
     * 
     * @return ?mixed return property else null
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__isset',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method isset
     * Check if property is set
     *
     * @param string $key property key
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/Cache.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Cache\\Cache',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'FILE',
               'value' => '"FileCache"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * Engin type for file cache
    * @var string FILE
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecache' => 'Luminova\\Cache\\FileCache',
              'memorycache' => 'Luminova\\Cache\\MemoryCache',
              'classexception' => 'Luminova\\Exceptions\\ClassException',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'MEM',
               'value' => '"MemoryCache"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * Engin type for Memcached
    * @var string MEM
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecache' => 'Luminova\\Cache\\FileCache',
              'memorycache' => 'Luminova\\Cache\\MemoryCache',
              'classexception' => 'Luminova\\Exceptions\\ClassException',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'engine',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * Engin instance
    * @var object $engine
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecache' => 'Luminova\\Cache\\FileCache',
              'memorycache' => 'Luminova\\Cache\\MemoryCache',
              'classexception' => 'Luminova\\Exceptions\\ClassException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * Cache constructor.
    *
    * @param string $engine The cache engine to use (e.g., self::FILE or self::MEM).
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecache' => 'Luminova\\Cache\\FileCache',
              'memorycache' => 'Luminova\\Cache\\MemoryCache',
              'classexception' => 'Luminova\\Exceptions\\ClassException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'engine',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get an instance of the cache engine.
     * @param string $engine The cache engine to use (e.g., self::FILE or self::MEM).
     * 
     * @return self self::$instance The cache engine instance.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecache' => 'Luminova\\Cache\\FileCache',
              'memorycache' => 'Luminova\\Cache\\MemoryCache',
              'classexception' => 'Luminova\\Exceptions\\ClassException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'engine',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/Compress.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Cache\\Compress',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'JSON',
               'value' => '"application/json;"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	* holds json content type
	* @var string JSON
	*/',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'TEXT',
               'value' => '"text/plain;"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	* holds text content type
	* @var string TEXT
	*/',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'HTML',
               'value' => '"text/html;"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	* holds html content type
	* @var string HTML
	*/',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'XML',
               'value' => '\'application/xml\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	* holds xml content type
	* @var string XML
	*/',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Class constructor.
     * Initializes default settings for the response headers and cache control.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'useGzip',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Enable or disable Gzip compression.
     *
     * @param bool $gzip Enable Gzip compression (true) or disable it (false).
     * @return Compress Returns the class instance for method chaining.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'gzip',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setExpires',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the expiration offset for the Cache-Control header.
     *
     * @param int $offset Cache expiration offset in seconds.
     * @return Compress Returns the class instance for method chaining.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'offset',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setCacheControl',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the Cache-Control header.
     *
     * @param string $cacheControl Cache-Control header value.
     * @return Compress Returns the class instance for method chaining.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cacheControl',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setCompressionLevel',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * sets compression level
     *
     * @param int $level Level
     * @return Compress $this
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'level',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setIgnoreCodeblock',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * sets ignore user code block
     *
     * @param bool $ignore
     * @return Compress Returns the class instance for method chaining.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'ignore',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'allowCopyCodeblock',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * sets allow copy code block
     *
     * @param bool $allow
     * @return self Returns the class instance for method chaining.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'allow',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCompressed',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get compressed content
     * @return mixed compressed content $this->compressedContent
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMinified',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get minified content
     * @return string minified content $this->minifiedContent
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'compress',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Compresses the buffer content and adds necessary headers to optimize the response.
     *
     * @param string|array|object $data The content to compress (can be an array or object for JSON response).
     * @param string $contentType The expected content type for the response.
     * @return string The compressed content for output.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'contentType',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInfo',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get page header information
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'html',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send the output in HTML format.
     *
     * @param string|array|object $body The content body to be sent in the response.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'body',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'text',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send the output in text format.
     *
     * @param string|array|object $body The content body to be sent in the response.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'body',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'xml',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send the output in XML format.
     *
     * @param string|array|object $body The content body to be sent in the response.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'body',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'json',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send the output in JSON format.
     *
     * @param string|array|object $body The content body to be sent in the response.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'body',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send the output based on the specified content type.
     *
     * @param string|array|object $body The content body to be sent in the response.
     * @param string $contentType The expected content type for the response.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'body',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'contentType',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'end',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * End output buffering and send the response.
     *
     * @param string $contentType The expected content type for the response.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'contentType',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'startMinify',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Start output buffering and minify the content by removing unwanted tags and whitespace.
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'minify',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Minify the given content by removing unwanted tags and whitespace.
     *
     * @param string $content The content to minify.
     * @return string minified content.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'content',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'minifyIgnoreCodeblock',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Minify the given content by removing unwanted tags and whitespace.
     * Ignore html <code></code> block
     * @param string $content The content to minify.
     * @return string minified content.
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'content',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'allowCopy',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCache.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Cache\\FileCache',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'TTL_7DAYS',
               'value' => '7 * 24 * 60 * 60',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Cache expiry time 7 days
     * @var int TTL_7DAYS constant
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'TTL_24HR',
               'value' => '24 * 60 * 60',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Cache expiry time 24 hours
     * @var int TTL_24HR constant
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'TTL_30MIN',
               'value' => '30 * 60',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Cache expiry time 30 minutes 
     * @var int TTL_30MIN constant
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'PHP',
               'value' => '".catch.php"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Hold the cache extension type PHP
     * @var string PHP constant
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'JSON',
               'value' => '".json"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Hold the cache extension type JSON
     * @var string JSON constant
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'TEXT',
               'value' => '".txt"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Hold the cache extension TEXT
     * @var string TEXT constant
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor.
     * 
     * @param string $filename cache storage filename to hash
     * @param string $folder cache storage sub folder.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'folder',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get static Singleton Class.
     * 
     * @param string $storage cache storage filename to hash
     * @param string $folder cache storage sub folder.
     * 
     * @param static $instance Instance
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'static',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'folder',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setPath',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the new cache directory path
     * @param string $path cache directory must end with 
     * 
     * @return self $this
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the new cache file name.
     * 
     * @param string $name cache filename hash value
     * 
     * @return self $this
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hashStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Generate hash name for cache 
     * 
     * @param string $name cache filename to hash
     * 
     * @return string hashed name with prefix
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setExtension',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the cache file extension type
     * 
     * @param string $extension 
     * 
     * @return self $this
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'extension',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setExpire',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the expiration time of the cache item.
     *
     * @param DateTimeInterface|null $expiration The expiration time of the cache item.
     * @return static The current instance.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'static',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expiration',
               'type' => 'DateTimeInterface|int|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'expiresAfter',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the expiration time of the cache item relative to the current time.
     *
     * @param int|DateInterval|null $time The expiration time in seconds or as a DateInterval.
     * @return static The current instance.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'static',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'time',
               'type' => 'int|DateInterval|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setLock',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the cache lock
     * 
     * @param bool $lock lock catch to avoid deletion even when cache time expire
     * 
     * @return self $this
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'lock',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'enableBase64',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Enable the cache to store data in base64 encoded.
     * 
     * @param bool $encode true or false
     * 
     * @return self $this
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'encode',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'enableDeleteExpired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Enable the cache delete expired data
     * 
     * @param bool $allow true or false
     * 
     * @return self $this
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'allow',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'enableSecureAccess',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Enable the cache to store secure data in php file extension.
     * 
     * @param bool $secure true or false
     * 
     * @return self $this
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'secure',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPath',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Gets Combines directory, filename and extension into a full filepath
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'onExpired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Loads, create, update and delete cache with fewer options
     * 
     * @param string $key cache key
     * @param callable $callback Callback called when data needs to be refreshed.
     * 
     * @return mixed Data currently stored under key
     * @throws ErrorException if the file cannot be saved
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'refresh',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Loads, create, update and delete cache with full options
     * 
     * @param string $key cache key
     * @param callable $callback Callback called when data needs to be refreshed.
     * @param int $expiration cache expiry time
     * @param int $expireAfter cache expiry time after
     * @param bool $lock lock catch to avoid deletion even when cache time expire
     * 
     * @return bool
     * @throws ErrorException if the file cannot be saved
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'content',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expiration',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expireAfter',
               'type' => 'int|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            4 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'lock',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getItem',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get cache content from disk
     * 
     * @param string $key cache key
     * 
     * @return mixed  returns data if $key is valid and not expired, NULL otherwise
     * @throws ErrorException if the file cannot be saved
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'onlyContent',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'create',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Creates, Reloads and retrieve cache once class is created
     * 
     * @return self $this
     * @throws ErrorException if there is a problem loading the cache
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasItem',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Checks if cache key exist
     * 
     * @param string $key cache key
     * 
     * @return bool true or false
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'deleteIfExpired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Remove expired cache by key
     * 
     * @return int number of deleted keys
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'deleteItem',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Deletes data associated with $key
     * 
     * @param string $key cache key
     * 
     * @return bool true or false
     * @throws ErrorException if the file cannot be saved
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'deleteItems',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Delete cache by array keys
     * @param iterable $keys array cache keys
     * 
     * @return bool 
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'keys',
               'type' => 'iterable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'removeList',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Deletes data associated array of keys
     * 
     * @param iterable $array cache keys
     * 
     * @return Generator
     * @throws ErrorException if the file cannot be saved
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Generator',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'array',
               'type' => 'iterable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasExpired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Checks if the cache timestamp has expired by key
     * 
     * @param string $key cache key
     * 
     * @return bool true or false
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setItem',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Builds cache data to save
     * 
     * @param string $key cache keys
     * @param mixed $data cache data
     * @param int|DateTimeInterface|null $expiration cache expiration time
     * @param int|DateInterval|null $expireAfter cache expiration time after
     * @param bool $lock cache lock expiry deletion
     * 
     * @return bool
     * @throws ErrorException if the file cannot be saved
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expiration',
               'type' => 'int|DateTimeInterface|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expireAfter',
               'type' => 'int|DateInterval|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            4 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'lock',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'ttlToSeconds',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Convert DateInterval to seconds.
     * 
     * @param DateInterval|DateTimeInterface $ttl Time 
     * 
     * @return int seconds.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'ttl',
               'type' => 'DateInterval|DateTimeInterface|int|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        31 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'clear',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Wipes clean the entire cache\'s.
     * 
     * @return bool
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        32 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'clearStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Remove cache file
     * 
     * @return bool true if file path exist else false
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        33 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'deleteStorageDisk',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Remove cache file from disk with full path
     * 
     * @param string $path cache full path /
     * @param array $filenames cache file array names
     * @param string $extension cache file extension type
     * 
     * @return bool
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
              'datetimeinterface' => 'DateTimeInterface',
              'dateinterval' => 'DateInterval',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'filenames',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'extension',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/FileCacheItem.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Cache\\FileCacheItem',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setExpiry',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the expiration time for the cache item.
     *
     * @param int $expiry The expiration time in seconds.
     * @return self
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expiry',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setLock',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the lock status for the cache item.
     *
     * @param bool $lock The lock status (true for locked, false for unlocked).
     * @return self
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'lock',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setData',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the data for the cache item.
     *
     * @param mixed $data The data to be cached.
     * @return self
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getExpiry',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the expiration time of the cache item.
     *
     * @return int The expiration time in seconds.
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getLock',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the cache item is locked.
     *
     * @return bool The lock status (true if locked, false if unlocked).
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getData',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the data stored in the cache item.
     *
     * @return mixed The cached data.
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/MemoryCache.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Cache\\MemoryCache',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * MemoryCache constructor.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setConfig',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set Memcached server configuration.
     *
     * @param string $host Memcached server host.
     * @param int $port Memcached server port.
     * 
     * @return self
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'host',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'port',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addConfig',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set Memcached server configuration from an array.
     *
     * @param array $config Memcached server configuration array.
     * @return self
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'config',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'connect',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize the Memcached engine with the configured servers.
     *
     * @return self
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setExpire',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the cache expiration time duration in seconds.
     *
     * @param int $time Cache expiration time in seconds.
     * 
     * @return self
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'time',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'onExpired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Retrieve cached data or generate it using a callback if not found.
     *
     * @param string $key Cache key.
     * @param callable $cacheCallback Callback function to generate the data.
     * 
     * @return mixed Cached or generated data.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cacheCallback',
               'type' => 'callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'withExpired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Retrieve cached data or generate it using a callback if not found with a custom expiration time.
     *
     * @param string $key Cache key.
     * @param callable $cacheCallback Callback function to generate the data.
     * @param int $expiration Custom cache expiration time in seconds.
     * 
     * @return mixed Cached or generated data.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cacheCallback',
               'type' => 'callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expiration',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'writeCache',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Write data to the cache with a custom expiration time.
     *
     * @param string $key Cache key.
     * @param mixed $value Data to be cached.
     * @param int $expiration Cache expiration time in seconds.
     * @return bool True on success, false on failure.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expiration',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'remove',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Remove data associated with a cache key.
     *
     * @param string $key Cache key to remove.
     * @return bool True on success, false on failure.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'removeList',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Remove data associated with an array of cache keys.
     *
     * @param array $array Array of cache keys to remove.
     * @return void
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'array',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'clearCache',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Clear the entire cache.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'close',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Close the Memcached connection.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cache/Optimizer.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Cache\\Optimizer',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Class constructor.
     *
     * @param int $expiration The expiration time for cached files in seconds (default: 24 hours).
     * @param string $cacheDir The directory where cached files will be stored (default: \'cache\').
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expiration',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cacheDir',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setExpiry',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set Optimizer expiry ttl 
     * @param int $expiration The expiration time for cached files in seconds (default: 24 hours).
     * 
     * @return self 
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expiration',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setDirectory',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set Optimizer directory
     * @param string $cacheDir The directory where cached files will be stored (default: \'cache\').
     * 
     * @return self 
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cacheDir',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCacheLocation',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the file path for the cache based on the current request URI.
     *
     * @param string $extension file extension
     * 
     * @return string The file path for the cache.
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'extension',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCacheFilepath',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the cache directory path.
     *
     * @return string The cache directory path.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasCache',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the cached file is still valid based on its expiration time.
     *
     * @return bool True if the cache is still valid; false otherwise.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getFileTime',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the formatted file modification time.
     *
     * @return string Formatted file modification time.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCache',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Load the content from the cache file and exit the script.
     * 
     * @return bool True if loading was successful; false otherwise.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'info',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'saveCache',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Save the content to the cache file.
     *
     * @param string $content The content to be saved to the cache file.
     * @param string $info Framework copyright information
     *
     * @return bool True if saving was successful; false otherwise.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'content',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'info',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cacheData',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getKey',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the cache key.
     *
     * @return string The cache key.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setKey',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the cache key.
     *
     * @param string $key The key to set.
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Colors.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\Colors',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'foregroundColors',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Text Foreground color list
     *
     * @var array<string, string>
     */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'backgroundColors',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Text Background color list
     *
     * @var array<string, string>
     */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'apply',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the given text with the correct color codes for a foreground and
     * optionally a background color.
     *
     * @param string $text Text to color
     * @param int|null $format Optionally apply text formatting.
     * @param string $foreground Foreground color name
     * @param string|null $background Optional background color name
     * 
     *
     * @return string A colored text if color is supported
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'format',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'foreground',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'background',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Commands.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\Commands',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Run console command
     * @param Terminal $cli novakit cli instance
     * @param array $options Command options
     * 
     * @return int
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'server' => 'Luminova\\Command\\Novakit\\Server',
              'help' => 'Luminova\\Command\\Novakit\\Help',
              'lists' => 'Luminova\\Command\\Novakit\\Lists',
              'database' => 'Luminova\\Command\\Novakit\\Database',
              'generators' => 'Luminova\\Command\\Novakit\\Generators',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cli',
               'type' => 'Luminova\\Command\\Terminal',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCommand',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'command',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'has',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'command',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'command',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Console.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\Console',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize console instance
     * 
     * @param bool $noHeader Suppress header if no header is detected
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'terminal' => 'Luminova\\Command\\Terminal',
              'commands' => 'Luminova\\Command\\Commands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'noHeader',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getTerminal',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get novakit static CLI instance 
     * 
     * @return Terminal
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'terminal' => 'Luminova\\Command\\Terminal',
              'commands' => 'Luminova\\Command\\Commands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'Luminova\\Command\\Terminal',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Run CLI
     * @param array $commands commands to execute
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'terminal' => 'Luminova\\Command\\Terminal',
              'commands' => 'Luminova\\Command\\Commands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'commands',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/AvailableCommands.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\Novakit\\AvailableCommands',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'commands',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The found commands.
     *
     * @var array
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCommands',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'has',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'command',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Database.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\Novakit\\Database',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseCommand',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'group',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $group command group
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'basecommand' => 'Luminova\\Base\\BaseCommand',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'name',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $name command name
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'basecommand' => 'Luminova\\Base\\BaseCommand',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'options',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Options
     *
     * @var array<string, string>
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'basecommand' => 'Luminova\\Base\\BaseCommand',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @param array $options terminal options
     * 
     * @return int 
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'basecommand' => 'Luminova\\Base\\BaseCommand',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'params',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Generators.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\Novakit\\Generators',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseCommand',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'group',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $group command group
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'closure' => 'Closure',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'name',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $name command name
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'closure' => 'Closure',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'options',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Options
     *
     * @var array<string, string>
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'closure' => 'Closure',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'usages',
          ),
           'phpDoc' => NULL,
           'type' => 'string|array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'description',
          ),
           'phpDoc' => NULL,
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @param array $options terminal options
     * 
     * @return int 
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'closure' => 'Closure',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Help.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\Novakit\\Help',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseCommand',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'group',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $group command group
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'name',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $name command name
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'options',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Options
     *
     * @var array<string, string>
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @param array $params terminal options
     * 
     * @return int 
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'params',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Lists.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\Novakit\\Lists',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseCommand',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'group',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $group command group
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'textutils' => 'Luminova\\Command\\TextUtils',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'name',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $name command name
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'textutils' => 'Luminova\\Command\\TextUtils',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'options',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Options
     *
     * @var array<string, string>
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'textutils' => 'Luminova\\Command\\TextUtils',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'usages',
          ),
           'phpDoc' => NULL,
           'type' => 'string|array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @param array $params terminal options
     * 
     * @return int 
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'textutils' => 'Luminova\\Command\\TextUtils',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'params',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'listCommands',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Novakit/Server.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\Novakit\\Server',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseCommand',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'group',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $group command group
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'name',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $name command name
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'options',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Options
     *
     * @var array<string, string> $options
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @param array $params terminal options
     * 
     * @return int 
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'params',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/Terminal.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\Terminal',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'height',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Height of terminal visible window
     *
     * @var int|null $height
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'width',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Width of terminal visible window
     *
     * @var int|null $width
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'isReadline',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Is the readline library on the system?
     *
     * @var bool
     */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'waitMessage',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Prompt message display 
     *
     * @var string $waitMessage
     */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'isNewline',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Write in a new line enabled
     *
     * @var bool $isNewline
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'isColored',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Is colored text supported
     *
     * @var bool $isColored
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'commandsOptions',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Passed command line arguments
     * And infos about command
     *
     * @var array $commandsOptions
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'waiting',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Show a waiting countdown, intentionally freeze screen while waiting
     * Or ask user for a key press to continue.
     * 
     * Examples
     * 
     * @example $this->waiting(20, true); show waiting for 20 seconds with countdown message
     * @example $this->waiting(0, false); show waiting message till user press any key
     * @example $this->waiting(20, false); show waiting for 20 seconds with a freezed screen
     *
     * @param int  $seconds Number of seconds for waiting
     * @param bool $countdown Show waiting countdown
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'seconds',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'countdown',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'progress',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Displays a progress bar on the CLI.
     * Progress should be called in a loop
     * Or use progressWatch()
     * 
     * Examples 
     * 
     * @example $this->progress(1, 10, true); Show progress bar line with beep when completed
     * @example $this->progress(1, 10, false); Show progress bar line without beep when completed
     *
     * @param int|bool $progressLine Current loop index number or false to terminate the progress bar
     * @param int|null $progressCount Total count of progress bar to show or null to on termination
     * @param bool $beep Beep when progress is completed, default is true
     *
     * @return float|int
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int|float',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'progressLine',
               'type' => 'int|bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'progressCount',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'beep',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'progressWatch',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Displays a progress bar on the CLI with a callback functions
     * Progress shouldn\'t be called in a loop
     * You can pass your function to execute in $stepCallback callback function
     * This is useful when you just want to display a progress bar 
     * and execute next method when it finished
     *
     * Examples 
     * 
     * @example $this->progressWatch(100, $onFinish, $onProgress, true) Show 100 lines of progress bar with a callbacks and beep on finish
     * 
     * @param int $progressCount Total count of progress bar to show
     * @param ?callable $onFinish Execute callback when progress finished
     * @param ?callable $onProgress Execute callback on each progress step
     * @param bool $beep Beep when progress is completed, default is true
     *
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'progressCount',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'onFinish',
               'type' => '?callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'onProgress',
               'type' => '?callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'beep',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'beeps',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Beeps a certain number of times.
     *
     * Examples
     * 
     * @example $this->beeps(1) Beep once 
     * 
     * @param int $num The number of times to beep
     *
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'num',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'prompt',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Prompt for user for input.
     * Pass options as an array ["YES", "NO]
     * You can make a colored options by use the array key for color name ["green" => "YES","red" => "NO"]
     *
     * Examples
     *
     * @example $name = $this->prompt(\'What is your name?\'); Prompt user to enter their name
     * @example $color = $this->prompt(\'Are you sure you want to continue?\', ["green" => "YES","red" => "NO"]); Prompt user to choose any option and specify each option color in array key
     * @example $color = $this->prompt(\'What is your gender?\', [\'male\',\'female\']); Prompt user to select their gender, no colored text will be used
     * @example $email = $this->prompt(\'Are you sure you want to continue?\', ["YES", "NO], \'required|in_array(YES,NO)\'); Prompt user to choose any option and pass a validation
     *
     * @param string $message Prompt message
     * @param array $options  Options to prompt selection, 
     * @param string|null $validations Validation rules
     *
     * @return string The user input
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'validations',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'silent',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'chooser',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Prompt multi choice selection
     * Display array index key as the option identifier to select.
     * If you use associative array users will still see index key instead
     * 
     * Examples
     *
     * @example $array = $this->chooser(\'Choose your programming languages?\', [\'PHP\', \'JAVA\', \'SWIFT\', \'JS\', \'SQL\', \'CSS\', \'HTML\']); Prompt multiple chooser, using PHP as default if user didn\'t select anything before hit return.
     * @example $array = $this->chooser(\'Choose your programming languages?\', [\'PHP\', \'JAVA\', \'SWIFT\', \'JS\', \'SQL\', \'CSS\', \'HTML\'], true); Prompt multiple chooser, persisting that user must choose an option
     *
     *
     * @param string $text  Display text description for your multiple options
     * @param array  $options A list of options [\'male\' => \'Male\', \'female\' => \'Female] or [\'male\', \'female\']
     * @param bool $required Require user to choose any option else the first array will be return as default
     *
     * @return array<string|int, mixed> $options The selected array keys and values
     */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'required',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'wrap',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Wrap it with padding left and width to a maximum

     * @param string|null $string string to write
     * @param int $max maximum width
     * @param int $leftPadding left padding
     * 
     * @return string $lines
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'max',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'leftPadding',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getWidth',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Attempts to determine the width of the viewable CLI window.
     * 
     * @return int static::$width or fallback to default
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getHeight',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Attempts to determine the height of the viewable CLI window.
     * 
     * @return int static::$height or fallback to default
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getVisibleWindow',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the visible CLI width and height.
     *
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'input',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get input from the shell, using readline or the standard STDIN
     *
     * Named options must be in the following formats:
     * php index.php user -v --v -name=John --name=John
     *
     * @param string|null $prefix You may specify a string with which to prompt the user.
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'prefix',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validate',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Input validation on prompts
     *
     * @param string $value Input value
     * @param array $rules Validation rules
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rules',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'error',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Display error text on CLI 
     *
     * @param string $text Error message
     * @param string|null $foreground Foreground color name
     * @param string|null $background Optional background color name
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'foreground',
               'type' => 'string|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'background',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'writeln',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Print text to CLI with newline.
     * 
     * @param string $text Text to display
     * @param string|null $foreground Optional foreground color name
     * @param string|null $background Optional background color name
     *
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'foreground',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'background',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'write',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Print text to CLI without a newline.
     * 
     * @param string $text Text to display
     * @param string|null $foreground Optional foreground color name
     * @param string|null $background Optional background color name
     *
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'foreground',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'background',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'print',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Echo / output text if
     *
     * @param string $text string to output
     * @param string|null $foreground Optional foreground color name
     * @param string|null $background Optional background color name
     *
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'foreground',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'background',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fwrite',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Write text to resource handler or output text if not in cli mode
     *
     * @param string $text string to output or write
     * @param resource $handle resource handler
     *
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'handle',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'clear',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Clears the screen of output
     *
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'wipeout',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Clears cli output to update new text
     *
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'color',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the given text with the correct color codes for a foreground and
     * optionally a background color.
     *
     * @param string $text Text to color
     * @param string $foreground Foreground color name
     * @param string|null $background Optional background color name
     * @param int|null $format Optionally apply text formatting.
     *
     * @return string A colored text if color is supported
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'foreground',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'background',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'format',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'newLine',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Create a new line 
     *
     * @param int $count Count of new lines to create
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'count',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'streamSupports',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Checks whether the current stream resource supports or
     * refers to a valid terminal type device.
     *
     * @param string $function Function name to check
     * @param resource $resource Resource to handle STDIN/STDOUT
     * 
     * @return bool if the stream resource is supported
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'function',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'resource',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'registerCommands',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Register command line queries to static::$options and run it
     * This method is being called in router to parse commands
     * 
     * @param array $values arguments 
     * @param bool $run run command after it has been registered 
     * 
     * @return int
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'run',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        31 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'parseCommands',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Parse command line queries to static::$options
     * 
     * @param array $arguments arguments $_SERVER[\'argv\']
     * 
     * @return array<string, mixed>
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'arguments',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        32 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getRequestCommands',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current command controller views
     * @return array $views
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        33 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getArgument',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get command argument by index number
     * 
     * @param int $index
     * 
     * @return string|null|int
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        34 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getArguments',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get command arguments
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        35 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCommand',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get command name
     * 
     * @return string|null
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => '?string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        36 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCaller',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get command caller command string
     * The full passed command, options and arguments 
     * 
     * @return string|null
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => '?string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        37 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getOption',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get options value 
     * 
     * @param string $name
     * 
     * @return null|string|int
     */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        38 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getOptions',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the array of options.
     * 
     * @return array static::$options[\'options\']
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        39 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getQuery',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Gets a single query command-line by name.
     * If it doesn\'t exists return null
     *
     * @param string $name Option key name
     * 
     * @return string|array|null
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        40 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getQueries',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the raw array of requested query commands.
     * 
     * @return array static::$commandsOptions
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        41 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isCommandLine',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Is CLI?
     *
     * Test to see if a request was made from the command line.
     *
     * @return bool
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        42 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isColorSupported',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the stream resource supports colors.
     *
     * @param resource $resource STDIN/STDOUT
     * @return bool 
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'resource',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        43 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isMacTerminal',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Checks whether the current terminal is mac terminal
     *
     * @return bool 
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        44 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isWindowsTerminal',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Checks whether the stream resource on windows is terminal
     *
     * @param resource $resource STDIN/STDOUT
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'resource',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        45 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasCommand',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Checks whether system has requested command
     *
     * @param string $command
     * @param array $options
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'command',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        46 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'printHelp',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Print help
     *
     * @param array $help
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'help',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        47 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getStatusCode',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Gets request status code [1, 0]
     * @param void|bool|null|int $result response from callback function
     * @return int
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'result',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        48 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'header',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Print Command line header information
     * @param string $version framework cli version number
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'version',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        49 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'phpScript',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the PHP script path.
     *
     * @return string
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/TerminalGenerator.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\TerminalGenerator',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => 'Luminova\\Command\\Terminal',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Command/TextUtils.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\TextUtils',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ANSI_RESET',
               'value' => '0',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ANSI_BOLD',
               'value' => '1',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ANSI_ITALIC',
               'value' => '3',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ANSI_UNDERLINE',
               'value' => '4',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ANSI_STRIKETHROUGH',
               'value' => '9',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'leftPad',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Pads string left
     *
     * @param string $text string to pad
     * @param int $max maximum padding 
     * @param string $char Padding character
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'length',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'char',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'rightPad',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Pads string right
     *
     * @param string $text string to pad
     * @param int $max maximum padding 
     * @param string $char Padding character
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'max',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'char',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'padding',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Pads string to fit same length
     *
     * @param string $text string to pad
     * @param int $max maximum padding 
     * @param int $extra How many extra spaces to add at the end
     * @param int $index index of
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'max',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'extra',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'indent',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'strlen',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the length of characters in a string and ignore styles 
     *
     * @param string $string Optional string
     * @param string $encoding Text encoding
     * 
     * @return int The number of characters in the string
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'encoding',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'style',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Apply style format on text string
     *
     * @param string $text Text to style
     * @param int|null $format  Style to apply text.
     * @param bool $formatted Return a formatted string or string with style code
     * 
     *
     * @return string A style formatted ansi string 
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'format',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'formatted',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasAnsiMethod',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if text already has ANSI method in place
     * 
     * @param string $text Text string
     * 
     * @return bool true or false
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/BaseComposer.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Composer\\BaseComposer',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseConfig',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'progress',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @param int $totalSteps
     * @param callable $taskCallback
     * @param callable|null $onCompleteCallback
     * @param string $completionMessage
    */',
             'namespace' => 'Luminova\\Composer',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'totalSteps',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'taskCallback',
               'type' => 'callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'onCompleteCallback',
               'type' => '?callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'completionMessage',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'parseLocation',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isParentOrEqual',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path1',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path2',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Builder.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Composer\\Builder',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Composer\\BaseComposer',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'buildProject',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'destinationDir',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'buildArchiveProject',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'zipFileName',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'buildDir',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Composer/Updater.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Composer\\Updater',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'update',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Update framework 
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Composer',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'install',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Install, update framework and configure project
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Composer',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/Configuration.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Config\\Configuration',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'version',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * @var string $version version name
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'versionCode',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * @var int $versionCode version code
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'MIN_PHP_VERSION',
               'value' => '\'8.0\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Minimum required php version
    * @var string MIN_PHP_VERSION 
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method to retrieve session properties.
     *
     * @param string $key The name of the property to retrieve.
     * 
     * @return mixed
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'appName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the application name.
     * @deprecated This method is deprecated and will be removed in future use global constant APP_NAME instead
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hostName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the host name.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'baseUrl',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the base URL.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'baseWwwUrl',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the base www URL.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'appVersion',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the application version.
     * @deprecated This method is deprecated and will be removed in future use global constant APP_VERSION instead
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fileVersion',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the file version.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'shouldMinify',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if minification is enabled.
     *
     * @return int
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'urlProtocol',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the URL protocol (http or https).
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getFullUrl',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the full URL.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getRequestHost',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the request host.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getEnvironment',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get development environment
     * @deprecated This method is deprecated and will be removed in future use global constant ENVIRONMENT instead
     * @return string
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isMaintenance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if app is on maintenance
     * @deprecated This method is deprecated and will be removed in future use global constant MAINTENANCE instead
     * @return bool
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isProduction',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the application is in production mode.
     * @deprecated This method is deprecated and will be removed in future use global constant PRODUCTION instead
     * @return bool
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isLocal',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the application is running locally.
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isLocalServer',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the application is running on local server.
     * @deprecated This method is deprecated and will be removed in future use global constant NOVAKIT_ENV instead
     * @return bool
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'usePublic',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the application should use custom public as path 
     * If the local server is not running and not on production server
     * If the document root is not changed to "public", manually enable the app to use "public" as the default
     * @deprecated This method is deprecated and will be removed in future 
     * @return bool
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'root',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the root directory.
     *
     * @param string $directory The directory to start searching for composer.json or system directory.
     * @deprecated This method is deprecated and will be removed in future use global function root() instead
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'directory',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'suffix',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getRootDirectory',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the root directory.
     *
     * @param string $directory The directory to start searching for composer.json.
     * 
     * @deprecated This method has been deprecated use root($directory, $suffix) instead
     * @return string|null
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => '?string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'directory',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'filterPath',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Filter the path to match to allowed in error directories preview.
     *
     * @param string $path The path to be filtered.
     * 
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get environment configuration variables.
     *
     * @param string $key The key to retrieve.
     * @param mixed $default The default value to return if the key is not found.
     * 
     * @return mixed
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'set',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set an environment variable if it doesn\'t already exist.
     *
     * @param string $name The name of the environment variable.
     * @param string $value The value of the environment variable.
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getVariables',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get environment configuration variables.
     *
     * @param string $key The key to retrieve.
     * @param mixed $default The default value to return if the key is not found.
     * 
     * @deprecated This method will be removed in the next major release use get instead
     * @return mixed
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get environment configuration variables.
     *
     * @param string $key The key to retrieve.
     * @param string $default The default value to return if the key is not found.
     * 
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInt',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get environment variable as integer value
     *
     * @param string $key variable name
     * @param int $default fallback to default
     * @return bool
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getBoolean',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get environment variable as boolean
     *
     * @param string $key variable name
     * @param bool $default fallback to default
     * @return bool
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMixedNull',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get environment variable as default null
     *
     * @param string $key variable name
     * @param mixed|null $default fallback to default
     * @return bool
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'variableToNotation',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Convert variable to dot or underscore notation.
     *
     * @param string $input The input string .
     * @param string $notation The conversion notion
     * @return string
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'input',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'notation',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        31 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'copyright',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the framework copyright information
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        32 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'version',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the framework version number
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/Database.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Config\\Database',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
 * Database Configuration
 *
 * This class represents the configuration for a database connection.
 */',
         'namespace' => 'Luminova\\Config',
         'uses' => 
        array (
        ),
         'constUses' => 
        array (
        ),
      )),
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'port',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The port to connect to the database.
     * 
     * @var int|null $port 
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?int',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'host',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The hostname or IP address of the database server.
     * 
     * @var string $host [localhost, 127.0.0.1]
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'pdo_driver',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The PDO database driver.
     * 
     * @var string|null $pdo_driver 
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'charset',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The character set used for the database connection.
     * 
     * @var string $charset 
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'sqlite_path',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The path to the SQLite database file if applicable.
     * 
     * @var string|null $sqlite_path 
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'production',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Indicates if this configuration is for a production environment.
     * 
     * @var bool $production 
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'username',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The username for the database connection.
     * 
     * @var string $username 
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'password',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The password for the database connection.
     * 
     * @var string $password 
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'database',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The name of the database to connect to.
     * 
     * @var string $database 
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'persistent',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * persistent database connection
     * 
     * @var bool $persistent 
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize database config 
     * 
     * @param array $config
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'config',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/DotEnv.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Config\\DotEnv',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'register',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Register environment variables from a .env file.
     *
     * @param string $path The path to the .env file.
     * 
     * @return void 
     * @throws FileException If the .env file is not found.
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
              'fileexception' => 'Luminova\\Exceptions\\FileException',
              'splfileobject' => 'SplFileObject',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/PHPStanRules.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Config\\PHPStanRules',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => true,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'PHPStan\\Rules\\Rule',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getNodeType',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'processNode',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @param Stmt $node
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
              'doc' => 'PhpParser\\Comment\\Doc',
              'node' => 'PhpParser\\Node',
              'stmt' => 'PhpParser\\Node\\Stmt',
              'use_' => 'PhpParser\\Node\\Stmt\\Use_',
              'scope' => 'PHPStan\\Analyser\\Scope',
              'rule' => 'PHPStan\\Rules\\Rule',
              'variable' => 'PhpParser\\Node\\Expr\\Variable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'node',
               'type' => 'PhpParser\\Node',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'scope',
               'type' => 'PHPStan\\Analyser\\Scope',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Config/SystemPaths.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Config\\SystemPaths',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'systemDirectory',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * SYSTEM FOLDER NAME
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'systemPluginsDirectory',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * SYSTEM FOLDER NAME
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'appDirectory',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * APPLICATION FOLDER NAME
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'writableDirectory',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * WRITABLE DIRECTORY NAME
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'testsDirectory',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * TESTS DIRECTORY NAME
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'viewDirectory',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * VIEW DIRECTORY NAME
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Controllers/Controller.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Controllers\\Controller',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Controllers/ViewController.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Controllers\\ViewController',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'request',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * Initializes the http request class
    * Allows #[\\Override]
    * 
    * @return Request $request http request object 
    */',
             'namespace' => 'Luminova\\Controllers',
             'uses' => 
            array (
              'application' => 'App\\Controllers\\Application',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'importer' => 'Luminova\\Library\\Importer',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Http\\Request',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validate',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initializes the input validator class
    * Allows #[\\Override]
    * 
    * @return InputValidator $validate input validation object 
    */',
             'namespace' => 'Luminova\\Controllers',
             'uses' => 
            array (
              'application' => 'App\\Controllers\\Application',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'importer' => 'Luminova\\Library\\Importer',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Security\\InputValidator',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'app',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initializes the application class
    * Allows #[\\Override]
    * 
    * @return Application $app Application instance
    */',
             'namespace' => 'Luminova\\Controllers',
             'uses' => 
            array (
              'application' => 'App\\Controllers\\Application',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'importer' => 'Luminova\\Library\\Importer',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'App\\Controllers\\Application',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'library',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initializes the application class
    * Allows #[\\Override]
    * 
    * @return Importer $app Application instance
    */',
             'namespace' => 'Luminova\\Controllers',
             'uses' => 
            array (
              'application' => 'App\\Controllers\\Application',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'importer' => 'Luminova\\Library\\Importer',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Library\\Importer',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'view',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Render view
     *
     * @param string $view view name
     * @param array $options view options
     * 
     * @return int STATUS_OK
    */',
             'namespace' => 'Luminova\\Controllers',
             'uses' => 
            array (
              'application' => 'App\\Controllers\\Application',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'importer' => 'Luminova\\Library\\Importer',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'view',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'onCreate',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * On create method 
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Controllers',
             'uses' => 
            array (
              'application' => 'App\\Controllers\\Application',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'importer' => 'Luminova\\Library\\Importer',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'onDestroy',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * On destroy method 
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Controllers',
             'uses' => 
            array (
              'application' => 'App\\Controllers\\Application',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'importer' => 'Luminova\\Library\\Importer',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Cookie.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Cookies\\Cookie',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Cookies\\CookieInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'prefix',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $prefix
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'name',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $name
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'value',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var mixed $value
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'mixed',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'expires',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var int $expires
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'int',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'path',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $path
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'domain',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $domain
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'secure',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var bool $secure
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'httpOnly',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var bool $httpOnly
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'sameSite',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $sameSite
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'raw',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var bool $raw
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'options',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var array $options
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'default',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var array $default
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Cookie constructor.
     * 
     * @param string $name Cookie name 
     * @param mixed $value cookie value
     * @param array $options Cookie options
     * 
     * @throws CookieException
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => true,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setOptions',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set cookie options 
     * 
     * @param string|array $options Options array or CookieConfig class name
     * 
     * @return self $this
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'string|array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'set',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Set key and value to session
     * 
     * @param string $key key to set
     * @param mixed $value value to set
     * 
     * @return Cookie new Cookie instance
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Cookies\\Cookie',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setValue',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Set key and value to session
     * 
     * @param string $key key to set
     * @param mixed $value value to set
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * get data from session
     * 
     * @param string $index key to get
     * 
     * @return mixed
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'delete',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Remove key from the current session storage by passing the key.
     *
     * @param string $index Key index to unset.
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'has',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if key exists in session
     * 
     * @param string $key
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie name
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getOptions',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie options
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getValue',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie value
     * 
     * @return mixed
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getDomain',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie domain
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPrefix',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie prefix
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getExpiry',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie expiry
     * 
     * @return int
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getExpiryString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie expiry time as string
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasExpired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Checks if the cookie has expired.
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMaxAge',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Gets the "Max-Age" cookie attribute.
     * 
     * @return int
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPath',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie path
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getSameSite',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie samesite attribute
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isSecure',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie security attribute
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        31 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isHttpOnly',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie httponly attribute
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        32 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isRaw',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie raw attribute
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        33 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the Cookie as a header value.
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        34 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the Cookie as a header value.
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        35 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getId',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie id
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        36 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPrefixedName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Gets the cookie name prepended with the prefix
     * 
     * @return string
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        37 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setFromString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Create a new Cookie instance from a `Set-Cookie` header.
     *
     * @param string $cookie Cookie header string 
     * @param bool $raw Is raw cookie
     * 
     * @return Cookie New Cookie instance
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Cookies\\Cookie',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cookie',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'raw',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        38 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasPrefix',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if cookie name has prefix
     * 
     * @param ?string $name 
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        39 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toTimestamp',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Converts expires time to Unix timestamp format.
     *
     * @param DateTimeInterface|int|string $expires
     * 
     * @return int $timestamp
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expires',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        40 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__toString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the string representation of the Cookie object.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        41 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the array representation of the Cookie object.
     *
     * @return array<string, bool|int|string>
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        42 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validateName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Validates the cookie name per RFC 2616.
     *
     * If `$raw` is true, names should not contain invalid characters
     * as `setrawcookie()` will reject this.
     *
     * @throws CookieException
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        43 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validatePrefix',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Validates the special prefixes if some attribute requirements are met.
     *
     * @throws CookieException
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        44 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validateSameSite',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Validates the `SameSite` to be within the allowed types.
     *
     * @throws CookieException
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/CookieInterface.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedInterfaceNode::__set_state(array(
       'name' => 'Luminova\\Cookies\\CookieInterface',
       'phpDoc' => NULL,
       'extends' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'NONE',
               'value' => '\'none\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Cookies will be sent in all contexts, i.e in responses to both
     * third-party and cross-origin requests. If `SameSite=None` is set,
     * the cookie `Secure` attribute must also be set (or the cookie will be blocked).
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'LAX',
               'value' => '\'lax\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Cookies are not sent on normal cross-site sub requests (for example to
     * load images or frames into a third party site), but are sent when a
     * user is navigating to the origin site (i.e. when following a link).
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'STRICT',
               'value' => '\'strict\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Cookies will only be sent in a third-party context and not be sent
     * along with requests initiated by third party websites.
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'EXPIRES_FORMAT',
               'value' => '\'D, d-M-Y H:i:s T\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Expires date string format.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date
     * @see https://tools.ietf.org/html/rfc7231#section-7.1.1.2
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'set',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Set key and value to session
     * 
     * @param string $key key to set
     * @param mixed $value value to set
     * 
     * @return Cookie new Cookie instance
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Cookies\\Cookie',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setValue',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Set key and value to session
     * 
     * @param string $key key to set
     * @param mixed $value value to set
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * get data from session
     * 
     * @param string $index key to get
     * 
     * @return mixed
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'has',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if key exists in session
     * 
     * @param string $key
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'delete',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Remove key from the current session storage by passing the key.
     *
     * @param string $index Key index to unset.
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setOptions',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set cookie options 
     * 
     * @param string|array $options Options array or CookieConfig class name
     * 
     * @return self $this
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'string|array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setFromString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Create a new Cookie instance from a `Set-Cookie` header.
     *
     * @param string $cookie Cookie header string 
     * @param bool $raw Is raw cookie
     * 
     * @return Cookie New Cookie instance
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Cookies\\Cookie',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cookie',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'raw',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getId',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie id
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPrefix',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie prefix
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPrefixedName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Gets the cookie name prepended with the prefix
     * 
     * @return string
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie name
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getValue',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie value
     * 
     * @return mixed
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getExpiry',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie expiry
     * 
     * @return int
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getExpiryString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie expiry time as string
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasExpired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Checks if the cookie is expired.
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMaxAge',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Gets the "Max-Age" cookie attribute.
     * 
     * @return int
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPath',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie path
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getDomain',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie domain
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isSecure',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie security attribute
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isHttpOnly',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie httpOnly attribute
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getSameSite',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie sameSite attribute
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isRaw',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie raw attribute
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getOptions',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie options
     * 
     * @return array<string, mixed> 
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the Cookie as a header value.
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the Cookie as a header value.
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasPrefix',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if cookie name has prefix
     * 
     * @param ?string $name 
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__toString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the string representation of the Cookie object.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        31 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the array representation of the Cookie object.
     *
     * @return array<string, bool|int|string>
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Cookies/Exception/CookieException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Cookies\\Exception\\CookieException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'throwWith',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Thrown when a cookie-related error occurs.
     *
     * @param string $type The type of error.
     * @param mixed|null $name The cookie name associated with the error (if applicable).
     * @return static
     */',
             'namespace' => 'Luminova\\Cookies\\Exception',
             'uses' => 
            array (
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Columns.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Database\\Columns',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'INT',
               'value' => '"INT"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'VARCHAR',
               'value' => '"VARCHAR"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'DEFAULT_NONE',
               'value' => '"NONE"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'DEFAULT_TIMESTAMP',
               'value' => '"CURRENT_TIMESTAMP"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'DEFAULT_NULL',
               'value' => '"NULL"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'INDEX_PRIMARY',
               'value' => '"PRIMARY"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'INDEX_UNIQUE',
               'value' => '"UNIQUE"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'INDEX_INDEX',
               'value' => '"INDEX"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'INDEX_FULLTEXT',
               'value' => '"FULLTEXT"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'INDEX_SPATIAL',
               'value' => '"SPATIAL"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'tableName',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setName',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Database\\Columns',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setType',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Database\\Columns',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'length',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setCollation',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Database\\Columns',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'collation',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setAttributes',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Database\\Columns',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'attributes',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setAutoIncrement',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Database\\Columns',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'autoIncrement',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setDefault',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Database\\Columns',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setIndex',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Database\\Columns',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'indexType',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getColumns',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'generate',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Connection.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Database\\Connection',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'db',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
    * Database connection instance 
    * @var MySqlDriver|PdoDriver|null $db
  */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'mysqldriver' => 'Luminova\\Database\\Drivers\\MySqlDriver',
              'pdodriver' => 'Luminova\\Database\\Drivers\\PdoDriver',
              'database' => 'Luminova\\Config\\Database',
              'servers' => 'App\\Controllers\\Config\\Servers',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'databaselimitexception' => 'Luminova\\Exceptions\\DatabaseLimitException',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'Luminova\\Database\\Drivers\\MySqlDriver|Luminova\\Database\\Drivers\\PdoDriver|null',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
  * Connection constructor.
  *
  * Initializes the database connection based on configuration.
  * @throws DatabaseException
  * @throws DatabaseLimitException
  * @throws InvalidArgumentException
  * @throws Exception
  */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'mysqldriver' => 'Luminova\\Database\\Drivers\\MySqlDriver',
              'pdodriver' => 'Luminova\\Database\\Drivers\\PdoDriver',
              'database' => 'Luminova\\Config\\Database',
              'servers' => 'App\\Controllers\\Config\\Servers',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'databaselimitexception' => 'Luminova\\Exceptions\\DatabaseLimitException',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => true,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Get the singleton instance of Connection.
   *
   * @return self Connection instance
   * @throws DatabaseException
   * @throws InvalidArgumentException
   * @throws Exception
  */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'mysqldriver' => 'Luminova\\Database\\Drivers\\MySqlDriver',
              'pdodriver' => 'Luminova\\Database\\Drivers\\PdoDriver',
              'database' => 'Luminova\\Config\\Database',
              'servers' => 'App\\Controllers\\Config\\Servers',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'databaselimitexception' => 'Luminova\\Exceptions\\DatabaseLimitException',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'newInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Get new database connection instance
   * No shared instance connection
   * 
   * @param Database $config 
   *
   * @return object Database driver instance
   * @throws DatabaseException
   * @throws InvalidArgumentException
   * @throws Exception
  */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'mysqldriver' => 'Luminova\\Database\\Drivers\\MySqlDriver',
              'pdodriver' => 'Luminova\\Database\\Drivers\\PdoDriver',
              'database' => 'Luminova\\Config\\Database',
              'servers' => 'App\\Controllers\\Config\\Servers',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'databaselimitexception' => 'Luminova\\Exceptions\\DatabaseLimitException',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'config',
               'type' => '?Luminova\\Config\\Database',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'releaseConnection',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Release connection back to pool 
   * 
   * @param object $connection
   * 
   * @return void
  */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'mysqldriver' => 'Luminova\\Database\\Drivers\\MySqlDriver',
              'pdodriver' => 'Luminova\\Database\\Drivers\\PdoDriver',
              'database' => 'Luminova\\Config\\Database',
              'servers' => 'App\\Controllers\\Config\\Servers',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'databaselimitexception' => 'Luminova\\Exceptions\\DatabaseLimitException',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'connection',
               'type' => 'object',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'closeAllConnections',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Close all stacked pool connection
   * 
   * @return void 
  */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'mysqldriver' => 'Luminova\\Database\\Drivers\\MySqlDriver',
              'pdodriver' => 'Luminova\\Database\\Drivers\\PdoDriver',
              'database' => 'Luminova\\Config\\Database',
              'servers' => 'App\\Controllers\\Config\\Servers',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'databaselimitexception' => 'Luminova\\Exceptions\\DatabaseLimitException',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__serialize',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Prevent un-serialization of the singleton instance
  */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'mysqldriver' => 'Luminova\\Database\\Drivers\\MySqlDriver',
              'pdodriver' => 'Luminova\\Database\\Drivers\\PdoDriver',
              'database' => 'Luminova\\Config\\Database',
              'servers' => 'App\\Controllers\\Config\\Servers',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'databaselimitexception' => 'Luminova\\Exceptions\\DatabaseLimitException',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__unserialize',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Restore connection after un-serialization
   *  @param array $data un-serialized data
   * 
   * @return void 
  */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'mysqldriver' => 'Luminova\\Database\\Drivers\\MySqlDriver',
              'pdodriver' => 'Luminova\\Database\\Drivers\\PdoDriver',
              'database' => 'Luminova\\Config\\Database',
              'servers' => 'App\\Controllers\\Config\\Servers',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'databaselimitexception' => 'Luminova\\Exceptions\\DatabaseLimitException',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'retryConnection',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Retry database connection
   * 
   * @param array $service array of service to try to connect
   * 
   * @return object|bool 
  */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'mysqldriver' => 'Luminova\\Database\\Drivers\\MySqlDriver',
              'pdodriver' => 'Luminova\\Database\\Drivers\\PdoDriver',
              'database' => 'Luminova\\Config\\Database',
              'servers' => 'App\\Controllers\\Config\\Servers',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'databaselimitexception' => 'Luminova\\Exceptions\\DatabaseLimitException',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'object|bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'servers',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/DriversInterface.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedInterfaceNode::__set_state(array(
       'name' => 'Luminova\\Database\\Drivers\\DriversInterface',
       'phpDoc' => NULL,
       'extends' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isConnected',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if database is connected
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getDriver',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get driver name
     * 
     * @return string Database driver name
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setDebug',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the debug mode.
     *
     * @param bool $debug The debug mode.
     * @return self The current class instance.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'debug',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'error',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the error information for the last statement execution.
     *
     * @return string The error information array.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'errors',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the error information.
     *
     * @return array The error information.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'dumpDebug',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Dumps the debug information for the last statement execution.
     *
     * @return string|null The debug information or null if debug mode is off.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'info',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the error information for the last statement execution.
     *
     * @return array $info The error information array.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'prepare',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Prepares a statement for execution.
     *
     * @param string $query The SQL query.
     * @return self The current class instance.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'query',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Executes a query.
     *
     * @param string $query The SQL query.
     * @return self The current class instance.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'exec',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Executes a query.
     *
     * @param string $query The SQL query.
     * @return int The affected row counts
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'beginTransaction',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Begin transaction
     *
     * @return void 
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'commit',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Commits transaction
     *
     * @return void 
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'rollback',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Rollback transaction if fails
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getType',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the appropriate parameter type based on the value and type.
     *
     * @param mixed       $value The parameter value.
     * @param ?int    $type  The parameter type.
     *
     * @return int The parameter type.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'bind',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Binds a value to a parameter.
     *
     * @param string       $param The parameter identifier.
     * @param mixed       $value The parameter value.
     * @param null|int    $type  The parameter type.
     *
     * @return self The current class instance.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'param',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'param',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Binds a variable to a parameter.
     *
     * @param string       $param The parameter identifier.
     * @param mixed       $value The parameter value.
     * @param null|int    $type  The parameter type.
     *
     * @return self The current class instance.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'param',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'execute',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Executes the prepared statement.
     * @param array $values execute statement with values
     * 
     * @throws DatabaseException 
     * @return void
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'rowCount',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the number of rows affected by the last statement execution.
     *
     * @return int The number of rows.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getOne',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches a single row as an object.
     *
     * @return mixed The result object or false if no row is found.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getAll',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as an array of objects.
     *
     * @return mixed The array of result objects.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInt',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a 2D array of integers.
     *
     * @return int The 2D array of integers.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getResult',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as an array or stdClass object.
     *
     * @param string $type The type of result to fetch (\'object\' or \'array\').
     * 
     * @return array|stdClass The result containing the rows.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array|stdClass',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getObject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a stdClass object.
     *
     * @return stdClass The stdClass object containing the result rows.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'stdClass',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a array.
     *
     * @return array The array containing the result rows.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getLastInsertId',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the ID of the last inserted row or sequence value.
     *
     * @return string The last insert ID.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'free',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Frees up the statement cursor and sets the statement object to null.
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'close',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Frees up the statement cursor and close database connection
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/MySqlDriver.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Database\\Drivers\\MySqlDriver',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Database\\Drivers\\DriversInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor.
     *
     * @param Database $config database configuration. array
     * @throws InvalidArgumentException If a required configuration key is missing.
     * @throws Exception
     * @throws DatabaseException
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'config',
               'type' => 'Luminova\\Config\\Database',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getDriver',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get driver name
     * 
     * @return string Database driver name
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setDebug',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the debug mode.
     *
     * @param bool $debug The debug mode.
     * @return self The current instance of the MySqlDriver class.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'debug',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isConnected',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if database is connected
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'error',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the error information for the last statement execution.
     *
     * @return string The error information.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'errors',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the error information 
     *
     * @return array The error information.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'info',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the error information for the last statement execution.
     *
     * @return array $info The error information array.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'dumpDebug',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Dumps the debug information for the last statement execution.
     *
     * @return string $debug The debug information
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'prepare',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Prepares a statement for execution.
     *
     * @param string $query The SQL query.
     *
     * @return self The current instance of the MySqlDriver class.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'query',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Executes a query.
     *
     * @param string $query The SQL query.
     *
     * @return self The current instance of the MySqlDriver class.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'exec',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Executes a query.
     *
     * @param string $query The SQL query.
     * @return int The affected row counts
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'beginTransaction',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Begin transaction
     *
     * @return void 
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'commit',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Commits transaction
     *
     * @return void 
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'rollback',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Rollback transaction if fails
     *
     * @return void
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getType',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the appropriate parameter type based on the value and type.
     *
     * @param mixed       $value The parameter value.
     * @param null|int    $type  The parameter type.
     *
     * @return int The parameter type.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'bind',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Binds a value to a parameter.
     *
     * @param string       $param The parameter identifier.
     * @param mixed       $value The parameter value.
     * @param int|null    $type  The parameter type.
     *
     * @return self The current instance of the MySqlDriver class.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'param',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'param',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Binds a variable to a parameter.
     *
     * @param string       $param The parameter identifier.
     * @param mixed       $value The parameter value.
     * @param int|null    $type  The parameter type.
     *
     * @return self The current instance of the MySqlDriver class.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'param',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'bindValues',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Binds an array of values to the query parameters.
     *
     * @param array $values An associative array of parameter names and their corresponding values.
     * 
     * @return self The current instance of the MySqlDriver class.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'execute',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Executes the prepared statement.
     * 
     * @param array $values execute statement with values
     * 
     * @throws DatabaseException 
     * @return void
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'rowCount',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the number of rows affected by the last statement execution.
     *
     * @return int The number of rows.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getOne',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches a single row as an object.
     * 
     * @return array|object|null The result object or false if no row is found.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getAll',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as an array of objects.
     *
     * @return array|object|null The array of result objects.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getResult',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as an array or stdClass object.
     *
     * @param string $type The type of result to fetch (\'object\' or \'array\').
     * 
     * @return array|stdClass The result containing the rows.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array|stdClass',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getObject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a stdClass object.
     *
     * @return stdClass The stdClass object containing the result rows.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'stdClass',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a array.
     *
     * @return array The array containing the result rows.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInt',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a 2D array of integers.
     *
     * @return int $total
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getLastInsertId',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the ID of the last inserted row or sequence value.
     *
     * @return string The last insert ID.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'free',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Frees up the statement cursor and sets the statement object to null.
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'close',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Frees up the statement cursor and close database connection
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Drivers/PdoDriver.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Database\\Drivers\\PdoDriver',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Database\\Drivers\\DriversInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'PARAM_INT',
               'value' => '1',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * @var int PARAM_INT Integer Parameter
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'PARAM_BOOL',
               'value' => '5',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * @var int PARAM_BOOL Boolean Parameter
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'PARAM_NULL',
               'value' => '0',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * @var int PARAM_NULL Null Parameter
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'PARAM_STRING',
               'value' => '2',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * @var int PARAM_STRING String Parameter
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor.
     *
     * @param Database $config database configuration. array
     * @throws InvalidArgumentException If a required configuration key is missing.
     * @throws PDOException
     * @throws DatabaseException
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'config',
               'type' => 'Luminova\\Config\\Database',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getDriver',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get driver name
     * 
     * @return string Database driver name
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setDebug',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the debug mode.
     *
     * @param bool $debug The debug mode.
     * 
     * @return self The current class instance.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'debug',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isConnected',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if database is connected
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'error',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the error information for the last statement execution.
     *
     * @return string The error information.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'errors',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the error information.
     *
     * @return array The error information.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'info',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the error information for the last statement execution.
     *
     * @return array $info The error information array.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'dumpDebug',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Dumps the debug information for the last statement execution.
     *
     * @return string|null The debug information or null if debug mode is off.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'prepare',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Prepares a statement for execution.
     *
     * @param string $query The SQL query.
     * 
     * @return self The current class instance.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'query',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Executes a query.
     *
     * @param string $query The SQL query.
     * 
     * @return self The current class instance.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'exec',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Executes a query.
     *
     * @param string $query The SQL query.
     * @return int The affected row counts
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'beginTransaction',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Begin transaction
     *
     * @return void 
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'commit',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Commits transaction
     *
     * @return void 
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'rollback',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Rollback transaction if fails
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getType',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the appropriate parameter type based on the value and type.
     *
     * @param mixed       $value The parameter value.
     * @param null|int    $type  The parameter type.
     *
     * @return int The parameter type.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'bind',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Binds a value to a parameter.
     *
     * @param string       $param The parameter identifier.
     * @param mixed       $value The parameter value.
     * @param null|int    $type  The parameter type.
     *
     * @return self The current class instance.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'param',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'param',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Binds a variable to a parameter.
     *
     * @param string       $param The parameter identifier.
     * @param mixed       $value The parameter value.
     * @param null|int    $type  The parameter type.
     *
     * @return self The current class instance.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'param',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'execute',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Executes the prepared statement.
     * @param array $values execute statement with values
     * @throws DatabaseException 
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'rowCount',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the number of rows affected by the last statement execution.
     *
     * @return int The number of rows.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getOne',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches a single row as an object.
     *
     * @return mixed The result object or false if no row is found.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getAll',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as an array of objects.
     *
     * @return mixed The array of result objects.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInt',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a 2D array of integers.
     *
     * @return array The 2D array of integers.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getResult',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as an array or stdClass object.
     *
     * @param string $type The type of result to fetch (\'object\' or \'array\').
     * 
     * @return array|stdClass The result containing the rows.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array|stdClass',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getObject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a stdClass object.
     *
     * @return stdClass The stdClass object containing the result rows.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'stdClass',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a array.
     *
     * @return array The array containing the result rows.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getLastInsertId',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the ID of the last inserted row or sequence value.
     *
     * @return string The last insert ID.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'free',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Frees up the statement cursor and sets the statement object to null.
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        31 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'close',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Frees up the statement cursor and close database connection
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Query.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Database\\Query',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Database\\Connection',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getConn',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get database connection
     * 
     * @return MySqlDriver|PdoDriver|null 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => '?object',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'closeConn',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Close database connection
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * Class Singleton
    *
    * @return static object $instance
    * @throws DatabaseException|InvalidException If fails
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'static',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'table',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets table name
     *
     * @param string $table The table name
     * @param string $alias table alias
     * 
     * @return self $this Class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'table',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'alias',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'join',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Specifies a join operation in the query.
     *
     * @param string $table The name of the table to join.
     * @param string $type The type of join (default: "INNER").
     * @param string $alias The alias for the joined table (optional).
     * 
     * @return self Returns the instance of the class.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'table',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'alias',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'on',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Specifies join conditions for the query.
     *
     * @param string|array<string> $conditions Join conditions.
     * @param string|null $operator Join operator (default: \'=\').
     * @param mixed $value Value to bind to the condition or another table column.
     * 
     * @example array $tbl->on([\'column = key\', \'a.column = b.column\'])
     * @example string $tbl->on(\'a.column\', \'=\', \'b.column);
     * 
     * @return self Returns the instance of the class.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'conditions',
               'type' => 'string|array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'operator',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'innerJoin',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets join table inner
     * 
     * @param string $table The table name
     * @param string $alias join table alias
     * 
     * @return self $this Class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'table',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'alias',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'leftJoin',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets join table left
     * 
     * @param string $table The table name
     * @param string $alias join table alias
     * 
     * @return self $this Class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'table',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'alias',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'rightJoin',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets join table right
     * 
     * @param string $table The table name
     * @param string $alias join table alias
     * 
     * @return self $this Class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'table',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'alias',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'crossJoin',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets join table cross
     * 
     * @param string $table The table name
     * @param string $alias join table alias
     * 
     * @return self $this Class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'table',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'alias',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'limit',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set query limit
     * 
     * @param int $limit limit threshold 
     * @param int $offset start offset query limit
     * 
     * @return self class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'limit',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'offset',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'order',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set query order
     * @param string $order uid ASC, name DESC
     * 
     * @return self class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'order',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'group',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set query grouping
     * 
     * @param string $group group by column name
     * 
     * @return self class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'group',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'where',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set query where
     * 
     * @param string $column column name
     * @param mixed $operator Comparison Operator
     * @param mixed $key column key value
     * 
     * @return self class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'column',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'operator',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'and',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set query where and
     * 
     * @param string $column column name
     * @param mixed $operator Comparison operator
     * @param mixed $value column key value
     * 
     * @return self class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'column',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'operator',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'set',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set update columns and values
     * 
     * @param string $column column name
     * @param string|int $value column key value
     * 
     * @return self class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'column',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'or',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set query where or | and or
     * 
     * @param string $column column name
     * @param mixed $operator Comparison operator
     * @param mixed $value column key value
     * 
     * @return self class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'column',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'operator',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'andOr',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set query AND (? OR ?)
     * @param string $column column name
     * @param mixed $operator Comparison operator
     * @param mixed $value column key value
     * @param string $orColumn column name
     * @param mixed $orOperator Comparison operator
     * @param mixed $orValue column or key value
     * 
     * @return self class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'column',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'operator',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'orColumn',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            4 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'orOperator',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            5 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'orValue',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'in',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set query where IN () expression
     * @param string $column column name
     * @param array $lists of values
     * 
     * @return self class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'column',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'lists',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'inset',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set query where FIND_IN_SET () expression
     * @param string $search search value
     * @param string $operator allow specifying the operator for matching (e.g., > or =)
     * @param array $list of values
     * 
     * @return self class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'search',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'operator',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'list',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'cache',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Cache the query result using a specified storage.
     *
     * @param string $key The storage cache key
     * @param string $storage Private storage name hash name (optional): but is recommended to void storing large data in one file.
     * @param int $expiry The cache expiry time in seconds (default: 7 days).
     * 
     * @return self $this class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expiry',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'insert',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Insert into table
     * @param array $values array of values to insert into table
     * @param bool $bind Use bind values and prepare statement instead of query
     * 
     * @return int returns affected row counts.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'bind',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'select',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Select from table,
     * 
     * @param array $columns select columns
     * 
     * @return object|null|array returns selected rows.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'columns',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'binds',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Bind placeholder values to builder
     * 
     * @param array $values
     * @deprecated Don\'t use this method anymore use execute instead
     * @return self
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'query',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Select on record from table using cache
     * 
     * @param string $query database query string
     * 
     * @return self $this 
     * @throws DatabaseException when query is empty
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'builder',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Bind placeholder values to builder
     * 
     * @param string $query SQL query string
     * 
     * @deprecated Don\'t use this method anymore use query instead
     * @return self
     * @throws DatabaseException when query is empty
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'execute',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Execute query
     * Execute does not support cache method
     * 
     * @param array $binds binds placeholder to query
     * @param string $type [all, one, object, total, lastId, count or stmt]  or \'stmt\' to return Statements
     * 
     * @return Statements|object|array|int|null Statements or null when failed
     * @throws DatabaseException 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'binds',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'find',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Select on record from table,
     * @param array $columns select columns
     * 
     * @return object|null returns selected row.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'columns',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'total',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Select on record from table,
     * @param array $columns select columns
     * 
     * @return int returns selected row.
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'column',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'update',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Update table with columns and values
     * @param array $setValues associative array of columns and values to update
     * @param int $limit number of records to update 
     * 
     * @return int returns affected row counts.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'setValues',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'limit',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'delete',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Delete from table
     * @param int $limit row limit
     * 
     * @return int returns affected row counts.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'limit',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        31 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'errors',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get errors 
     * 
     * @return array 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        32 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'transaction',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Begin a transaction
     * 
     * @return self 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        33 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'commit',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Commit a transaction
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        34 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'rollback',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Rollback a transaction to default
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        35 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'truncate',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Delete all records in a table 
     * And alter table auto increment to 1
     * 
     * @param bool $transaction row limit
     * 
     * @return bool returns true if completed
     * @throws DatabaseException
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'transaction',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        36 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'drop',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Drop table from database
     * 
     * @return int returns affected row counts.
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        37 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'createTable',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Create a new table if it doesn\'t exist
     * 
     * @param array $columns table columns and options
     * 
     * @return int returns affected row counts.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'columns',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        38 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'create',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get table column instance 
     * 
     * @param Columns $column table column instance
     * 
     * @return int affected row count
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'column',
               'type' => 'Luminova\\Database\\Columns',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        39 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'withColumns',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get table column instance 
     * 
     * @return Columns column class instance
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Database\\Columns',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        40 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'reset',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Reset query conditions and Free database resources
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        41 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'free',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Free database resources
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        42 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'close',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Close database connection
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Database/Results/Statements.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Database\\Results\\Statements',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize with executed statement
     * 
     * @param object $statement
    */',
             'namespace' => 'Luminova\\Database\\Results',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
              'queries' => 'Luminova\\Database\\Results\\Queries',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'statement',
               'type' => 'object',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getAll',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as an array of objects.
     *
     * @return mixed The array of result objects.
     */',
             'namespace' => 'Luminova\\Database\\Results',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
              'queries' => 'Luminova\\Database\\Results\\Queries',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getOne',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches a single row as an object.
     *
     * @return mixed The result object or false if no row is found.
     */',
             'namespace' => 'Luminova\\Database\\Results',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
              'queries' => 'Luminova\\Database\\Results\\Queries',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInt',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a 2D array of integers.
     *
     * @return int integers.
    */',
             'namespace' => 'Luminova\\Database\\Results',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
              'queries' => 'Luminova\\Database\\Results\\Queries',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getObject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a stdClass object.
     *
     * @return stdClass The stdClass object containing the result rows.
     */',
             'namespace' => 'Luminova\\Database\\Results',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
              'queries' => 'Luminova\\Database\\Results\\Queries',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'stdClass',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a array.
     *
     * @return array The array containing the result rows.
     */',
             'namespace' => 'Luminova\\Database\\Results',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
              'queries' => 'Luminova\\Database\\Results\\Queries',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getLastId',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the ID of the last inserted row or sequence value.
     *
     * @return string The last insert ID.
     */',
             'namespace' => 'Luminova\\Database\\Results',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
              'queries' => 'Luminova\\Database\\Results\\Queries',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCount',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the number of rows affected by the last statement execution.
     *
     * @return int The number of rows.
    */',
             'namespace' => 'Luminova\\Database\\Results',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
              'queries' => 'Luminova\\Database\\Results\\Queries',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getResult',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get result 
     * 
     * @param string $type [object, array]
     * 
     * @return stdClass|array The result
    */',
             'namespace' => 'Luminova\\Database\\Results',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
              'queries' => 'Luminova\\Database\\Results\\Queries',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'stdClass|array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get result 
     * 
     * @param string $type [all, one, total, object, array, lastId, count or className]
     * 
     * @return mixed|Queries
    */',
             'namespace' => 'Luminova\\Database\\Results',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
              'queries' => 'Luminova\\Database\\Results\\Queries',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Debugger/PHPStanRules.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Debugger\\PHPStanRules',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => true,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'PHPStan\\Rules\\Rule',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getNodeType',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'processNode',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @param Stmt $node
     */',
             'namespace' => 'Luminova\\Debugger',
             'uses' => 
            array (
              'doc' => 'PhpParser\\Comment\\Doc',
              'node' => 'PhpParser\\Node',
              'stmt' => 'PhpParser\\Node\\Stmt',
              'use_' => 'PhpParser\\Node\\Stmt\\Use_',
              'scope' => 'PHPStan\\Analyser\\Scope',
              'rule' => 'PHPStan\\Rules\\Rule',
              'variable' => 'PhpParser\\Node\\Expr\\Variable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'node',
               'type' => 'PhpParser\\Node',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'scope',
               'type' => 'PHPStan\\Analyser\\Scope',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/MailClientInterface.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedInterfaceNode::__set_state(array(
       'name' => 'Luminova\\Email\\Clients\\MailClientInterface',
       'phpDoc' => NULL,
       'extends' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'initialize',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/NovaMailer.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Email\\Clients\\NovaMailer',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Email\\Clients\\MailClientInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'CONTENT_TYPE_PLAINTEXT',
               'value' => '\'text/plain\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'CONTENT_TYPE_TEXT_CALENDAR',
               'value' => '\'text/calendar\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'CONTENT_TYPE_TEXT_HTML',
               'value' => '\'text/html\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'CONTENT_TYPE_MULTIPART_ALTERNATIVE',
               'value' => '\'multipart/alternative\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'CONTENT_TYPE_MULTIPART_MIXED',
               'value' => '\'multipart/mixed\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'CONTENT_TYPE_MULTIPART_RELATED',
               'value' => '\'multipart/related\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ENCODING_7BIT',
               'value' => '\'7bit\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ENCODING_8BIT',
               'value' => '\'8bit\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ENCODING_BASE64',
               'value' => '\'base64\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ENCODING_BINARY',
               'value' => '\'binary\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ENCODING_QUOTED_PRINTABLE',
               'value' => '\'quoted-printable\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Subject',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $Subject 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Body',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $Body 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'AltBody',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $AltBody 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'XMailer',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $XMailer 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'CharSet',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $CharSet 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'SMTPDebug',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var int $SMTPDebug 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'int',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'exceptions',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var bool $exceptions 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Host',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $Host 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Port',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $Port 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'SMTPAuth',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var bool $SMTPAuth 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Username',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $Username 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Password',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $Password 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'SMTPSecure',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $SMTPSecure 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor.
     *
     * @param bool $exceptions Should we throw external exceptions?
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'exceptions',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'initialize',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addAddress',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add an email address to the recipient list.
     *
     * @param string $address The email address.
     * @param string $name    The recipient\'s name (optional).
     *
     * @return bool True if the address was added successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addCC',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add an email address to the recipient list.
     *
     * @param string $address The email address.
     * @param string $name    The recipient\'s name (optional).
     *
     * @return bool True if the address was added successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addBCC',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add an email address to the recipient list.
     *
     * @param string $address The email address.
     * @param string $name    The recipient\'s name (optional).
     *
     * @return bool True if the address was added successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addReplyTo',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add a reply-to address.
     *
     * @param string $address The email address.
     * @param string $name    The recipient\'s name (optional).
     *
     * @return bool True if the reply-to address was added successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setFrom',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the email sender\'s address.
     *
     * @param string $address The email address.
     * @param string $name    The sender\'s name (optional).
     * @param bool   $auto    Whether to automatically add the sender\'s name (optional).
     *
     * @return bool True if the sender\'s address was set successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'auto',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        31 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addAttachment',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add an attachment from a path on the filesystem.
     * Never use a user-supplied path to a file!
     * Returns false if the file could not be found or read.
     * Explicitly *does not* support passing URLs; PHPMailer is not an HTTP client.
     * If you need to do that, fetch the resource yourself and pass it in via a local file or string.
     *
     * @param string $path        Path to the attachment
     * @param string $name        Overrides the attachment name
     * @param string $encoding    File encoding (see $Encoding)
     * @param string $type        MIME type, e.g. `image/jpeg`; determined automatically from $path if not specified
     * @param string $disposition Disposition to use
     *
     * @throws Exception
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'encoding',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            4 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'disposition',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        32 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'send',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send the email.
     *
     * @return bool True if the email was sent successfully, false otherwise.
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        33 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isSMTP',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send messages using SMTP.
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        34 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isMail',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send messages using PHP\'s mail() function.
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        35 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isHTML',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets message type to HTML or plain.
     *
     * @param bool $isHtml True for HTML mode
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'isHtml',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/PHPMailer.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Email\\Clients\\PHPMailer',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'PHPMailer\\PHPMailer\\PHPMailer',
       'implements' => 
      array (
        0 => 'Luminova\\Email\\Clients\\MailClientInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor.
     *
     * @param bool $exceptions Should we throw external exceptions?
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'phpmailerclient' => 'PHPMailer\\PHPMailer\\PHPMailer',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'exceptions',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'initialize',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Clients/SwiftMailer.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Email\\Clients\\SwiftMailer',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Email\\Clients\\MailClientInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Subject',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $Subject 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Body',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $Body 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'AltBody',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $AltBody 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'XMailer',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $XMailer 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'CharSet',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $CharSet 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'SMTPDebug',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var int $SMTPDebug 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'int',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'exceptions',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var bool $exceptions 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Host',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $Host 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Port',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $Port 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'SMTPAuth',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var bool $SMTPAuth 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Username',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $Username 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Password',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $Password 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'SMTPSecure',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $SMTPSecure 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor.
     *
     * @param bool $exceptions Should we throw external exceptions?
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'exceptions',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'initialize',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setFrom',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the email sender\'s address.
     *
     * @param string $address The email address.
     * @param string $name    The sender\'s name (optional).
     * @param bool   $auto    Whether to automatically add the sender\'s name (optional).
     *
     * @return bool True if the sender\'s address was set successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'auto',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addCC',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add an email address to the recipient list.
     *
     * @param string $address The email address.
     * @param string $name    The recipient\'s name (optional).
     *
     * @return bool True if the address was added successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addBCC',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add an email address to the recipient list.
     *
     * @param string $address The email address.
     * @param string $name    The recipient\'s name (optional).
     *
     * @return bool True if the address was added successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addAddress',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add an email address to the recipient list.
     *
     * @param string $address The email address.
     * @param string $name    The recipient\'s name (optional).
     *
     * @return bool True if the address was added successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addAttachment',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add an attachment from a path on the filesystem.
     * Never use a user-supplied path to a file!
     * Returns false if the file could not be found or read.
     * Explicitly *does not* support passing URLs; PHPMailer is not an HTTP client.
     * If you need to do that, fetch the resource yourself and pass it in via a local file or string.
     *
     * @param string $path        Path to the attachment
     * @param string $name        Overrides the attachment name
     * @param string $encoding    File encoding (see $Encoding)
     * @param string $type        MIME type, e.g. `image/jpeg`; determined automatically from $path if not specified
     * @param string $disposition Disposition to use
     *
     * @throws Exception
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'encoding',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            4 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'disposition',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isSMTP',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send messages using SMTP.
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isMail',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send messages using PHP\'s mail() function.
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isHTML',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets message type to HTML or plain.
     *
     * @param bool $isHtml True for HTML mode
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'helper' => 'Luminova\\Email\\Helpers\\Helper',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
              'swift_smtptransport' => 'Swift_SmtpTransport',
              'swift_mailer' => 'Swift_Mailer',
              'swift_message' => 'Swift_Message',
              'swift_attachment' => 'Swift_Attachment',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'isHtml',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Exceptions/MailerException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Email\\Exceptions\\MailerException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'throwWith',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Thrown when a cookie-related error occurs.
     *
     * @param string $type The type of error.
     * @param mixed|null $name The cookie name associated with the error (if applicable).
     * @return static
     */',
             'namespace' => 'Luminova\\Email\\Exceptions',
             'uses' => 
            array (
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Helpers/Helper.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Email\\Helpers\\Helper',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fileIsAccessible',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check whether a file path is safe, accessible, and readable.
     *
     * @param string $path A relative or absolute path to a file
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Email\\Helpers',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isPermittedPath',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check whether a file path is of a permitted type.
     * Used to reject URLs and phar files from functions that access local file paths,
     * such as addAttachment.
     *
     * @param string $path A relative or absolute path to a file
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Email\\Helpers',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Email/Mailer.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Email\\Mailer',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Subject',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Message subject
     * 
     * @var string $Subject
    */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Body',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Message body
     * 
     * @var string $Body
    */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'AltBody',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Alternative message body
     * 
     * @var string $AltBody 
    */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getClient',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the Mailer client instance.
     * 
     * @return static::$client The Mailer client instance.
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'object',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the Mailer instance.
     *
     * @param MailClientInterface|string|null $client The mail client instance or class name.
     * 
     * @throws MailerException
    */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'client',
               'type' => 'Luminova\\Email\\Clients\\MailClientInterface|string|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addAddress',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add an email address to the recipient list.
     *
     * @param string $address The email address.
     * @param string $name    The recipient\'s name (optional).
     *
     * @return bool True if the address was added successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addReplyTo',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add a reply-to address.
     *
     * @param string $address The email address.
     * @param string $name    The recipient\'s name (optional).
     *
     * @return bool True if the reply-to address was added successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addCc',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add an email address to the recipient list.
     *
     * @param string $address The email address.
     * @param string $name    The recipient\'s name (optional).
     *
     * @return bool True if the address was added successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addBcc',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add an email address to the recipient list.
     *
     * @param string $address The email address.
     * @param string $name    The recipient\'s name (optional).
     *
     * @return bool True if the address was added successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setFrom',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the email sender\'s address.
     *
     * @param string $address The email address.
     * @param string $name    The sender\'s name (optional).
     * @param bool   $auto    Whether to automatically add the sender\'s name (optional).
     *
     * @return bool True if the sender\'s address was set successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'auto',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setBody',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the body of the email message.
     *
     * @param string $message The body content of the email.
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setAltBody',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the alternative body of the email message.
     *
     * @param string $message The alternative body content of the email.
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setSubject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the subject of the email message.
     *
     * @param string $subject The subject of the email.
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'subject',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addAttachment',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add an attachment from a path on the filesystem.
     * Never use a user-supplied path to a file!
     * Returns false if the file could not be found or read.
     * Explicitly *does not* support passing URLs; PHPMailer is not an HTTP client.
     * If you need to do that, fetch the resource yourself and pass it in via a local file or string.
     *
     * @param string $path        Path to the attachment
     * @param string $name        Overrides the attachment name
     * @param string $encoding    File encoding (see $Encoding)
     * @param string $type        MIME type, e.g. `image/jpeg`; determined automatically from $path if not specified
     * @param string $disposition Disposition to use
     *
     * @throws Exception
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'encoding',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            4 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'disposition',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'send',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send the email.
     *
     * @return bool True if the email was sent successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Errors/Codes.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Errors\\Codes',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => true,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ERROR_404',
               'value' => '404',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ERROR_500',
               'value' => '500',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ERROR_1001',
               'value' => '1001',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ERROR_1002',
               'value' => '1002',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Errors/Error.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Errors\\Error',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'initialize',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initializes error display
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Errors',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get error type
     * 
     * @param int $errno error code
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Errors',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'errno',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'display',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Display error
     * 
     * @param string $message Error message
     * @param int $code error code
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Errors',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'code',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'handle',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Handle errors 
     * 
     * @param int $errno Error code
     * @param string $message Error message
     * @param string $errFile Error file
     * @param int $errLine
     * @param bool $shutdown handle shutdown
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Errors',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'errno',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'errFile',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'errLine',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            4 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'shutdown',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'shutdown',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Handle shutdown errors 
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Errors',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'log',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a message at a specified log level.
     * 
     * @param string $level The log level (e.g., "emergency," "error," "info").
     * @param string $message The message to log.
     * @param array $context Additional context data (optional).
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Errors',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'level',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/AppException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\AppException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Exception',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor for AppException.
     *
     * @param string message   The exception message (default: \'Database error\').
     * @param int $code  The exception code (default: 500).
     * @param Throwable $previous  The previous exception if applicable (default: null).
     */',
             'namespace' => 'Luminova\\Exceptions',
             'uses' => 
            array (
              'exception' => 'Exception',
              'throwable' => 'Throwable',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'logger' => 'Luminova\\Logger\\Logger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'code',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'previous',
               'type' => '?Throwable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__toString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a string representation of the exception.
     *
     * @return string A formatted error message.
     */',
             'namespace' => 'Luminova\\Exceptions',
             'uses' => 
            array (
              'exception' => 'Exception',
              'throwable' => 'Throwable',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'logger' => 'Luminova\\Logger\\Logger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'handle',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Handle the exception based on the production environment.
     * 
     * @throws $this Exception
     */',
             'namespace' => 'Luminova\\Exceptions',
             'uses' => 
            array (
              'exception' => 'Exception',
              'throwable' => 'Throwable',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'logger' => 'Luminova\\Logger\\Logger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'logException',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Logs an exception
     *
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Exceptions',
             'uses' => 
            array (
              'exception' => 'Exception',
              'throwable' => 'Throwable',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'logger' => 'Luminova\\Logger\\Logger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'throwException',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Create and handle a Exception.
     *
     * @param string $message he exception message.
     * @param int $code The exception code (default: 500).
     * @param Throwable $previous  The previous exception if applicable (default: null).
     * 
     * @return void 
     * @throws $this Exception
     */',
             'namespace' => 'Luminova\\Exceptions',
             'uses' => 
            array (
              'exception' => 'Exception',
              'throwable' => 'Throwable',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'logger' => 'Luminova\\Logger\\Logger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'code',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'previous',
               'type' => '?Throwable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'highlightFile',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Creates a syntax-highlighted version of a PHP file.
     * @param string $file 
     * @param int $lineNumber 
     * @param int $lines
     * 
     * @return bool|string
     */',
             'namespace' => 'Luminova\\Exceptions',
             'uses' => 
            array (
              'exception' => 'Exception',
              'throwable' => 'Throwable',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'logger' => 'Luminova\\Logger\\Logger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'file',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'lineNumber',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'lines',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/BadMethodCallException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\BadMethodCallException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/ClassException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\ClassException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor for ClassException.
     *
     * @param string     $class   The exception class
     * @param int        $code      The exception code (default: 500).
     * @param Throwable $previous  The previous exception if applicable (default: null).
     */',
             'namespace' => 'Luminova\\Exceptions',
             'uses' => 
            array (
              'appexception' => 'Luminova\\Exceptions\\AppException',
              'throwable' => 'Throwable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'class',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'code',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'previous',
               'type' => '?Throwable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/DatabaseException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\DatabaseException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/DatabaseLimitException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\DatabaseLimitException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/ErrorException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\ErrorException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/FileException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\FileException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/InvalidException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\InvalidException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/InvalidObjectException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\InvalidObjectException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor for InvalidObjectException.
     *
     * @param string     $key   The exception key as message
     * @param int        $code      The exception code (default: 500).
     * @param Throwable $previous  The previous exception if applicable (default: null).
     */',
             'namespace' => 'Luminova\\Exceptions',
             'uses' => 
            array (
              'appexception' => 'Luminova\\Exceptions\\AppException',
              'throwable' => 'Throwable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'code',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'previous',
               'type' => '?Throwable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/LuminovaException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\LuminovaException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor for LuminovaException.
     *
     * @param string     $class   The exception class
     * @param int        $code      The exception code (default: 500).
     * @param Throwable $previous  The previous exception if applicable (default: null).
     */',
             'namespace' => 'Luminova\\Exceptions',
             'uses' => 
            array (
              'appexception' => 'Luminova\\Exceptions\\AppException',
              'throwable' => 'Throwable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'class',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'code',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'previous',
               'type' => '?Throwable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/NotFoundException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\NotFoundException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/RuntimeException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\RuntimeException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/ValidationException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\ValidationException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Exceptions/ViewNotFoundException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\ViewNotFoundException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor for ViewNotFoundException.
     *
     * @param string     $view   The exception view
     * @param int        $code      The exception code (default: 500).
     * @param Throwable $previous  The previous exception if applicable (default: null).
     */',
             'namespace' => 'Luminova\\Exceptions',
             'uses' => 
            array (
              'appexception' => 'Luminova\\Exceptions\\AppException',
              'throwable' => 'Throwable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'view',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'code',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'previous',
               'type' => '?Throwable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Document.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Functions\\Document',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'BADGE_LINK',
               'value' => '1',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'BADGE_SPAN',
               'value' => '2',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'badges',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Creates badges from an array of tags.
	 *
	 * @param array $tags List of tags [a, b, c] or [key => a, key => b, key => c].
	 * @param string $class CSS class for styling.
	 * @param int $type Badge type (self::BADGE_SPAN or self::BADGE_LINK).
	 * @param string $urlPrefix URL prefix to append if badge type is self::BADGE_LINK.
	 * 
	 * @deprecated this method is deprecated and will be removed in future
	 * @return string HTML span/link elements.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'tags',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'class',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'urlPrefix',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'buttonBadges',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Creates button badges from an array of tags.
	 *
	 * @param array $tags List of tags [a, b, c] or [key => a, key => b, key => c].
	 * @param string $class CSS class for styling.
	 * @param bool $truncate Whether to truncate badges if they exceed the limit.
	 * @param int $limit Maximum number of badges to display before truncating.
	 * @param string|null $selected The active badge value.
	 * 
	 * @deprecated this method is deprecated and will be removed in future
	 * @return string HTML span/button elements.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'tags',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'class',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'truncate',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'limit',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            4 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'selected',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Escaper.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Functions\\Escaper',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'encoding',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $encoding Escaper encoding
    */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'encodingFlags',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var int $encodingFlags Escaper encoding flag
    */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'int',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'supportedEncodings',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var array $supportedEncodings Escaper supported encodings
    */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor.
     * 
     * @param string $encoding The character encoding to use. Defaults to \'utf-8\'.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'encoding',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__call',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method to handle method calls dynamically.
     * 
     * @param string $name The name of the method being called.
     * @param array $arguments The arguments passed to the method.
     * 
     * @return mixed The result of the method call.
     * @throws BadMethodCallException When the called method does not exist.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'arguments',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getEncoding',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the character encoding used by the escaper.
     * 
     * @return string The character encoding.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'escapeHtml',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Escape HTML special characters.
     * 
     * @param string $string The string to be escaped.
     * @return string The escaped string.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'escapeHtmlAttr',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Escape HTML attribute values.
     * 
     * @param string $string The string to be escaped.
     * @return string The escaped string.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'escapeJs',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Escape JavaScript special characters.
     * 
     * @param array|string $string The string or array of strings to be escaped.
     * 
     * @return string The escaped string or array of strings.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'array|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'escapeCss',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Escape CSS special characters.
     * 
     * @param string $string The string to be escaped.
     * @return string The escaped string.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toUtf8',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Convert a string to UTF-8 encoding.
     * 
     * @param string $string The string to be converted.
     * @return string The converted string.
     * @throws RuntimeException When the string is not valid UTF-8 or cannot be converted.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fromUtf8',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Convert a string from UTF-8 encoding.
     * 
     * @param string $string The string to be converted.
     * @return string The converted string.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isUtf8',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if a string is UTF-8 encoded.
     * 
     * @param string $string The string to be checked.
     * @return bool True if the string is UTF-8 encoded, false otherwise.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'convertEncoding',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Convert a string to a different character encoding.
     * 
     * @param array|string $string The string or array of strings to be converted.
     * @param string $to The target character encoding.
     * @param array|string|null $from The source character encoding. Defaults to null (auto-detection).
     * @return string The converted string.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'array|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'to',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'from',
               'type' => 'null|array|string|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Files.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Functions\\Files',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'copy',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Copy files and folders from the source directory to the destination directory.
	 *
	 * @param string $origin The source directory.
	 * @param string $dest The destination directory.
	 *
	 * @return bool True if the copy operation is successful, false otherwise.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'origin',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'dest',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'download',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Download a file to the user\'s browser.
	 *
	 * @param string $file The full file path to download.
	 * @param string $name The filename as it will be shown in the download.
	 * @param bool $delete Whether to delete the file after download (default: false).
     * 
     * @return bool
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'file',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'delete',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'remove',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Deletes files and folders.
	 *
	 * @param string $dir   Directory to delete files.
	 * @param bool   $base  Remove the base directory once done (default is false).
     * 
	 * @return bool         Returns true once the function is called.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'dir',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'base',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/FunctionTrait.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedTraitNode::__set_state(array(
       'traitName' => 'Luminova\\Functions\\FunctionTrait',
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/Functions.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Functions\\Functions',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
 * Functions methods.
 *
 * @method static TorDetector         tor()       @return TorDetector
 * @method static Document            document()  @return Document
 * @method static Files               file()      @return Files
 * @method static IPAddress           ip()        @return IPAddress
 */',
         'namespace' => 'Luminova\\Functions',
         'uses' => 
        array (
          'basefunction' => 'Luminova\\Base\\BaseFunction',
        ),
         'constUses' => 
        array (
        ),
      )),
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseFunction',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/IPAddress.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Functions\\IPAddress',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Get the client\'s IP address.
	 *
	 * @return string The client\'s IP address or \'0.0.0.0\' if not found.
	*/',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'tordetector' => 'Luminova\\Functions\\TorDetector',
              'ipconfig' => 'App\\Controllers\\Config\\IPConfig',
              'time' => 'Luminova\\Time\\Time',
              'network' => 'Luminova\\Http\\Network',
              'curl' => 'Luminova\\Http\\Client\\Curl',
              'requestexception' => 'Luminova\\Http\\Exceptions\\RequestException',
              'connectexception' => 'Luminova\\Http\\Exceptions\\ConnectException',
              'clientexception' => 'Luminova\\Http\\Exceptions\\ClientException',
              'serverexception' => 'Luminova\\Http\\Exceptions\\ServerException',
              'paths' => 'Luminova\\Application\\Paths',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInfo',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * Get IP address information from third party API 
    * 
    * @param string|null $ip Ip address to lookup if null it will use current ip address
    * @param array $option additional option to store / return
    *
    * @return null|object $ipInfo
   */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'tordetector' => 'Luminova\\Functions\\TorDetector',
              'ipconfig' => 'App\\Controllers\\Config\\IPConfig',
              'time' => 'Luminova\\Time\\Time',
              'network' => 'Luminova\\Http\\Network',
              'curl' => 'Luminova\\Http\\Client\\Curl',
              'requestexception' => 'Luminova\\Http\\Exceptions\\RequestException',
              'connectexception' => 'Luminova\\Http\\Exceptions\\ConnectException',
              'clientexception' => 'Luminova\\Http\\Exceptions\\ClientException',
              'serverexception' => 'Luminova\\Http\\Exceptions\\ServerException',
              'paths' => 'Luminova\\Application\\Paths',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => '?object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'ip',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isValid',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Check if an IP address is valid.
   *
   * @param string $address The IP address to validate.
   * @param int    $version   The IP version to validate (4 for IPv4, 6 for IPv6).
   *
   * @return bool True if the IP address is valid, false otherwise.
   */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'tordetector' => 'Luminova\\Functions\\TorDetector',
              'ipconfig' => 'App\\Controllers\\Config\\IPConfig',
              'time' => 'Luminova\\Time\\Time',
              'network' => 'Luminova\\Http\\Network',
              'curl' => 'Luminova\\Http\\Client\\Curl',
              'requestexception' => 'Luminova\\Http\\Exceptions\\RequestException',
              'connectexception' => 'Luminova\\Http\\Exceptions\\ConnectException',
              'clientexception' => 'Luminova\\Http\\Exceptions\\ClientException',
              'serverexception' => 'Luminova\\Http\\Exceptions\\ServerException',
              'paths' => 'Luminova\\Application\\Paths',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'version',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toNumeric',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Convert an IP address to its numeric representation (IPv4 or IPv6).
   *
   * @param string $address The IP address to convert.
   *
   * @return int|string Numeric IP address or empty string on error.
   */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'tordetector' => 'Luminova\\Functions\\TorDetector',
              'ipconfig' => 'App\\Controllers\\Config\\IPConfig',
              'time' => 'Luminova\\Time\\Time',
              'network' => 'Luminova\\Http\\Network',
              'curl' => 'Luminova\\Http\\Client\\Curl',
              'requestexception' => 'Luminova\\Http\\Exceptions\\RequestException',
              'connectexception' => 'Luminova\\Http\\Exceptions\\ConnectException',
              'clientexception' => 'Luminova\\Http\\Exceptions\\ClientException',
              'serverexception' => 'Luminova\\Http\\Exceptions\\ServerException',
              'paths' => 'Luminova\\Application\\Paths',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int|string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toAddress',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Convert a numeric IP address to its string representation (IPv4 or IPv6).
   *
   * @param int|string $numeric The numeric IP address to convert.
   *
   * @return string IP address in string format or empty string on error.
   */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'tordetector' => 'Luminova\\Functions\\TorDetector',
              'ipconfig' => 'App\\Controllers\\Config\\IPConfig',
              'time' => 'Luminova\\Time\\Time',
              'network' => 'Luminova\\Http\\Network',
              'curl' => 'Luminova\\Http\\Client\\Curl',
              'requestexception' => 'Luminova\\Http\\Exceptions\\RequestException',
              'connectexception' => 'Luminova\\Http\\Exceptions\\ConnectException',
              'clientexception' => 'Luminova\\Http\\Exceptions\\ClientException',
              'serverexception' => 'Luminova\\Http\\Exceptions\\ServerException',
              'paths' => 'Luminova\\Application\\Paths',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'numeric',
               'type' => 'int|string|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isTor',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Checks if the given IP address is a Tor exit node
     * 
     * @param string|null $ip
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'tordetector' => 'Luminova\\Functions\\TorDetector',
              'ipconfig' => 'App\\Controllers\\Config\\IPConfig',
              'time' => 'Luminova\\Time\\Time',
              'network' => 'Luminova\\Http\\Network',
              'curl' => 'Luminova\\Http\\Client\\Curl',
              'requestexception' => 'Luminova\\Http\\Exceptions\\RequestException',
              'connectexception' => 'Luminova\\Http\\Exceptions\\ConnectException',
              'clientexception' => 'Luminova\\Http\\Exceptions\\ClientException',
              'serverexception' => 'Luminova\\Http\\Exceptions\\ServerException',
              'paths' => 'Luminova\\Application\\Paths',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'ip',
               'type' => 'string|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/MathTrait.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedTraitNode::__set_state(array(
       'traitName' => 'Luminova\\Functions\\MathTrait',
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/StringTrait.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedTraitNode::__set_state(array(
       'traitName' => 'Luminova\\Functions\\StringTrait',
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Functions/TorDetector.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Functions\\TorDetector',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isTorExitNode',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Checks if the given IP address is a Tor exit node
     * 
     * @param string $ip
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'ip',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/AsyncClientInterface.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedInterfaceNode::__set_state(array(
       'name' => 'Luminova\\Http\\AsyncClientInterface',
       'phpDoc' => NULL,
       'extends' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'sendAsync',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'GuzzleHttp\\Promise\\PromiseInterface',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'request',
               'type' => 'GuzzleHttp\\Psr7\\Request',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Curl.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\Client\\Curl',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Http\\NetworkClientInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Curl client constructor.
     * @param array $config client configuration
     * 
    */',
             'namespace' => 'Luminova\\Http\\Client',
             'uses' => 
            array (
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
              'networkclientinterface' => 'Luminova\\Http\\NetworkClientInterface',
              'requestexception' => 'Luminova\\Http\\Exceptions\\RequestException',
              'connectexception' => 'Luminova\\Http\\Exceptions\\ConnectException',
              'clientexception' => 'Luminova\\Http\\Exceptions\\ClientException',
              'serverexception' => 'Luminova\\Http\\Exceptions\\ServerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'config',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'request',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
      * Perform an HTTP request using cURL.
      *
      * @param string $method
      * @param string $url
      * @param array $data
      * @param array $headers
      *
      * @return NetworkResponse
      *
      * @throws RequestException
      * @throws ConnectException
      * @throws ClientException
      * @throws ServerException
    */',
             'namespace' => 'Luminova\\Http\\Client',
             'uses' => 
            array (
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
              'networkclientinterface' => 'Luminova\\Http\\NetworkClientInterface',
              'requestexception' => 'Luminova\\Http\\Exceptions\\RequestException',
              'connectexception' => 'Luminova\\Http\\Exceptions\\ConnectException',
              'clientexception' => 'Luminova\\Http\\Exceptions\\ClientException',
              'serverexception' => 'Luminova\\Http\\Exceptions\\ServerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Http\\NetworkResponse',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'method',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'url',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'headers',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Client/Guzzle.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\Client\\Guzzle',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Http\\NetworkClientInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Guzzle client constructor.
     * @param array $config client configuration
     * 
    */',
             'namespace' => 'Luminova\\Http\\Client',
             'uses' => 
            array (
              'guzzlehttpclient' => 'GuzzleHttp\\Client',
              'networkclientinterface' => 'Luminova\\Http\\NetworkClientInterface',
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
              'guzzlerequestexception' => 'GuzzleHttp\\Exception\\RequestException',
              'guzzleexception' => 'GuzzleHttp\\Exception\\GuzzleException',
              'requestexception' => 'Luminova\\Http\\Exceptions\\RequestException',
              'connectexception' => 'Luminova\\Http\\Exceptions\\ConnectException',
              'clientexception' => 'Luminova\\Http\\Exceptions\\ClientException',
              'serverexception' => 'Luminova\\Http\\Exceptions\\ServerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'config',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'request',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Perform an HTTP request using Guzzle.
     *
     * @param string $method
     * @param string $url
     * @param array $data
     * @param array $headers
     *
     * @return NetworkResponse
     * @throws RequestException
     * @throws ConnectException
     * @throws ClientException
     * @throws ServerException
     */',
             'namespace' => 'Luminova\\Http\\Client',
             'uses' => 
            array (
              'guzzlehttpclient' => 'GuzzleHttp\\Client',
              'networkclientinterface' => 'Luminova\\Http\\NetworkClientInterface',
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
              'guzzlerequestexception' => 'GuzzleHttp\\Exception\\RequestException',
              'guzzleexception' => 'GuzzleHttp\\Exception\\GuzzleException',
              'requestexception' => 'Luminova\\Http\\Exceptions\\RequestException',
              'connectexception' => 'Luminova\\Http\\Exceptions\\ConnectException',
              'clientexception' => 'Luminova\\Http\\Exceptions\\ClientException',
              'serverexception' => 'Luminova\\Http\\Exceptions\\ServerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Http\\NetworkResponse',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'method',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'url',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'headers',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/CurlAsyncClient.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\CurlAsyncClient',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Http\\AsyncClientInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'sendAsync',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'GuzzleHttp\\Promise\\PromiseInterface',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'request',
               'type' => 'GuzzleHttp\\Psr7\\Request',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Exceptions/ClientException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\Exceptions\\ClientException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Exceptions/ConnectException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\Exceptions\\ConnectException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Exceptions/RequestException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\Exceptions\\RequestException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Exceptions/ServerException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\Exceptions\\ServerException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/GuzzleAsyncClient.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\GuzzleAsyncClient',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Http\\AsyncClientInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'sendAsync',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'GuzzleHttp\\Promise\\PromiseInterface',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'request',
               'type' => 'GuzzleHttp\\Psr7\\Request',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Header.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\Header',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ERRORS',
               'value' => '[404 => \'404 Not Found\', 500 => \'500 Internal Server Error\']',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getHeaders',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get all request headers.
     *
     * @return array The request headers
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getServerVariable',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get server variables.
     *
     * @param string|null $name Optional name of the server variable
     *
     * @return mixed|array|string|null $_SERVER
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMethod',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the request method.
     *
     * @return string The request method
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getSystemHeaders',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get system headers.
     *
     * @return array The system headers
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getContentType',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the content type based on file extension and charset.
     *
     * @param string $extension The file extension
     * @param string $charset The character set
     *
     * @return string The content type
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'extension',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'charset',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getRoutingMethod',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the request method for routing, considering overrides.
     *
     * @return string The request method for routing
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getAuthorization',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get request header authorization header
     *
     * @return string 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Network.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\Network',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Network constructor with http client instance 
     *
     * @param NetworkClientInterface $client 
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'networkclientinterface' => 'Luminova\\Http\\NetworkClientInterface',
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'client',
               'type' => 'Luminova\\Http\\NetworkClientInterface',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'send',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send a request.
     *
     * @param string $method
     * @param string $url
     * @param array $data
     * @param array $headers
     *
     * @return NetworkResponse
     * @throws RequestException
     * @throws ConnectException
     * @throws ClientException
     * @throws ServerException
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'networkclientinterface' => 'Luminova\\Http\\NetworkClientInterface',
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Http\\NetworkResponse',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'method',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'url',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'headers',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Perform a GET request.
     *
     * @param string $url
     * @param array $data
     * @param array $headers
     *
     * @return NetworkResponse
     * @throws RequestException
     * @throws ConnectException
     * @throws ClientException
     * @throws ServerException
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'networkclientinterface' => 'Luminova\\Http\\NetworkClientInterface',
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Http\\NetworkResponse',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'url',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'headers',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fetch',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetch data using a GET request.
     *
     * @param string $url
     * @param array $headers
     *
     * @return NetworkResponse
     * @throws RequestException
     * @throws ConnectException
     * @throws ClientException
     * @throws ServerException
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'networkclientinterface' => 'Luminova\\Http\\NetworkClientInterface',
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Http\\NetworkResponse',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'url',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'headers',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'post',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Perform a POST request.
     *
     * @param string $url
     * @param array $data
     * @param array $headers
     *
     * @return NetworkResponse
     * @throws RequestException
     * @throws ConnectException
     * @throws ClientException
     * @throws ServerException
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'networkclientinterface' => 'Luminova\\Http\\NetworkClientInterface',
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Http\\NetworkResponse',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'url',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'headers',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'request',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Perform a request.
     *
     * @param string $method
     * @param string $url
     * @param array $data
     * @param array $headers
     *
     * @return NetworkResponse
     * @throws RequestException
     * @throws ConnectException
     * @throws ClientException
     * @throws ServerException
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'networkclientinterface' => 'Luminova\\Http\\NetworkClientInterface',
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Http\\NetworkResponse',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'method',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'url',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'headers',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/NetworkAsync.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\NetworkAsync',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'client',
               'type' => 'Luminova\\Http\\AsyncClientInterface',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'sendAsync',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'GuzzleHttp\\Promise\\PromiseInterface',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'request',
               'type' => 'Luminova\\Http\\NetworkRequest',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/NetworkClientInterface.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedInterfaceNode::__set_state(array(
       'name' => 'Luminova\\Http\\NetworkClientInterface',
       'phpDoc' => NULL,
       'extends' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'request',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send an HTTP request.
     *
     * @param string $method
     * @param string $url
     * @param array $data
     * @param array $headers
     *
     * @return NetworkResponse
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Http\\NetworkResponse',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'method',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'url',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'headers',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/NetworkRequest.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\NetworkRequest',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize 
     * 
     * @param string $method
     * @param string $url
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'method',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'url',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMethod',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get method  
     * @return string 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getUrl',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get url 
     * @return string 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/NetworkResponse.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\NetworkResponse',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initializes network response class instance
     * 
     * @param int $statusCode status code 
     * @param array $headers response headers 
     * @param mixed $body response body
     * @param mixed $contents response contents
     * 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'statusCode',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'headers',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'body',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'contents',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getStatusCode',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get request response https status code
     * 
     * @return int status code
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getHeaders',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get request response headers
     * 
     * @return array response headers
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getBody',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get request response body
     * 
     * @return mixed response body
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getContents',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get request response contents
     * 
     * @return mixed response contents
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInfos',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get request response infos
     * 
     * @return array response info
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Http/Request.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\Request',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initializes
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'find',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the Specified request method.
     *
     * @param string $method
     * @param string $key
     * @param mixed $default
     * 
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'method',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the GET request.
     *
     * @param string $key
     * @param mixed $default
     * 
     * @deprecated This method will be changed later to replace find(), use getGet() instead 
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getGet',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the GET request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPost',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the POST request.
     *
     * @param string $key
     * @param mixed $default
     * 
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the request context array.
     *
     * @param string $method request method context
     * @param string $key
     * @param string $index array index
     * @param mixed $default
     * 
     * @return mixed
     * @throws InvalidArgumentException
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'method',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPut',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the PUT request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getDelete',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the DELETE request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getOption',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the OPTIONS request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPatch',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the PATCH request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getHead',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the HEAD request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getConnect',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the CONNECT request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getTrace',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the TRACE request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPropfind',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the PROPFIND request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMkcol',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the MKCOL request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCopy',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the COPY request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMove',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the MOVE request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getLock',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the LOCK request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getUnlock',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the UNLOCK request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getBody',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the request body as an array.
     *
     * @return array
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getBodyAsObject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the request body as an object.
     *
     * @return object
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'object',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getFile',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the uploaded file information.
     * @param string $name file name
     * @return object|null
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => '?object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getFiles',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the uploaded files information.
     *
     * @return object|null
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => '?object',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMethod',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the request method 
     *
     * @return string The Request method
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isGet',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the request method is get
     *
     * @return bool
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isPost',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the request method is post
     *
     * @return bool
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isMethod',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the request method is
     * @param string $method 
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'method',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getContentType',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the request content type
     *
     * @return string The Request content type
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getAuthorization',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Get authorization header
     * 
     * @return string
	*/',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getAuthBearer',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * get access token from header
     * 
     * @return string|null
	*/',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => '?string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isCommandLine',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Is CLI?
     *
     * Test to see if a request was made from the command line.
     *
     * @return bool
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        31 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isSecure',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the current connection is secure
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        32 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isAJAX',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if request is ajax request
     * Test to see if a request contains the HTTP_X_REQUESTED_WITH header.
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        33 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getUri',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get request url
     * 
     * @return string 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        34 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getBrowser',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get user browser info
     * 
     * @return array 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        35 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'parseUserAgent',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Pass user agent string browser info
     * 
     * @param ?string $userAgent
     * @param bool $returnObject If set to true, this function will return an array instead of an object.
     * 
     * @return array|object 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array|object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'userAgent',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'returnObject',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        36 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getUserAgent',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get user agent string
     * 
     * @return string 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        37 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasHeader',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if request header exist
     * 
     * @param string $headerName
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        38 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'header',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get request header by key name.
     * 
     * @param string $key
     * 
     * @return Header|null header instance
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => '?Luminova\\Http\\Header',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        39 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getHeaders',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get request headers.
     *
     * @return array The request headers
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        40 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getHeader',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get request header.
     *
     * @return string The request headers
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'Luminova\\Exceptions\\InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Interface/ServicesInterface.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedInterfaceNode::__set_state(array(
       'name' => 'Luminova\\Interface\\ServicesInterface',
       'phpDoc' => NULL,
       'extends' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'bootstrap',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Bootstrap all your application services 
     * Add each service in a new line within the bootstrap method 
     * 
     * @example static::addService(ServiceTest::class, "Test Argument");
     * @example static::addService(ServiceTest::class, "Test Argument", true, false);
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Interface',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Languages/Translator.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Languages\\Translator',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Translate constructor.
     *
     * @param string $locale The language code (e.g., \'en\') for translations.
     */',
             'namespace' => 'Luminova\\Languages',
             'uses' => 
            array (
              'notfoundexception' => 'Luminova\\Exceptions\\NotFoundException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setLocale',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set locale 
     *
     * @param string $locale The locale
     * 
     * @return $this
     */',
             'namespace' => 'Luminova\\Languages',
             'uses' => 
            array (
              'notfoundexception' => 'Luminova\\Exceptions\\NotFoundException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getLocale',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get locale
     * 
     * @return string $this->locale
    */',
             'namespace' => 'Luminova\\Languages',
             'uses' => 
            array (
              'notfoundexception' => 'Luminova\\Exceptions\\NotFoundException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the translation for the given language key.
     *
     * @param string $lang The language key (e.g., \'filename.key1.key2\').
     * @param string $default The fallback value to return if translation is not found.
     * @param array $placeholders placeholders
     * 
     * @return string The translation text or the fallback value if any.
     * @throws NotFoundException When translation file cannot be loaded.
     */',
             'namespace' => 'Luminova\\Languages',
             'uses' => 
            array (
              'notfoundexception' => 'Luminova\\Exceptions\\NotFoundException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'lang',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'placeholders',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Library/Importer.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Library\\Importer',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'import',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Import a custom library into your project 
     * You must place your external libraries in libraries/libs/ directory
     * 
     * @param string $library the name of the library
     * @example Foo/Bar/Baz
     * @example Foo/Bar/Baz.php
     * @example Foo.php
     * @example Foo
     * 
     * @return bool true if the library was successfully imported
     * @throws RuntimeException if library could not be found
    */',
             'namespace' => 'Luminova\\Library',
             'uses' => 
            array (
              'runtimeexception' => 'Luminova\\Exceptions\\RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'library',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Logger/Logger.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Logger\\Logger',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Psr\\Log\\LoggerInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setLogger',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set a logger instance on the object.
     *
     * @param LoggerInterface $logger The logger instance.
     * 
     * @return self 
    */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'logger',
               'type' => 'Psr\\Log\\LoggerInterface',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'emergency',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log an emergency message.
     *
     * @param string $message The emergency message to log.
     * @param array $context Additional context data (optional).
     * 
     * @return void 
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'alert',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log an alert message.
     *
     * @param string $message The alert message to log.
     * @param array $context Additional context data (optional).
     * 
     * @return void 
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'critical',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a critical message.
     *
     * @param string $message The critical message to log.
     * @param array $context Additional context data (optional).
     * 
     * @return void 
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'error',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log an error message.
     *
     * @param string $message The error message to log.
     * @param array $context Additional context data (optional).
     * 
     * @return void 
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'warning',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a warning message.
     *
     * @param string $message The warning message to log.
     * @param array $context Additional context data (optional).
     * 
     * @return void 
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'notice',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a notice message.
     *
     * @param string $message The notice message to log.
     * @param array $context Additional context data (optional).
     * 
     * @return void 
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'info',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log an info message.
     *
     * @param string $message The info message to log.
     * @param array $context Additional context data (optional).
     * 
     * @return void 
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'debug',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a debug message.
     *
     * @param string $message The debug message to log.
     * @param array $context Additional context data (optional).
     * 
     * @return void 
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'log',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a message.
     *
     * @param string $level The log level.
     * @param string $message The log message.
     * @param array $context Additional context data (optional).
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'level',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Logger/LoggerAware.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Logger\\LoggerAware',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Psr\\Log\\LoggerInterface',
        1 => 'Psr\\Log\\LoggerAwareInterface',
      ),
       'usedTraits' => 
      array (
        0 => 'Psr\\Log\\LoggerAwareTrait',
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setLogger',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set a logger instance on the object.
     *
     * @param LoggerInterface $logger The logger instance.
    */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loggerawareinterface' => 'Psr\\Log\\LoggerAwareInterface',
              'loggerawaretrait' => 'Psr\\Log\\LoggerAwareTrait',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'logger',
               'type' => 'Psr\\Log\\LoggerInterface',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'emergency',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log an emergency message.
     *
     * @param string $message The emergency message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loggerawareinterface' => 'Psr\\Log\\LoggerAwareInterface',
              'loggerawaretrait' => 'Psr\\Log\\LoggerAwareTrait',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'alert',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log an alert message.
     *
     * @param string $message The alert message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loggerawareinterface' => 'Psr\\Log\\LoggerAwareInterface',
              'loggerawaretrait' => 'Psr\\Log\\LoggerAwareTrait',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'critical',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a critical message.
     *
     * @param string $message The critical message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loggerawareinterface' => 'Psr\\Log\\LoggerAwareInterface',
              'loggerawaretrait' => 'Psr\\Log\\LoggerAwareTrait',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'error',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log an error message.
     *
     * @param string $message The error message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loggerawareinterface' => 'Psr\\Log\\LoggerAwareInterface',
              'loggerawaretrait' => 'Psr\\Log\\LoggerAwareTrait',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'warning',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a warning message.
     *
     * @param string $message The warning message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loggerawareinterface' => 'Psr\\Log\\LoggerAwareInterface',
              'loggerawaretrait' => 'Psr\\Log\\LoggerAwareTrait',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'notice',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a notice message.
     *
     * @param string $message The notice message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loggerawareinterface' => 'Psr\\Log\\LoggerAwareInterface',
              'loggerawaretrait' => 'Psr\\Log\\LoggerAwareTrait',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'info',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log an info message.
     *
     * @param string $message The info message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loggerawareinterface' => 'Psr\\Log\\LoggerAwareInterface',
              'loggerawaretrait' => 'Psr\\Log\\LoggerAwareTrait',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'debug',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a debug message.
     *
     * @param string $message The debug message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loggerawareinterface' => 'Psr\\Log\\LoggerAwareInterface',
              'loggerawaretrait' => 'Psr\\Log\\LoggerAwareTrait',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'log',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a message at a specified log level.
     *
     * @param string $level The log level (e.g., "emergency," "error," "info").
     * @param string $message The message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loggerawareinterface' => 'Psr\\Log\\LoggerAwareInterface',
              'loggerawaretrait' => 'Psr\\Log\\LoggerAwareTrait',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'level',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Logger/NovaLogger.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Logger\\NovaLogger',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Psr\\Log\\AbstractLogger',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'EXCEPTION',
               'value' => '\'exception\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'PHP',
               'value' => '\'php_errors\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize NovaLogger
     * 
     * @param string $extension log file dot file extension
    */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loglevel' => 'Psr\\Log\\LogLevel',
              'abstractlogger' => 'Psr\\Log\\AbstractLogger',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'extension',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'exception',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log an exception message.
     *
     * @param string $message The EXCEPTION message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loglevel' => 'Psr\\Log\\LogLevel',
              'abstractlogger' => 'Psr\\Log\\AbstractLogger',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'php',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log an php message.
     *
     * @param string $message The php message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loglevel' => 'Psr\\Log\\LogLevel',
              'abstractlogger' => 'Psr\\Log\\AbstractLogger',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'log',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a message at the given level.
     *
     * @param string $level The log level.
     * @param string $message The log message.
     * @param array $context Additional context data (optional).
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loglevel' => 'Psr\\Log\\LogLevel',
              'abstractlogger' => 'Psr\\Log\\AbstractLogger',
              'time' => 'Luminova\\Time\\Time',
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'level',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Models/Model.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Models\\Model',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'table',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     *  Table name should be specified in child models.
     * @var string $table
    */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'primaryKey',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     *  Default primary key column.
     * @var string $primaryKey
    */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'allowedFields',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fields that can be inserted or updated.
     * @var array $allowedFields
    */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'validationRules',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Input validation rules for
     * @var array $validationRules
    */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'validationMessages',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Input validation message for rules
     * @var array $validationMessages
    */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'query',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Database query class instance
     * @var Query $query
    */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor for the Model class.
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'insertRecord',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Insert a new record into the database.
     *
     * @param array $data The data to be inserted.
     * 
     * @return int 
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'updateRecord',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Update a record in the database.
     *
     * @param string $key The primary key value for the record to be updated.
     * @param array $data The data to be updated.
     * 
     * @return int 
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getRecord',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a record from the database.
     *
     * @param string $key The primary key value for the record to retrieve.
     * @param array $fields The fields to retrieve (default is all).
     * 
     * @return mixed An associative array representing the record, or null if not found.
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'fields',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'selectRecords',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Select records from the database.
     *
     * @param string $key The primary key value for the record to start the selection from.
     * @param array $fields Additional selection criteria.
     * 
     * @return mixed An array of records matching the criteria.
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'fields',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'deleteRecord',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Delete a record from the database.
     *
     * @param string $key The primary key value for the record to be deleted.
     * 
     * @return int 
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getTable',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the name of the database table associated with this model.
     *
     * @return string The name of the database table.
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getKey',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the primary key field name for this model.
     *
     * @return string The primary key field name.
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Models/PushMessage.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Models\\PushMessage',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * PushMessage constructor.
     *
     * @param string $type (Optional) The type of push message.
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setTitle',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the title of the notification.
     *
     * @param string $title
     * @return self
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'title',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setBody',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the body of the notification.
     *
     * @param string $body
     * @return self
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'body',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setIcon',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the icon for the notification.
     *
     * @param string $icon
     * @return self
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'icon',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setSound',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the sound for the notification.
     *
     * @param string $sound
     * @return self
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'sound',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setVibrate',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the vibrate pattern for the notification.
     *
     * @param array $vibrate
     * @return self
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'vibrate',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setClickAction',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the click action for the notification.
     *
     * @param string $click_action
     * @return self
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'click_action',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setTag',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set a tag for the notification.
     *
     * @param string $tag
     * @return self
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'tag',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setColor',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the color for the notification.
     *
     * @param string $color
     * @return self
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'color',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addData',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add custom data to the notification.
     *
     * @param string $key
     * @param string $value
     * @return self
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setTokens',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set an array of tokens to send the push message to.
     *
     * @param array $tokens
     * @return self
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'tokens',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getTokens',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the array of tokens to send the push message to.
     *
     * @return array
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getTitle',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the title of the notification.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getBody',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the body of the notification.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getData',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the data of the notification.
     *
     * @return array
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Convert the PushMessage instance to an array.
     *
     * @return array
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebasePusher.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Notifications\\FirebasePusher',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
 * Firebase Pusher
 *
 * This class handles sending push notifications using Firebase Cloud Messaging.
 */',
         'namespace' => 'Luminova\\Notifications',
         'uses' => 
        array (
          'factory' => 'Kreait\\Firebase\\Factory',
          'cloudmessage' => 'Kreait\\Firebase\\Messaging\\CloudMessage',
          'notification' => 'Kreait\\Firebase\\Messaging\\Notification',
          'configuration' => 'Luminova\\Config\\Configuration',
          'errorexception' => 'Luminova\\Exceptions\\ErrorException',
          'pushmessage' => 'Luminova\\Models\\PushMessage',
          'exception' => 'Exception',
        ),
         'constUses' => 
        array (
        ),
      )),
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'factory',
          ),
           'phpDoc' => NULL,
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'TO_ID',
               'value' => '"id"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'TO_IDS',
               'value' => '"ids"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'TO_TOPIC',
               'value' => '"topic"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor
     *
     * @param string $filename The filename of the service account JSON file.
     * @param string $dir      The directory where the service account file is located.
     */',
             'namespace' => 'Luminova\\Notifications',
             'uses' => 
            array (
              'factory' => 'Kreait\\Firebase\\Factory',
              'cloudmessage' => 'Kreait\\Firebase\\Messaging\\CloudMessage',
              'notification' => 'Kreait\\Firebase\\Messaging\\Notification',
              'configuration' => 'Luminova\\Config\\Configuration',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'pushmessage' => 'Luminova\\Models\\PushMessage',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'filename',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'dir',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'messaging',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the Firebase messaging instance.
     *
     * @return object The Firebase messaging instance.
     */',
             'namespace' => 'Luminova\\Notifications',
             'uses' => 
            array (
              'factory' => 'Kreait\\Firebase\\Factory',
              'cloudmessage' => 'Kreait\\Firebase\\Messaging\\CloudMessage',
              'notification' => 'Kreait\\Firebase\\Messaging\\Notification',
              'configuration' => 'Luminova\\Config\\Configuration',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'pushmessage' => 'Luminova\\Models\\PushMessage',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'object',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'sendToId',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send a notification to a specific device by token.
     *
     * @param array $data The notification data.
     *
     * @return mixed The response from Firebase Cloud Messaging.
     */',
             'namespace' => 'Luminova\\Notifications',
             'uses' => 
            array (
              'factory' => 'Kreait\\Firebase\\Factory',
              'cloudmessage' => 'Kreait\\Firebase\\Messaging\\CloudMessage',
              'notification' => 'Kreait\\Firebase\\Messaging\\Notification',
              'configuration' => 'Luminova\\Config\\Configuration',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'pushmessage' => 'Luminova\\Models\\PushMessage',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'channel',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send a notification to a topic.
     *
     * @param array $data The notification data.
     *
     * @return mixed The response from Firebase Cloud Messaging.
    */',
             'namespace' => 'Luminova\\Notifications',
             'uses' => 
            array (
              'factory' => 'Kreait\\Firebase\\Factory',
              'cloudmessage' => 'Kreait\\Firebase\\Messaging\\CloudMessage',
              'notification' => 'Kreait\\Firebase\\Messaging\\Notification',
              'configuration' => 'Luminova\\Config\\Configuration',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'pushmessage' => 'Luminova\\Models\\PushMessage',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'cast',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send notifications to multiple devices.
     *
     * @param array $data The notification data.
     *
     * @return mixed The response from Firebase Cloud Messaging.
     */',
             'namespace' => 'Luminova\\Notifications',
             'uses' => 
            array (
              'factory' => 'Kreait\\Firebase\\Factory',
              'cloudmessage' => 'Kreait\\Firebase\\Messaging\\CloudMessage',
              'notification' => 'Kreait\\Firebase\\Messaging\\Notification',
              'configuration' => 'Luminova\\Config\\Configuration',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'pushmessage' => 'Luminova\\Models\\PushMessage',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'push',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send notifications using a PushMessage object.
     *
     * @param PushMessage $message The PushMessage instance.
     *
     * @return mixed The response from Firebase Cloud Messaging.
     */',
             'namespace' => 'Luminova\\Notifications',
             'uses' => 
            array (
              'factory' => 'Kreait\\Firebase\\Factory',
              'cloudmessage' => 'Kreait\\Firebase\\Messaging\\CloudMessage',
              'notification' => 'Kreait\\Firebase\\Messaging\\Notification',
              'configuration' => 'Luminova\\Config\\Configuration',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'pushmessage' => 'Luminova\\Models\\PushMessage',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'Luminova\\Models\\PushMessage',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'device',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'Luminova\\Models\\PushMessage',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'subscribe',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'token',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'topic',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'send',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send notifications based on the type (to ID, to IDs, to topic).
     *
     * @param array  $data The notification data.
     * @param string $type The type of notification (TO_ID, TO_IDS, TO_TOPIC).
     *
     * @return mixed The response from Firebase Cloud Messaging.
     */',
             'namespace' => 'Luminova\\Notifications',
             'uses' => 
            array (
              'factory' => 'Kreait\\Firebase\\Factory',
              'cloudmessage' => 'Kreait\\Firebase\\Messaging\\CloudMessage',
              'notification' => 'Kreait\\Firebase\\Messaging\\Notification',
              'configuration' => 'Luminova\\Config\\Configuration',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'pushmessage' => 'Luminova\\Models\\PushMessage',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Notifications/FirebaseRealtime.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Notifications\\FirebaseRealtime',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'database',
          ),
           'phpDoc' => NULL,
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'tableName',
          ),
           'phpDoc' => NULL,
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'projectId',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'databaseUri',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setTable',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'table',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getTable',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'child',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'insert',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rowId',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'update',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rowId',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'delete',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rowId',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'columnId',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Bootstrap.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Routing\\Bootstrap',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => true,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'WEB',
               'value' => '\'web\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Default WEB controller type
     * 
     * @var string WEB
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'API',
               'value' => '\'api\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Default API controller type
     * 
     * @var string API
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'CLI',
               'value' => '\'cli\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Default CLI controller type
     * 
     * @var string CLI
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'CONSOLE',
               'value' => '\'console\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Default CONSOLE controller type
     * 
     * @var string CONSOLE
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'WEBHOOK',
               'value' => '\'webhook\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Default WEBHOOK controller type
     * 
     * @var string WEBHOOK
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize Constructor
     * 
     * @param string  $name  Bootstrap route name
     * @param ?callable $onError Bootstrap Callback function to execute
     */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'onError',
               'type' => '?callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get bootstrap route name
     * 
     * @return string $this->name route instance type
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getErrorHandler',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get bootstrap controller error callback handler
     * 
     * @return ?callable $this->onError 
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => '?callable',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstances',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get bootstrap registered custom instance
     * 
     * @return array static::$instances 
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Routing/Router.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Routing\\Router',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => true,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'before',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Before middleware route, executes the callback function before other routing will be executed
     *
     * @param string  $methods  Allowed methods, can be serrated with | pipe symbol
     * @param string  $pattern A route pattern or template view name
     * @param callable|string $callback Callback function to execute
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'methods',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'after',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * After middleware route, executes the callback function after request was executed successfully.
     *
     * @param string  $methods  Allowed methods, can be serrated with | pipe symbol
     * @param string  $pattern A route pattern or template view name
     * @param callable|string $callback Callback function to execute
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'methods',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'always',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Always middleware route, executes the callback function no matter if request was successful or not
     *
     * @param string  $methods  Allowed methods, can be serrated with | pipe symbol
     * @param string  $pattern A route pattern or template view name
     * @param callable|string $callback Callback function to execute
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'methods',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'capture',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Capture front controller request method and pattern and execute callback
     *
     * @param string  $methods Allowed methods, can be serrated with | pipe symbol
     * @param string  $pattern A route pattern or template view name
     * @param callable|string $callback Callback function to execute
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'methods',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'authenticate',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Capture front controller command middleware security and execute callback
     *
     * @param callable|string $pattern Allowed command pattern, script name or callback function
     * @param callable|string $callback Callback function to execute
     * @param array $options Optional options
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'command',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Capture front controller command request names and execute callback
     *
     * @param string $pattern Allowed command pattern or script name
     * @param callable|string $callback Callback function to execute
     * @param array $options Optional options
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'any',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Capture any method
     *
     * @param string $pattern A route pattern or template view name
     * @param callable|string $callback Handle callback for router
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Shorthand for a route accessed using GET.
     *
     * @param string pattern A route pattern or template view name
     * @param callable|string $callback  Handle callback for router
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'post',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Post shorthand for a route capture
     *
     * @param string  $pattern A route pattern or template view name
     * @param callable|string $callback Callback function to execute
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'patch',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Patch shorthand for a route capture
     *
     * @param string  $pattern A route pattern or template view name
     * @param callable|string $callback Handle callback for router
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'delete',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Delete shorthand for a route capture
     *
     * @param string $pattern A route pattern or template view name
     * @param callable|string $callback Callback function to execute
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'put',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Put shorthand for a route capture
     *
     * @param string $pattern A route pattern or template view name
     * @param callable|string $callback Callback function to execute
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'options',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Options shorthand for a route capture
     *
     * @param string $pattern A route pattern or template view name
     * @param callable|string $callback Callback function to execute
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'bind',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Binds a collection of routes in a single base route.
     *
     * @param string  $group The route group pattern to bind the callbacks on
     * @param callable $callback Callback function to execute
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'group',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'bootstraps',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Bootstrap a group 
     *
     * @param BaseApplication $application application instance
     * @param Bootstrap ...$callbacks callable arguments
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'application',
               'type' => 'Luminova\\Base\\BaseApplication',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callbacks',
               'type' => 'Luminova\\Routing\\Bootstrap',
               'byRef' => false,
               'variadic' => true,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addNamespace',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Register a class namespace to use across the application
     *
     * @param string $namespace Class namespace
     * 
     * @return void
     * @throws ErrorException
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'namespace',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Run the router and application: 
     * Loop all defined CLI and HTTP before middleware\'s, after routes and command routes
     * Execute callback function if method matches view  or command name.
     *
     * @param ?callable $callback Optional final callback function to execute after run
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => '?callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setErrorHandler',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the error handling function.
     *
     * @param callable $match Matching callback function to be executed
     * @param callable $callback The function to be executed
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'match',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'triggerError',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Triggers error response
     *
     * @param int $status Status code
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'status',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getNamespaces',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get list of registered namespace
     *
     * @return array List of registered namespaces
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getBase',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Return server base Path, and define it if isn\'t defined.
     *
     * @return string
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getView',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current view relative URI.
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getViews',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current view array of segment.
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getViewPosition',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current view segment by position index.
     * 
     * @param int $index position index
     * 
     * @return string view segment
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getFirstView',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current view first segment.
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getLastView',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current view last segment.
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getSecondToLastView',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current view segment before last segment.
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setBasePath',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set application router base path
     * 
     * @param string $base
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'base',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Csrf.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Security\\Csrf',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'generateToken',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Generates a CSRF token.
     *
     * @return string The generated CSRF token.
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'refreshToken',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Generate and Stores the CSRF token in the session.
     * After it has been validated 
     * 
     * @return string $token 
     */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getToken',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Retrieves the CSRF token from the session or generates a new one if not available.
     *
     * @return string The CSRF token.
     */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'inputToken',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Generates an HTML input field for the CSRF token.
     * 
     * @return void echo input field with generated CSRF token
     */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'metaToken',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Generates an HTML meta tag for the CSRF token.
     * 
     * @return void echo input meta tag with generated CSRF token
     */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validateToken',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Validates a submitted CSRF token.
     *
     * @param string $token The token submitted by the user.
     *
     * @return bool True if the submitted token is valid, false otherwise.
     */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'token',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__call',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Call static method as none static 
     * 
     * @param string $name method name 
     * @param array $arguments method arguments
     * 
     * @return mixed 
     * @throws BadMethodCallException
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'badmethodcallexception' => 'Luminova\\Exceptions\\BadMethodCallException',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'arguments',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/AES.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Security\\Encryption\\AES',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
 * AES encryption class.
 */',
         'namespace' => 'Luminova\\Security\\Encryption',
         'uses' => 
        array (
          'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
          'errorexception' => 'Luminova\\Exceptions\\ErrorException',
          'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
        ),
         'constUses' => 
        array (
        ),
      )),
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Security\\Encryption\\EncryptionInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'key',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var int $key
    */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'data',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var int $data
    */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'method',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var int $method
    */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'iv',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var int $iv
    */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'ivLength',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var int $ivLength
    */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'int',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'options',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var int $options
    */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'int',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor.
     *
     * @param string|null $key
     * @param int|null $blockSize
     * @param string $mode
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'blockSize',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'mode',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setData',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set data to encrypt/decrypt.
     *
     * @param string|null $data
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setKey',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set encryption key.
     *
     * @param string|null $key
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setInitializationVector',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set initialization vector (IV).
     *
     * @param string|null $iv
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'iv',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setIvLength',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set IV length based on the encryption method.
     * 
     * @return void 
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setMethod',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @param int|null $blockSize
     * @param string $mode
     * 
     * @return void 
     * @throws ErrorException
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'blockSize',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'mode',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validateParams',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Validate encryption parameters.
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'randomInitializationVector',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Generate a random initialization vector (IV).
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInitializationVectorFrom',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get IV from a string.
     *
     * @param string $string
     * 
     * @return string
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'encrypt',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Encrypt data.
     *
     * @return string
     * @throws InvalidException
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'decrypt',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Decrypt data.
     *
     * @return string|null
     * @throws InvalidException
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => '?string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/Encryption/EncryptionInterface.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedInterfaceNode::__set_state(array(
       'name' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
       'phpDoc' => NULL,
       'extends' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setData',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set data to encrypt/decrypt.
     *
     * @param string|null $data
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setKey',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set encryption key.
     *
     * @param string|null $key
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setInitializationVector',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set initialization vector (IV).
     *
     * @param string|null $iv
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'iv',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setIvLength',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set IV length based on the encryption method.
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setMethod',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @param int|null $blockSize
     * @param string $mode
     * @throws ErrorException
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'blockSize',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'mode',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validateParams',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Validate encryption parameters.
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'randomInitializationVector',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Generate a random initialization vector (IV).
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInitializationVectorFrom',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get IV from a string.
     *
     * @param string $string
     * @return string
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'encrypt',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Encrypt data.
     *
     * @return string
     * @throws InvalidException
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'decrypt',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Decrypt data.
     *
     * @return string|null
     * @throws InvalidException
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => '?string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/InputValidator.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Security\\InputValidator',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Security\\ValidatorInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'validationRules',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var array $validationRules validation rules
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'errorMessages',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var array $errorMessages validation error messages
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validate',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Validate entries
     * @param array $input array input to validate it fields
     * @param array $rules Optional passed rules as array
     * 
     * @return self Use $validate->isPassed() method to check the validity of
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'input',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rules',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validateEntries',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Validate entries
     * @param array $input array input to validate it fields
     * @param array $rules Optional passed rules as array
     * 
     * @return boolean true if the rule passed else false
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'input',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rules',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validateField',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Validate fields 
     * 
     * @param string $ruleName The name of the rule to validate
     * @param mixed $value The value to validate
     * @param string $rule The rule line
     * @param string $param additional validation parameters
     * 
     * @return boolean true if the rule passed else false
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'ruleName',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rule',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'param',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getErrors',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Gets validation error
     * @return array validation error message
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getError',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get validation error messages
     * 
     * @param string $field messages input field name
     * 
     * @return string Error message
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'field',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getErrorField',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get validation error filed
     * 
     * @param string $field messages input field name
     * 
     * @return string Error field
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'field',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getErrorLine',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get validation error messages
     * 
     * @param int $fieldIndex field index
     * @param int $errorsIndex error index
     * 
     * @return string Error message
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'fieldIndex',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'errorsIndex',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCurrentErrorInfo',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get validation error information
     * 
     * @param int $fieldIndex field index
     * 
     * @return array Error information
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'fieldIndex',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCurrentErrorField',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get validation current error field
     * 
     * @param string $prefix prefix
     * 
     * @return string $errorField
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'prefix',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getErrorByIndices',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get validation error messages
     * @param int $indexField field index
     * @param int $indexErrors error index
     * 
     * @deprecated This method will be removed in a future release use getErrorLine instead
     * @return string Error message
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'indexField',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'indexErrors',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addError',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add validation error message
     * 
     * @param string $field input field name
     * @param string $ruleName Rule name
     * @param mixed $value Filed valu
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'field',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'ruleName',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setRules',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set rules array array with optional messages
     * @param array $rules validation rules
     * @param array $message optional pass response message for validation
     * @return self InputValidator instance 
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rules',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'messages',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addRule',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add single rule with optional message
     * @param string $field validation rule input field name
     * @param array $messages optional pass response message for rule validation
     * @return self InputValidator instance 
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'field',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rules',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'messages',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setMessages',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set array list rule messages
     * @param array $messages messages to set
     * @return self InputValidator instance 
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'messages',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addMessage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set a single validation rule messages
     * @param string $field messages input field name
     * @param array $messages messages to set
     * @return self InputValidator instance 
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'field',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'messages',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isPassed',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if validation passed
     * 
     * @return boolean true if the rule passed else false
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Security/ValidatorInterface.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedInterfaceNode::__set_state(array(
       'name' => 'Luminova\\Security\\ValidatorInterface',
       'phpDoc' => NULL,
       'extends' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validate',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Validate entries
   * @param array $input array input to validate it fields
   * @param array $rules Optional passed rules as array
   * 
   * @return self Use $validate->isPased() method to check the validity of
  */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'input',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rules',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validateEntries',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Validate entries
   * @param array $input array input to validate it fields
   * @param array $rules Optional passed rules as array
   * @return boolean true if the rule passed else false
  */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'input',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rules',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validateField',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Validate fields 
   * @param string $ruleName The name of the rule to validate
   * @param string $value The value to validate
   * @param string $rule The rule line
   * @param string $param additional validation parameters
   * @return boolean true if the rule passed else false
  */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'ruleName',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rule',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'param',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getErrors',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Gets validation error
   * @return array validation error message
  */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getError',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Get validation error messages
   * @param string $field messages input field name
   * @return string Error message
  */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'field',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addError',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Add validation error message
   * 
   * @param string $field input field name
   * @param string $ruleName Rule name
   * @param string $message Error message
   * 
   * @return void 
  */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'field',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'ruleName',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setRules',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Set rules array array with optional messages
   * @param array $rules validation rules
   * @param array $message optional pass response message for validation
   * @return self InputValidator instance 
  */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rules',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'messages',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addRule',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Add single rule with optional message
   * @param string $field validation rule input field name
   * @param array $messages optional pass response message for rule validation
   * @return self InputValidator instance 
  */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'field',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rules',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'messages',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setMessages',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Set array list rule messages
   * @param array $messages messages to set
   * @return self InputValidator instance 
  */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'messages',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addMessage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Set a single validation rule messages
   * @param string $field messages input field name
   * @param array $messages messages to set
   * @return self InputValidator instance 
  */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'field',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'messages',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getErrorLine',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Get validation error messages
   * @param int $indexField field index
   * @param int $indexErrors error index
   * 
   * @return string Error message
  */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'indexField',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'indexErrors',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isPassed',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Check if validation passed
   * 
   * @return boolean true if the rule passed else false
  */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Seo/Meta.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Seo\\Meta',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Singleton class
     * 
     * @return static $instance 
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'static',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'create',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Create object
     *
     * @param string $appName The name of the application.
     * @param string $baseUrl The base URL of the application.
     * 
     * @return void 
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'appName',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'baseUrl',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setLink',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the link URL for the web page.
     *
     * @param string $link The link URL.
     * 
     * @return self
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'link',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setConfig',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the configuration for the Meta instance.
     *
     * @param array $config The extended configuration.
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'config',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setTitle',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the page title for SEO purposes.
     *
     * @param string $title The page title.
     * @return void
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'title',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setCanonical',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the canonical URL for SEO purposes.
     *
     * @param string $canonical The canonical URL.
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'canonical',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setCanonicalVersion',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the canonical version of the URL for SEO purposes.
     *
     * @param string $link The link URL.
     * @param string $view The view URL.
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'link',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'view',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setPageTitle',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the page title for SEO purposes.
     *
     * @param string $title The page title.
     * @return void
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'title',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toJson',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Converts the schema data to JSON format.
     *
     * @return string The JSON representation of the schema data.
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'generateScheme',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Generate structured data schema for SEO purposes.
     *
     * @return array The structured data schema.
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMetaTags',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Generates HTML meta tags for SEO purposes.
     *
     * @return string The HTML meta tags.
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getObjectGraph',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Gets the HTML code for embedding the schema in a web page.
     *
     * @return string The HTML code for embedding the schema.
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/CookieManager.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Sessions\\CookieManager',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Sessions\\SessionInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'storage',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $storage
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Session constructor.
     *
     * @param string $storage The session storage key.
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setConfig',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Set cookie options 
     * 
     * @param string $config CookieConfig class name
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'config',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set storage key
     *
     * @param string $storage The session storage key.
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get storage key
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'add',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add a key-value pair to the session data.
     *
     * @param string $key The key.
     * @param mixed $value The value.
     * 
     * @return self
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'set',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Set key and value to session
     * 
     * @param string $key key to set
     * @param mixed $value value to set
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * get data from session
     * 
     * @param string $index key to get
     * @param mixed $default default value 
     * 
     * @return mixed
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getFrom',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data from specified storage instance
     * 
     * @param string $index value key to get
     * @param string $storage Storage key name
     * 
     * @return mixed
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setTo',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data from specified storage instance
     * 
     * @param string $index value key to get
     * @param mixed $value data to set
     * @param string $storage Storage key name
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'online',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if session user is online from any storage instance
     * 
     * @param string $storage Optional storage key 
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'clear',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Clear all data from a specific session storage by passing the storage key.
     *
     * @param string $storage Storage key to unset.
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'remove',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Remove key from the current session storage by passing the key.
     *
     * @param string $index Key index to unset.
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'has',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if key exists in session
     * 
     * @param string $key
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if storage key exists in session
     * 
     * @param string $storage
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getResult',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get all stored session as array
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as array from current session storage 
     * 
     * @param string $index optional key to get
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toObject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as object from current session storage
     * 
     * @param string $index optional key to get
     * 
     * @return object
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toAs',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as object or array from current session storage
     * 
     * @param string $type return type of object or array
     * @param string $index optional key to get
     * 
     * @return object|array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'object|array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getContents',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as array from storage 
     * 
     * @param string $storage optional storage key 
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/Session.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Sessions\\Session',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'manager',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * session interface
     * @var SessionInterface $manager
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?Luminova\\Sessions\\SessionInterface',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'logger',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * logger interface
     * @var LoggerInterface $logger
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?Psr\\Log\\LoggerInterface',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'instance',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * static class instance
     * @var static $instance 
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?self',
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'config',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * session config instance
     * @var string $config 
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initializes session constructor
     *
     * @param SessionInterface $manager The session manager.
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'manager',
               'type' => '?Luminova\\Sessions\\SessionInterface',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get an instance of the Session class.
     *
     * @param SessionInterface $manager The session manager.
     * 
     * @return static self instance
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'static',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'manager',
               'type' => 'Luminova\\Sessions\\SessionInterface',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setLogger',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the logger for this session.
     *
     * @param LoggerInterface $logger The logger to set.
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'logger',
               'type' => 'Psr\\Log\\LoggerInterface',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as array from current session storage 
     * @param string $index optional key to get
     * @return array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toObject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as object from current session storage
     * 
     * @param string $index optional key to get
     * 
     * @return object
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toExport',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get all storage data as array 
     * 
     * @return object
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setManager',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the session manager.
     *
     * @param SessionInterface $manager The session manager to set.
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'manager',
               'type' => 'Luminova\\Sessions\\SessionInterface',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getManager',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the session manager.
     *
     * @return SessionInterface $this->manager 
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => '?Luminova\\Sessions\\SessionInterface',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the storage key for the session.
     *
     * @param string $storage The storage key to set.
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get storage name
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the value from the session by key.
     *
     * @param string $key The key to retrieve.
     * @param mixed $default default value 
     * 
     * @return mixed
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getFrom',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data from specified storage instance
     * 
     * @param string $index value key to get
     * @param string $storage Storage key name
     * 
     * @return mixed
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setTo',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data from specified storage instance
     * 
     * @param string $index value key to get
     * @param mixed $data data to set
     * @param string $storage Storage key name
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'online',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if session user is online from any storage instance
     * 
     * @param string $storage optional storage instance key
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'set',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the value in the session by key.
     *
     * @param string $key The key to set.
     * @param mixed $value The value to set.
     * 
     * @return self
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'add',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add a value to the session by key.
     *
     * @param string $key The key to set.
     * @param mixed $value The value to set.
     * 
     * @return self
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'remove',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Remove a value from the session by key.
     *
     * @param string $key The key to remove.
     * 
     * @return self
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'clear',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Clear the session storage.
     *
     * @param string $storage The storage key to clear.
     * 
     * @return self
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'has',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if key exists in session
     * @param string $key
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'start',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * Initialize and start session manager.
    *
    * @return void
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'synchronize',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Start an online session with an optional IP address.
     *
     * @param string $ip The IP address.
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'ip',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'ipAuthSession',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if user ip address match with session login ip
     * If not logout
     *
     * @param string $storage Optional storage location
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'ipChanged',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if user ip address match with session login ip
     *
     * @param string $storage Optional storage location
     * 
     * @return bool
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'goOnline',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @deprecated Use synchronize() method instead.
     *
     * Start an online session with an optional IP address.
     *
     * @param string $ip The IP address.
     * 
     * @return self
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'ip',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/SessionInterface.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedInterfaceNode::__set_state(array(
       'name' => 'Luminova\\Sessions\\SessionInterface',
       'phpDoc' => NULL,
       'extends' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set storage key
     *
     * @param string $storage The session storage key.
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get storage key
     * @return string
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'add',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add a key-value pair to the session data.
     *
     * @param string $key The key.
     * @param mixed $value The value.
     * @return self
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'set',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Set key and value to session
     * @param string $key key to set
     * @param mixed $value value to set
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * get data from session
     * @param string $index key to het
     * @param mixed $default default value 
     * 
     * @return mixed
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getFrom',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data from specified storage instance
     * @param string $index value key to get
     * @param string $storage Storage key name
     * @return mixed
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setTo',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data from specified storage instance
     * @param string $index value key to get
     * @param mixed $data data to set
     * @param string $storage Storage key name
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'online',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if session user is online from any storage instance
     * @param string $online optional storage instance key
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'clear',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Clear all data from specific session storage by passing the storage key
     * @param string $storage storage key to unset
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'remove',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Remove key from current session storage by passing the key
     * @param string $index key index to unset
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getContents',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as array from storage 
     * 
     * @param string $storage optional storage key 
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getResult',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    *Get all stored session as array
    * @return array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'has',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if key exists in session
     * @param string $key
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if storage key exists in session
     * 
     * @param string $storage
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as array from current session storage 
     * @param string $index optional key to get
     * @return array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toObject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as object from current session storage
     * @param string $index optional key to get
     * @return object
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setConfig',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Set cookie options 
     * 
     * @param string $config SessionConfig class name
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'config',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Sessions/SessionManager.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Sessions\\SessionManager',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Sessions\\SessionInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'storage',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $storage
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Session constructor.
     *
     * @param string $storage The session storage key.
     * @param array $config Session configuration
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setConfig',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Set cookie options 
     * 
     * @param string $config SessionConfig class name
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'config',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set storage key
     *
     * @param string $storage The session storage key.
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get storage key
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'add',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add a key-value pair to the session data.
     *
     * @param string $key The key.
     * @param mixed $value The value.
     * 
     * @return self
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'set',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Set key and value to session
     * 
     * @param string $key key to set
     * @param mixed $value value to set
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * get data from session
     * 
     * @param string $index key to het
     * @param mixed $default default value 
     * 
     * @return mixed
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getFrom',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data from specified storage instance
     * 
     * @param string $index value key to get
     * @param string $storage Storage key name
     * 
     * @return mixed
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setTo',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data from specified storage instance
     * 
     * @param string $index value key to get
     * @param mixed $data data to set
     * @param string $storage Storage key name
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'online',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if session user is online from any storage instance
     * 
     * @param string $storage Optional storage key 
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'clear',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Clear all data from specific session storage by passing the storage key
     * 
     * @param string $storage storage key to unset
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'remove',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Remove key from current session storage by passing the key
     * 
     * @param string $index key index to unset
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'has',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if key exists in session storage
     * 
     * @param string $key
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if storage key exists in session
     * 
     * @param string $storage
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getResult',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get all stored session as array
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as array from current session storage 
     * 
     * @param string $index optional key to get
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toObject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as object from current session storage
     * 
     * @param string $index optional key to get
     * 
     * @return object
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toAs',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as object or array from current session storage
     * 
     * @param string $type return type of object or array
     * @param string $index optional key to get
     * 
     * @return object|array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'object|array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getContents',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as array from storage 
     * 
     * @param string $storage optional storage key 
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Helper.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Storage\\Helper',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'byteToUnit',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'bytes',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'add_name',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toBytes',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'from',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/S3.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Storage\\S3',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => true,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key_or_config',
               'type' => 'string|array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'secret',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'region',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'upload',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'bucket',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'filepath',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'folderSize',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'bucket',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'folder',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fileSize',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'bucket',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fileExist',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'bucket',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'bucket',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'filetype',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'folder',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'put',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'bucket',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'file',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'bucketUrl',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'bucket',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'region',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'signature',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'bucket',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'iam',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'policy',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'bucket',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expires',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'presignedRequest',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'bucket',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expires',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'post',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'bucket',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expires',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'startWith',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Storage/Uploader.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Storage\\Uploader',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => true,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'put',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Handles non-chunked file upload.
     *
     * @param string $path The directory path where the file will be stored.
     * @param array $file An associative array containing information about the uploaded file.
     * 
     * @return object<string, mixed> An object containing the upload status.
     */',
             'namespace' => 'Luminova\\Storage',
             'uses' => 
            array (
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'file',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'chunk',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Handles chunked file upload.
     *
     * @param string $path The directory path where the file will be stored.
     * @param array $file An associative array containing information about the uploaded file.
     * @param int $chunk The current chunk index (default is 0).
     * @param int $chunks The total number of chunks (default is 0).
     * @param int $length The length of each chunk in bytes (default is 4096).
     * 
     * @return object<string, mixed> An object containing the upload status.
     */',
             'namespace' => 'Luminova\\Storage',
             'uses' => 
            array (
              'paths' => 'Luminova\\Application\\Paths',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'file',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'chunk',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'chunks',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            4 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'length',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Smarty.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Template\\Smarty',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'smarty',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var SmartyTemplate $smarty
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?Smarty',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'instance',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var SmartyTemplate $instance static instance 
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'root',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $root framework root directory
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initializes the Smarty
     * 
     * @param string $root framework root directory
     * 
     * @throws AppException
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'root',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get Smarty singleton instance
     * 
     * @return SmartyTemplate static::$instance static instance 
     * @throws AppException
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'Smarty',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getSmarty',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get smarty instance 
     * 
     * @return SmartyTemplate new instance 
     * @throws AppException
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'Smarty',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setDirectories',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize smarty template directories
     * 
     * @param string $templateFolder smarty template directory
     * @param string $compileFolder smarty template complied directory
     * @param string $configFolder smarty template config directory
     * @param string $cacheFolder smarty template cache directory
     * 
     * @return self $this Luminova smarty class instance
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'templateFolder',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'compileFolder',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'configFolder',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cacheFolder',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'assignOptions',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize smarty template directories
     * 
     * @param array $options assign options to smarty
     * @param bool $nocache if true any output of this variable will be not cached
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'nocache',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'caching',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize smarty template directories
     * 
     * @param bool $cache allow caching template
     * @param int $mode Caching modes
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cache',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'mode',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'testInstall',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Test install
     *
     * @param array $errors — array to push results into rather than outputting them
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'errors',
               'type' => NULL,
               'byRef' => true,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'compileCheck',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check template for modifications?
     *
     * @param int $mode compile check mode
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'mode',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'display',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * displays a Smarty template
     *
     * @param string $template   the resource handle of the template file or template object
     * @param mixed  $cache_id   cache id to be used with this template
     * @param mixed  $compile_id compile id to be used with this template
     * @param object $parent     next higher level of Smarty variables
     *
     * @return void 
     * @throws AppException
     */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'template',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cache_id',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'compile_id',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'parent',
               'type' => '?object',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/Template.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Template\\Template',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
        0 => 'Luminova\\Template\\TemplateTrait',
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'dir',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/TemplateTrait.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedTraitNode::__set_state(array(
       'traitName' => 'Luminova\\Template\\TemplateTrait',
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Template/ViewModel.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Template\\ViewModel',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Task.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Time\\Task',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'create',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timeDate',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isActive',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Function responsible for corn-job deal opening.
     *
     * @param string $startDate 2023-09-25
     * @param string $startTime 17:00PM
     * @param string $timezone
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
              'datetimezone' => 'DateTimeZone',
              'dateinterval' => 'DateInterval',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'startDate',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'startTime',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isOpen',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check between opening and closing time has passed
     * 
     * @param string $open 2023-09-25 08:00AM
     * @param string $close 2023-09-25 17:00PM
     * @param string $timezone
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
              'datetimezone' => 'DateTimeZone',
              'dateinterval' => 'DateInterval',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'open',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'close',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'expired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Function to check if a given expiry date and time has passed.
     *
     * @param string $expiryDateTime
     * @param string $timezone
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
              'datetimezone' => 'DateTimeZone',
              'dateinterval' => 'DateInterval',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expiryDateTime',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'campaignExpired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Function to check if a campaign has expired.
     *
     * @param string $open
     * @param string $timezone
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
              'datetimezone' => 'DateTimeZone',
              'dateinterval' => 'DateInterval',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'open',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasExpired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Function to check if an event has expired.
     *
     * @param string $start
     * @param string $timezone
     * @param bool $format
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
              'datetimezone' => 'DateTimeZone',
              'dateinterval' => 'DateInterval',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'start',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'format',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasPassed',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if a certain amount of minutes has passed since the given timestamp.
     *
     * @param int|string $timestamp Either a Unix timestamp or a string representing a date/time.
     * @param int $minutes The number of minutes to check against.
     * @param null|DateTimeZone|string $timezone Optional timezone. If null, the default timezone is used.
     *
     * @return bool True if the specified minutes have passed, false otherwise.
    */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
              'datetimezone' => 'DateTimeZone',
              'dateinterval' => 'DateInterval',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timestamp',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'minutes',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'null|DateTimeZone|string|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'format',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Function to format date and time.
     *
     * @param string $date
     * @param string $time
     *
     * @return string|false
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
              'datetimezone' => 'DateTimeZone',
              'dateinterval' => 'DateInterval',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'date',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'time',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toDateTime',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Function to convert a string to a formatted date and time.
     *
     * @param string $string
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
              'datetimezone' => 'DateTimeZone',
              'dateinterval' => 'DateInterval',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Time/Time.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Time\\Time',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'DateTimeImmutable',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'timezone',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var DateTimeZone
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?DateTimeZone',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'locale',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var ?string
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'toStringFormat',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Format to use when displaying datetime through __toString
     *
     * @var string
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'defaultFormat',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Default Format to use w
     *
     * @var string $defaultFormat
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'relativePattern',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     *
     * @var string $relativePattern relative time keywords pattern
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Time constructor.
     *
     * @param ?string $time
     * @param DateTimeZone|string|null $timezone
     * @param ?string $local 
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'time',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'DateTimeZone|string|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setTimezone',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the TimeZone associated with the DateTime
     * And Returns a new instance with the revised timezone.
     *
     * @param DateTimeZone|string $timezone
     *
     * @return self
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedAttributeNode::__set_state(array(
               'name' => 'ReturnTypeWillChange',
               'args' => 
              array (
              ),
            )),
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'now',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns current Time instance with the timezone set.
     *
     * @param DateTimeZone|string|null $timezone
     * @param ?string $local 
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'DateTimeZone|string|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'parse',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns a new Time instance while parsing a datetime string.
     *
     * Example:
     *  $time = Time::parse(\'first day of December 2008\');
     *
     * @param string $datetime 
     * @param DateTimeZone|string|null $timezone
     * @param ?string $local 
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'datetime',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'DateTimeZone|string|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'today',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Return a new time with the time set to midnight.
     *
     * @param DateTimeZone|string|null $timezone
     * @param ?string $local 
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'DateTimeZone|string|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'yesterday',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns an instance set to midnight yesterday morning.
     *
     * @param DateTimeZone|string|null $timezone
     * @param ?string $local 
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'DateTimeZone|string|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getYear',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the localized Year
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMonth',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the localized Month
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getDay',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Return the localized day of the month.
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getHour',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Return the localized hour (in 24-hour format).
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMinute',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Return the localized minutes in the hour.
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getSecond',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Return the localized seconds
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getDayOfYear',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Return the index of the day of the year
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getWeekOfMonth',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Return the index of the week in the month
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getWeekOfYear',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Return the index of the week in the year
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getDayOfWeek',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Return the index of the day of the week
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getQuarter',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the number of the current quarter for the year.
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isDaylightSaving',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Are we in daylight savings time currently?
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isSameLocal',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns boolean whether the passed timezone is the same as
     * the local timezone.
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getUtc',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns boolean whether object is in UTC.
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getTimezoneName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the name of the current timezone.
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getUTCObject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns a Time instance with the timezone converted to UTC.
     *
     * @param DateTimeInterface|self|string $time
     *
     * @return DateTime|static
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'time',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toLocalizedString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the localized value of this instance in $format.
     *
     * @return false|string
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'format',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toDateTime',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Converts the current instance to a mutable DateTime object.
     *
     * @return DateTime
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fromInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Takes an instance of DateTimeInterface and returns an instance of Time with it\'s same values.
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'dateTime',
               'type' => 'DateTimeInterface',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fromTimestamp',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns a new instance with the datetime set based on the provided UNIX timestamp.
     *
     * @param DateTimeZone|string|null $timezone
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timestamp',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        31 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fromDate',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns a new instance based on the year, month and day. If any of those three
     * are left empty, will default to the current value.
     *
     * @param DateTimeZone|string|null $timezone
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'year',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'month',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'day',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            4 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        32 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fromTime',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns a new instance with the date set to today, and the time set to the values passed in.
     *
     * @param DateTimeZone|string|null $timezone
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'hour',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'minutes',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'seconds',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            4 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        33 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'createFrom',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns a new instance with the date time values individually set.
     *
     * @param DateTimeZone|string|null $timezone
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'year',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'month',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'day',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'hour',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            4 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'minutes',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            5 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'seconds',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            6 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            7 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        34 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'tomorrow',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns an instance set to midnight tomorrow morning.
     *
     * @param DateTimeZone|string|null $timezone
     * @param ?string $local 
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'DateTimeZone|string|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        35 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fromFormat',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Provides a replacement for DateTime\'s own createFromFormat function, that provides
     * more flexible timeZone handling
     *
     * @param string                   $format
     * @param string                   $datetime
     * @param DateTimeZone|string|null $timezone
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'format',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'time',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'DateTimeZone|string|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedAttributeNode::__set_state(array(
               'name' => 'ReturnTypeWillChange',
               'args' => 
              array (
              ),
            )),
          ),
        )),
        36 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'calendar',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns an array representation of the given calendar month.
     * The array values are timestamps which allow you to easily format
     * 
     * @param ?string $month date(\'n)
     * @param ?string $year date(\'y\')
     * 
     * @return array $calendar
    */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'month',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'year',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'DateTimeZone|string|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        37 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'days',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Get an array of dates for each day in a specific month.
	 *
	 * @param string|int|null $month The month (1-12).
	 * @param string|int|null $year The year.
	 * @param string $format The format for the returned dates (default is "d-M-Y").
	 * 
	 * @return array An array of dates within the specified month.
	 */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'month',
               'type' => 'string|int|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'year',
               'type' => 'string|int|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'format',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        38 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hours',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a list of time hours in 12-hour format with customizable intervals.
     *
     * @param int $interval The interval in minutes. Default is 30.
     * 
     * @return array An array of time hours.
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'interval',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        39 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'ago',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Converts a PHP timestamp to a social media-style time format (e.g., "2 hours ago").
	 *
	 * @param string|int $time The timestamp to convert.
     * 
	 * @return string Time in a human-readable format.
	 */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'time',
               'type' => 'string|int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        40 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'passed',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Check if a certain amount of minutes has passed since the given timestamp.
	 *
	 * @param int|string $timestamp Either a Unix timestamp or a string representing a date/time.
	 * @param int $minutes The number of minutes to check against.
	 *
	 * @return bool True if the specified minutes have passed, false otherwise.
	 */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timestamp',
               'type' => 'string|int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'minutes',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        41 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'daySuffix',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the suffix for a given day (e.g., 1st, 2nd, 3rd, 4th).
     *
     * @param string|int $day The day for which to determine the suffix.
     * 
     * @return string The day with its appropriate suffix.
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'day',
               'type' => 'string|int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        42 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isRelative',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Used to check time string to determine if it has relative time keywords
     * 
     * @param string $time 
     * 
     * @return bool
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'time',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.fm/system/Utils/Queue.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Utils\\Queue',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor to initialize the queue with jobs if provided.
     * 
     * @param array|null $jobs Array of jobs to initialize the queue.
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'jobs',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method to get a property.
     *
     * @param string $key The property key.
     *
     * @return mixed|null The property value.
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__isset',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method to check if a property is set.
     *
     * @param string $key The property key.
     *
     * @return bool True if the property is set, otherwise false.
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'push',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Push a closure or item to the queue.
     *
     * @param Closure|string|callable $item The item to enqueue.
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'item',
               'type' => 'Closure|string|callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Run the queue by executing all jobs.
     * And execute a callback function
     *
     * @param callable|null $callback Optional Callback function to execute after running the queue.
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => '?callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isEmpty',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the queue is empty.
     *
     * @return bool True if the queue is empty, otherwise false.
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasQueue',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the queue has registered callable jobs.
     *
     * @return bool True if the queue has registered callable jobs.
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'size',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the size of the queue.
     *
     * @return int The size of the queue.
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'delete',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Delete the queue.
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'remove',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Remove an job from the queue.
     *
     * @param mixed $job The job name to remove.
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'job',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'free',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Free resources
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current job from queue and return a new instance.
     *
     * @param int $index Current job index.
     *
     * @return Queue A new Queue instance.
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Utils\\Queue',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'current',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current job from queue and return a new instance.
     * 
     * @return Queue A new Queue instance.
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Utils\\Queue',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'next',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the next job from queue and return a new instance.
     * 
     * @return Queue A new Queue instance.
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Utils\\Queue',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'last',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the last job from queue and return a new instance.
     * 
     * @return Queue A new Queue instance.
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Utils\\Queue',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
); },
];
